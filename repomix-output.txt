This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.repomix/bundles.json
app/.gitignore
app/build.gradle
app/proguard-rules.pro
app/schemas/com.example.contentful_javasilver.data.AppDatabase/1.json
app/schemas/com.example.contentful_javasilver.data.local.AppDatabase/1.json
app/schemas/com.example.contentful_javasilver.data.QuizDatabase/1.json
app/schemas/com.example.contentful_javasilver.data.QuizDatabase/2.json
app/schemas/com.example.contentful_javasilver.data.QuizDatabase/3.json
app/schemas/com.example.contentful_javasilver.data.QuizDatabase/4.json
app/schemas/com.example.contentful_javasilver.data.QuizDatabase/5.json
app/src/androidTest/java/com/example/contentful_javasilver/ExampleInstrumentedTest.java
app/src/main/AndroidManifest.xml
app/src/main/java/com/example/contentful_javasilver/adapter/CategoryAdapter.java
app/src/main/java/com/example/contentful_javasilver/adapter/ChapterAdapter.java
app/src/main/java/com/example/contentful_javasilver/adapter/ChapterProgressAdapter.java
app/src/main/java/com/example/contentful_javasilver/adapter/HistoryAdapter.java
app/src/main/java/com/example/contentful_javasilver/adapter/ProblemListAdapter.java
app/src/main/java/com/example/contentful_javasilver/adapter/StatisticsAdapter.java
app/src/main/java/com/example/contentful_javasilver/adapter/UnitLessonAdapter.java
app/src/main/java/com/example/contentful_javasilver/AsyncHelperCoroutines.kt
app/src/main/java/com/example/contentful_javasilver/BookmarkFragment.java
app/src/main/java/com/example/contentful_javasilver/CategoryFragment.java
app/src/main/java/com/example/contentful_javasilver/ChapterFragment.java
app/src/main/java/com/example/contentful_javasilver/ContentfulGetApi.java
app/src/main/java/com/example/contentful_javasilver/data/ChapterProgressItem.java
app/src/main/java/com/example/contentful_javasilver/data/DatabaseTransaction.kt
app/src/main/java/com/example/contentful_javasilver/data/ProblemStats.java
app/src/main/java/com/example/contentful_javasilver/data/QuizDao.java
app/src/main/java/com/example/contentful_javasilver/data/QuizDatabase.java
app/src/main/java/com/example/contentful_javasilver/data/QuizEntity.java
app/src/main/java/com/example/contentful_javasilver/data/QuizHistory.java
app/src/main/java/com/example/contentful_javasilver/data/repository/QuizRepository.kt
app/src/main/java/com/example/contentful_javasilver/DatabaseHelperCoroutines.kt
app/src/main/java/com/example/contentful_javasilver/decoration/VerticalSpaceItemDecoration.java
app/src/main/java/com/example/contentful_javasilver/di/AppModule.java
app/src/main/java/com/example/contentful_javasilver/di/DatabaseModule.kt
app/src/main/java/com/example/contentful_javasilver/HistoryFragment.java
app/src/main/java/com/example/contentful_javasilver/HomeFragment.java
app/src/main/java/com/example/contentful_javasilver/LearningLogFragment.java
app/src/main/java/com/example/contentful_javasilver/LoadingFragment.java
app/src/main/java/com/example/contentful_javasilver/LoginFragment.kt
app/src/main/java/com/example/contentful_javasilver/MainActivity.java
app/src/main/java/com/example/contentful_javasilver/model/CategoryItem.java
app/src/main/java/com/example/contentful_javasilver/model/ChapterItem.java
app/src/main/java/com/example/contentful_javasilver/model/UnitLessonItem.java
app/src/main/java/com/example/contentful_javasilver/models/Problem.kt
app/src/main/java/com/example/contentful_javasilver/MyApplication.java
app/src/main/java/com/example/contentful_javasilver/PrivacyPolicyFragment.java
app/src/main/java/com/example/contentful_javasilver/ProblemListFragment.java
app/src/main/java/com/example/contentful_javasilver/QuestionCategoryFragment.java
app/src/main/java/com/example/contentful_javasilver/QuizFragment.kt
app/src/main/java/com/example/contentful_javasilver/RegisterFragment.kt
app/src/main/java/com/example/contentful_javasilver/SettingsFragment.java
app/src/main/java/com/example/contentful_javasilver/StartFragment.java
app/src/main/java/com/example/contentful_javasilver/StatisticsFragment.java
app/src/main/java/com/example/contentful_javasilver/ui/LoginScreen.kt
app/src/main/java/com/example/contentful_javasilver/ui/QuizScreen.kt
app/src/main/java/com/example/contentful_javasilver/ui/RegisterScreen.kt
app/src/main/java/com/example/contentful_javasilver/ui/StartScreen.kt
app/src/main/java/com/example/contentful_javasilver/ui/theme/Theme.kt
app/src/main/java/com/example/contentful_javasilver/utils/SecurePreferences.java
app/src/main/java/com/example/contentful_javasilver/viewmodels/AuthViewModel.kt
app/src/main/java/com/example/contentful_javasilver/viewmodels/BookmarkViewModel.java
app/src/main/java/com/example/contentful_javasilver/viewmodels/HistoryViewModel.java
app/src/main/java/com/example/contentful_javasilver/viewmodels/LoadingViewModel.kt
app/src/main/java/com/example/contentful_javasilver/viewmodels/QuizViewModel.java
app/src/main/java/com/example/contentful_javasilver/viewmodels/StatisticsViewModel.java
app/src/main/java/com/example/contentfuljavasilver/data/ThemeDataStore.kt
app/src/main/java/com/example/contentfuljavasilver/di/DataStoreModule.kt
app/src/main/java/com/example/contentfuljavasilver/viewmodel/ThemeViewModel.kt
app/src/main/res/anim/chat_bubble_in.xml
app/src/main/res/anim/gradient_animation.xml
app/src/main/res/anim/slide_in_left.xml
app/src/main/res/anim/slide_in_right.xml
app/src/main/res/anim/slide_out_left.xml
app/src/main/res/anim/slide_out_right.xml
app/src/main/res/animator/toggle_elevation_animator.xml
app/src/main/res/color/drawer_item_color_selector.xml
app/src/main/res/color/quiz_choice_background_selector.xml
app/src/main/res/color/quiz_choice_checkbox_tint_selector.xml
app/src/main/res/color/quiz_choice_stroke_color_selector.xml
app/src/main/res/color/quiz_choice_text_color_selector.xml
app/src/main/res/color/toggle_icon_color.xml
app/src/main/res/color/toggle_text_color.xml
app/src/main/res/drawable/background_dot_pattern.xml
app/src/main/res/drawable/banner_background_gradient.xml
app/src/main/res/drawable/bar_background_active_gradient.xml
app/src/main/res/drawable/bar_background_active.xml
app/src/main/res/drawable/bar_background.xml
app/src/main/res/drawable/bar_track_background.xml
app/src/main/res/drawable/bg_problem_answered.xml
app/src/main/res/drawable/bg_problem_unanswered.xml
app/src/main/res/drawable/bottom_nav_background.xml
app/src/main/res/drawable/bottom_nav_selected_background.xml
app/src/main/res/drawable/bubble_background.xml
app/src/main/res/drawable/button_background_blue.xml
app/src/main/res/drawable/button_background_small.xml
app/src/main/res/drawable/button_background.xml
app/src/main/res/drawable/button_stroke_pink.xml
app/src/main/res/drawable/category_badge_background.xml
app/src/main/res/drawable/chat_bubble_background.xml
app/src/main/res/drawable/circular_progress_background.xml
app/src/main/res/drawable/circular_progress_bar.xml
app/src/main/res/drawable/day_highlight_circle.xml
app/src/main/res/drawable/dot_pattern.xml
app/src/main/res/drawable/gradient_background.xml
app/src/main/res/drawable/gradient_spot_blue.xml
app/src/main/res/drawable/gradient_spot_green.xml
app/src/main/res/drawable/gradient_spot_orange.xml
app/src/main/res/drawable/gradient_spot_pink.xml
app/src/main/res/drawable/highlight_background.xml
app/src/main/res/drawable/home_background_gradient.xml
app/src/main/res/drawable/ic_arrow_back.xml
app/src/main/res/drawable/ic_arrow_forward.xml
app/src/main/res/drawable/ic_bar_chart.xml
app/src/main/res/drawable/ic_baseline_category_24.xml
app/src/main/res/drawable/ic_baseline_menu_book_24.xml
app/src/main/res/drawable/ic_book.xml
app/src/main/res/drawable/ic_bookmark_border_24dp.xml
app/src/main/res/drawable/ic_bookmark_default_color.xml
app/src/main/res/drawable/ic_bookmark_filled.xml
app/src/main/res/drawable/ic_bookmark.xml
app/src/main/res/drawable/ic_category_placeholder.xml
app/src/main/res/drawable/ic_category.xml
app/src/main/res/drawable/ic_chapter.xml
app/src/main/res/drawable/ic_clock.xml
app/src/main/res/drawable/ic_exam_checklist.xml
app/src/main/res/drawable/ic_fire_achievement.xml
app/src/main/res/drawable/ic_folder_24.xml
app/src/main/res/drawable/ic_folder_category.xml
app/src/main/res/drawable/ic_gem_achievement.xml
app/src/main/res/drawable/ic_gem_placeholder.xml
app/src/main/res/drawable/ic_google_logo.xml
app/src/main/res/drawable/ic_grammar_category.xml
app/src/main/res/drawable/ic_history_24dp.xml
app/src/main/res/drawable/ic_history.xml
app/src/main/res/drawable/ic_home_24dp.xml
app/src/main/res/drawable/ic_home.xml
app/src/main/res/drawable/ic_launcher_background.xml
app/src/main/res/drawable/ic_launcher_foreground.xml
app/src/main/res/drawable/ic_lesson_class.xml
app/src/main/res/drawable/ic_lesson_code.xml
app/src/main/res/drawable/ic_lesson_complete.xml
app/src/main/res/drawable/ic_lesson_control.xml
app/src/main/res/drawable/ic_lesson_datatype.xml
app/src/main/res/drawable/ic_lesson_exception.xml
app/src/main/res/drawable/ic_lesson_icon_template.xml
app/src/main/res/drawable/ic_lesson_inheritance.xml
app/src/main/res/drawable/ic_lesson_method.xml
app/src/main/res/drawable/ic_lesson_package.xml
app/src/main/res/drawable/ic_list_24.xml
app/src/main/res/drawable/ic_list.xml
app/src/main/res/drawable/ic_listening_category.xml
app/src/main/res/drawable/ic_menu.xml
app/src/main/res/drawable/ic_person.xml
app/src/main/res/drawable/ic_quiz.xml
app/src/main/res/drawable/ic_reading_category.xml
app/src/main/res/drawable/ic_search.xml
app/src/main/res/drawable/ic_settings_24dp.xml
app/src/main/res/drawable/ic_settings.xml
app/src/main/res/drawable/ic_shield.xml
app/src/main/res/drawable/ic_shuffle_24.xml
app/src/main/res/drawable/ic_shuffle.xml
app/src/main/res/drawable/ic_speaking_category.xml
app/src/main/res/drawable/ic_status_completed.xml
app/src/main/res/drawable/ic_status_incomplete.xml
app/src/main/res/drawable/ic_status_pending.xml
app/src/main/res/drawable/ic_textbook.xml
app/src/main/res/drawable/ic_topic.xml
app/src/main/res/drawable/ic_transparent_spacer.xml
app/src/main/res/drawable/ic_view_list_24dp.xml
app/src/main/res/drawable/ic_vocabulary_category.xml
app/src/main/res/drawable/java_mascot.xml
app/src/main/res/drawable/jcv_logo.xml
app/src/main/res/drawable/nav_button_bg.xml
app/src/main/res/drawable/nav_header_background_placeholder.xml
app/src/main/res/drawable/new_gradient_background.xml
app/src/main/res/drawable/outline_article_24.xml
app/src/main/res/drawable/outline_assignment_24.xml
app/src/main/res/drawable/outline_folder_24.xml
app/src/main/res/drawable/outline_help_outline_24.xml
app/src/main/res/drawable/pattern_dots.xml
app/src/main/res/drawable/premium_banner_background.xml
app/src/main/res/drawable/premium_button_bg.xml
app/src/main/res/drawable/problem_icon_background_solved.xml
app/src/main/res/drawable/problem_icon_background_unsolved.xml
app/src/main/res/drawable/progress_drawable.xml
app/src/main/res/drawable/rich_background_chapters.xml
app/src/main/res/drawable/rich_background_combined.xml
app/src/main/res/drawable/rounded_background_primary_dark.xml
app/src/main/res/drawable/rounded_button_bg_light.xml
app/src/main/res/drawable/rounded_button_bg.xml
app/src/main/res/drawable/selection_state_background.xml
app/src/main/res/drawable/selection_state_selector.xml
app/src/main/res/drawable/start_button_background.xml
app/src/main/res/drawable/status_badge_completed.xml
app/src/main/res/drawable/status_badge_new.xml
app/src/main/res/drawable/streak_badge_background.xml
app/src/main/res/drawable/toggle_background_selector.xml
app/src/main/res/drawable/toggle_button_background_selector.xml
app/src/main/res/drawable/toggle_button_background.xml
app/src/main/res/drawable/toggle_button_selector.xml
app/src/main/res/drawable/toggle_default_background.xml
app/src/main/res/drawable/toggle_navigation_selector.xml
app/src/main/res/drawable/toggle_selected_background.xml
app/src/main/res/drawable/toggle_unselected_background.xml
app/src/main/res/drawable/unit_button_bg_1.xml
app/src/main/res/drawable/unit_button_bg_2.xml
app/src/main/res/drawable/unit_button_bg_3.xml
app/src/main/res/drawable/unit_button_bg_4.xml
app/src/main/res/drawable/unit_button_bg_5.xml
app/src/main/res/drawable/unit_button_bg_6.xml
app/src/main/res/drawable/unit_button_bg.xml
app/src/main/res/layout-land/activity_main.xml
app/src/main/res/layout/activity_main.xml
app/src/main/res/layout/custom_preference_summary_white.xml
app/src/main/res/layout/dialog_explanation.xml
app/src/main/res/layout/fragment_bookmark.xml
app/src/main/res/layout/fragment_category.xml
app/src/main/res/layout/fragment_chapter.xml
app/src/main/res/layout/fragment_history.xml
app/src/main/res/layout/fragment_home.xml
app/src/main/res/layout/fragment_learning_log.xml
app/src/main/res/layout/fragment_loading.xml
app/src/main/res/layout/fragment_privacy_policy.xml
app/src/main/res/layout/fragment_problem_list.xml
app/src/main/res/layout/fragment_question_category.xml
app/src/main/res/layout/fragment_quiz.xml
app/src/main/res/layout/fragment_start.xml
app/src/main/res/layout/fragment_statistics.xml
app/src/main/res/layout/item_category.xml
app/src/main/res/layout/item_chapter_header.xml
app/src/main/res/layout/item_chapter.xml
app/src/main/res/layout/item_history.xml
app/src/main/res/layout/item_lesson.xml
app/src/main/res/layout/item_problem.xml
app/src/main/res/layout/item_question_category.xml
app/src/main/res/layout/item_statistics.xml
app/src/main/res/layout/item_unit_header.xml
app/src/main/res/layout/layout_achievements_banner.xml
app/src/main/res/layout/list_item_chapter_progress.xml
app/src/main/res/layout/nav_header_main.xml
app/src/main/res/menu/bottom_navigation_menu.xml
app/src/main/res/menu/drawer_menu.xml
app/src/main/res/menu/main_menu.xml
app/src/main/res/menu/problem_list_menu.xml
app/src/main/res/menu/quiz_menu.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
app/src/main/res/navigation/nav_graph.xml
app/src/main/res/raw/animation_coffee.json
app/src/main/res/raw/loading_anime.json
app/src/main/res/values-night/colors.xml
app/src/main/res/values-night/themes.xml
app/src/main/res/values/arrays.xml
app/src/main/res/values/attrs.xml
app/src/main/res/values/colors.xml
app/src/main/res/values/dimens.xml
app/src/main/res/values/ids.xml
app/src/main/res/values/strings.xml
app/src/main/res/values/themes.xml
app/src/main/res/values/type.xml
app/src/main/res/xml/backup_rules.xml
app/src/main/res/xml/data_extraction_rules.xml
app/src/main/res/xml/preferences.xml
app/src/test/java/com/example/contentful_javasilver/ExampleUnitTest.java
build.gradle
docs/code-review.md
gradle.properties
gradle/libs.versions.toml
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
res/values-night/colors.xml
res/values/colors.xml
settings.gradle
settings.gradle.kts

================================================================
Files
================================================================

================
File: docs/code-review.md
================
## アプリコードのレビューと改善提案（オープンソース化に向けて）

オープンソース化を目指して、コードの可読性と保守性を向上させたいとのこと、素晴らしい目標ですね！提供いただいたコードベース (`repomix-output.txt`) を拝見し、客観的な視点からレビューと改善提案をさせていただきます。オブラートに包まず、率直な意見を述べさせていただきます。

### 全体的な評価

* **良い点**:
    * 開発ルール (`docs/っっｘ`[cite: 5934], `docs/可読性の高いコーディングするには.md`[cite: 5972], `モダンでリッチなAndroidXMLデザインガイド_2025.md` [cite: 5979]) がドキュメントとして存在している点は素晴らしいです。規約があることで、チーム開発やコントリビューターの参加がスムーズになります。
    * 比較的新しい技術要素（Kotlin Coroutines[cite: 6117], Hilt[cite: 6143, 6147], Jetpack Compose[cite: 6151, 6222, 6265, 10329], Room[cite: 6002, 6012, 6020], Navigation Component [cite: 6550] など）を積極的に採用しようとしている姿勢が見られます。
    * Contentful [cite: 6066, 6462] を利用したコンテンツ管理や、Firebase Authentication [cite: 6147, 6287] を利用した認証など、モダンなバックエンド連携が行われています。
* **課題**:
    * **ルールと実装の乖離**: ルールファイルは存在しますが、コード全体でそれが徹底されているか、一貫性が保たれているかには疑問符がつきます。特に命名規則やリソース管理において、ルールに沿っていない可能性のある箇所が見受けられます（例：ハードコーディングの可能性、XML属性の順序など）。
    * **Kotlin/Java混在**: KotlinとJavaが混在しています [cite: 6117, 6065]。これは許容されますが、言語間の相互運用ルールやコーディングスタイルの一貫性を保つ努力が必要です。現状、明確な方針が見えにくい部分があります。
    * **コードの複雑性**: `repomix-output.txt` が長大であることから、個々のファイル、特に Fragment や Activity、ViewModel が肥大化している可能性があります。単一責任の原則 [cite: 5942] が守られていない箇所があるかもしれません。
    * **テストコード不足**: `src/androidTest` [cite: 6061] や `src/test` [cite: 6459] ディレクトリは存在しますが、ユニットテストやUIテストのカバレッジが十分でない可能性があります。これはオープンソースプロジェクトにおいて、変更に対する信頼性を担保する上で重要です。
    * **XMLレイアウトの改善点**: デザインガイド [cite: 5979] はありますが、実際のレイアウト (`res/layout/`) では、ハードコーディングされた値（色、dimen）の使用、テーマ属性の不活用、ネストが深いレイアウトなどが残っている可能性があります。
    * **古い技術要素/ライブラリ**: 一部のライブラリやGradleの設定 (`build.gradle`[cite: 11105], `gradle/libs.versions.toml` [cite: 10288] など) が最新でない可能性があります。例えば、Hiltのバージョンなど。

### 可読性・保守性向上のための具体的な提案

1.  **開発ルールの徹底と自動化**:
    * **最優先**: 既存のルールファイル (`docs/っっｘ` [cite: 5934] など) をチーム/コントリビューター全員で再確認し、**徹底的に遵守**してください。特に**命名規則** [cite: 5944] と**リソース管理**（`strings.xml`, `colors.xml`, `dimens.xml` の利用、ハードコーディング禁止 [cite: 5952]）の一貫性は、コードの読みやすさに直結します。
    * **静的解析ツールの導入・活用**: `ktlint`, `detekt`, `Android Lint` を導入し、CI/CDプロセスに組み込むことを強く推奨します。これにより、規約違反や潜在的なバグを自動的に検出し、コードレビューの負担を軽減できます [cite: 5949]。

2.  **リファクタリング**:
    * **巨大クラス/メソッドの分割**: 300行を超えるクラスや30行を超えるメソッド [cite: 5942] は、責務を分割することを検討してください。特に `Fragment` や `ViewModel` が肥大化しやすい傾向にあります。UseCaseパターン [cite: 5942] の導入も有効です。
    * **Kotlin/Javaの統一**: 今後の開発言語をKotlinに統一することを検討してください。混在させる場合は、明確なコーディング規約を設ける必要があります。
    * **XMLレイアウトの改善**:
        * `ConstraintLayout` を活用し、ネストを浅くする [cite: 5955, 5982]。
        * ハードコードされた色や寸法をテーマ属性 (`?attr/...`) や `dimens.xml` [cite: 5952] に置き換える。
        * 共通スタイルを `styles.xml` [cite: 5957] で定義し、適用する。
        * `tools:` 属性を活用してプレビューを見やすくする [cite: 5955]。
        * アクセシビリティ（コントラスト比、タッチターゲットサイズ ≥ 48dp, contentDescription）を確保する [cite: 5961, 5962]。

3.  **設計の見直し**:
    * **MVVMパターンの徹底**: ルール [cite: 5942] にある通り、View (Fragment/Compose) の責務、ViewModel の責務、Repository の責務を明確に分離し、依存関係が一方向になるように徹底してください。View から直接 Repository を触らない、ViewModel は Android フレームワークへの依存を最小限にする、などを意識します。
    * **DIの活用**: Hilt [cite: 6143] が導入されていますが、ViewModel や Repository の依存関係注入が徹底されているか確認し、手動でのインスタンス生成を避けてください。

4.  **テストの拡充**:
    * **ユニットテスト**: ViewModel、UseCase、Repository の public メソッドに対するユニットテストを記述してください [cite: 5950]。ビジネスロジックの正当性を保証します。
    * **UIテスト**: Espresso や Compose Testing を用いて、主要な画面遷移やユーザー操作のテストを追加することを検討してください [cite: 5950]。リファクタリング時のデグレード防止に役立ちます。

5.  **ドキュメントの整備**:
    * **README.md**: プロジェクトの概要、ビルド方法、セットアップ手順、コントリビューションガイドラインなどを明確に記述します。
    * **コードコメント**: `// TODO:`, `// FIXME:` [cite: 5947] は具体的な内容と担当者（可能なら）を明記し、定期的に見直してください。複雑なロジックや設計意図には適切なコメント（KDoc/Javadoc）を追加します。
    * **アーキテクチャドキュメント**: `docs/architecture.md` [cite: 6461] や `docs/project_structure.md` [cite: 6492] を最新の状態に保ちます。

6.  **ライブラリの更新**:
    * 使用しているライブラリ（`build.gradle`[cite: 11105], `libs.versions.toml` [cite: 10288] 参照）のバージョンを確認し、安定版の最新バージョンにアップデートすることを検討してください。特にセキュリティに関わるライブラリは重要です。

### オープンソース化に向けた追加考慮事項

* **ライセンス**: プロジェクトに適したオープンソースライセンスを選択し、リポジトリに明記してください。
* **コントリビューションガイドライン**: バグレポートの方法、プルリクエストのプロセスなどを記載した `CONTRIBUTING.md` を作成します。
* **Issueトラッカー**: 開発タスクやバグを管理するためのIssueトラッカーを整備します。
* **機密情報**: `google-services.json` [cite: 5993, 6554] や `local.properties` に含まれるAPIキーなどの機密情報がリポジトリにコミットされないように `.gitignore` [cite: 6561] を適切に設定し、管理方法を検討してください（環境変数、CIのSecretsなど）。`SecurePreferences` [cite: 6268] で管理している情報も同様です。

### まとめ

コードベースには多くの可能性が秘められていますが、オープンソースとして公開し、多くの人に貢献してもらうためには、**規約の徹底**と**コードの一貫性**、そして**テストによる品質保証**が不可欠です。

今回挙げた点を一つずつ改善していくのは大変かもしれませんが、静的解析ツールの導入から始めるなど、段階的に取り組むことをお勧めします。頑張ってください！応援しています。

================
File: .repomix/bundles.json
================
{
  "bundles": {}
}

================
File: app/.gitignore
================
/build

================
File: app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: app/schemas/com.example.contentful_javasilver.data.AppDatabase/1.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 1,
    "identityHash": "873268525f8d4c85593253df051da9fc",
    "entities": [
      {
        "tableName": "quiz_table",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '873268525f8d4c85593253df051da9fc')"
    ]
  }
}

================
File: app/schemas/com.example.contentful_javasilver.data.local.AppDatabase/1.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 1,
    "identityHash": "5763030b3559509a9a6e5b71bd5c1936",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `question_category` TEXT, `difficulty` TEXT, `question_text` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "question_category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "question_text",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '5763030b3559509a9a6e5b71bd5c1936')"
    ]
  }
}

================
File: app/schemas/com.example.contentful_javasilver.data.QuizDatabase/1.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 1,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: app/schemas/com.example.contentful_javasilver.data.QuizDatabase/2.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 2,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: app/schemas/com.example.contentful_javasilver.data.QuizDatabase/3.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 3,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: app/schemas/com.example.contentful_javasilver.data.QuizDatabase/4.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 4,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: app/src/androidTest/java/com/example/contentful_javasilver/ExampleInstrumentedTest.java
================
package com.example.contentful_javasilver;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.example.contentful_javasilver", appContext.getPackageName());
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/adapter/ChapterAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.content.Context;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.R;
import com.example.contentful_javasilver.model.ChapterItem;

import java.util.List;

public class ChapterAdapter extends RecyclerView.Adapter<ChapterAdapter.ChapterViewHolder> {

    private final List<ChapterItem> chapters;
    private final OnChapterClickListener listener;

    public ChapterAdapter(List<ChapterItem> chapters, OnChapterClickListener listener) {
        this.chapters = chapters;
        this.listener = listener;
    }

    @NonNull
    @Override
    public ChapterViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_chapter, parent, false);
        return new ChapterViewHolder(view, listener);
    }

    @Override
    public void onBindViewHolder(@NonNull ChapterViewHolder holder, int position) {
        holder.bind(chapters.get(position));
    }

    @Override
    public int getItemCount() {
        return chapters.size();
    }

    public void updateItems(List<ChapterItem> newChapters) {
        this.chapters.clear();
        this.chapters.addAll(newChapters);
        notifyDataSetChanged();
    }

    static class ChapterViewHolder extends RecyclerView.ViewHolder {
        private final TextView chapterButton;
        private final TextView chapterProgress;
        private final TextView chapterTopicTitle;
        private final TextView chapterTopicDescription;
        private final View chapterDivider;
        private final OnChapterClickListener listener;

        ChapterViewHolder(@NonNull View itemView, OnChapterClickListener listener) {
            super(itemView);
            chapterButton = itemView.findViewById(R.id.chapter_button);
            chapterProgress = itemView.findViewById(R.id.chapter_progress);
            chapterTopicTitle = itemView.findViewById(R.id.chapter_topic_title);
            chapterTopicDescription = itemView.findViewById(R.id.chapter_topic_description);
            chapterDivider = itemView.findViewById(R.id.chapter_divider);
            this.listener = listener;
        }

        void bind(ChapterItem chapter) {
            Context context = itemView.getContext();
            
            chapterButton.setText(context.getString(R.string.unit_format, chapter.getChapterNumber()));
            
            int unitButtonBgResId;
            switch (chapter.getChapterNumber()) {
                case 1:
                    unitButtonBgResId = R.drawable.unit_button_bg_1;
                    break;
                case 2:
                    unitButtonBgResId = R.drawable.unit_button_bg_2;
                    break;
                case 3:
                    unitButtonBgResId = R.drawable.unit_button_bg_3;
                    break;
                case 4:
                    unitButtonBgResId = R.drawable.unit_button_bg_4;
                    break;
                case 5:
                    unitButtonBgResId = R.drawable.unit_button_bg_5;
                    break;
                case 6:
                    unitButtonBgResId = R.drawable.unit_button_bg_6;
                    break;
                default:
                    unitButtonBgResId = R.drawable.unit_button_bg;
                    break;
            }

            chapterButton.setBackgroundResource(unitButtonBgResId);
            
            chapterProgress.setText(context.getString(
                    R.string.lessons_progress_format,
                    chapter.getCompletedCategories(),
                    chapter.getTotalCategories())
            );
            
            chapterTopicTitle.setText(chapter.getTitle());
            chapterTopicDescription.setText(chapter.getDescription());
            
            chapterDivider.setVisibility(View.VISIBLE);
            
            itemView.setOnClickListener(v -> {
                if (listener != null) {
                    listener.onChapterClick(chapter);
                }
            });
        }
    }

    public interface OnChapterClickListener {
        void onChapterClick(ChapterItem chapter);
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/adapter/ChapterProgressAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.ListAdapter;
import androidx.recyclerview.widget.RecyclerView;
import com.example.contentful_javasilver.R;
import com.example.contentful_javasilver.data.ChapterProgressItem;
import java.util.Locale;

public class ChapterProgressAdapter extends ListAdapter<ChapterProgressItem, ChapterProgressAdapter.ProgressViewHolder> {

    public ChapterProgressAdapter() {
        super(DIFF_CALLBACK);
    }

    private static final DiffUtil.ItemCallback<ChapterProgressItem> DIFF_CALLBACK =
            new DiffUtil.ItemCallback<ChapterProgressItem>() {
        @Override
        public boolean areItemsTheSame(@NonNull ChapterProgressItem oldItem, @NonNull ChapterProgressItem newItem) {
            // ユニークなIDがあればそれで比較、なければ名前で比較
            return oldItem.getChapterName().equals(newItem.getChapterName());
        }

        @Override
        public boolean areContentsTheSame(@NonNull ChapterProgressItem oldItem, @NonNull ChapterProgressItem newItem) {
            return oldItem.getCompletionPercentage() == newItem.getCompletionPercentage() &&
                   oldItem.getAnsweredCount() == newItem.getAnsweredCount() &&
                   oldItem.getTotalProblemsInChapter() == newItem.getTotalProblemsInChapter();
        }
    };

    @NonNull
    @Override
    public ProgressViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.list_item_chapter_progress, parent, false);
        return new ProgressViewHolder(itemView);
    }

    @Override
    public void onBindViewHolder(@NonNull ProgressViewHolder holder, int position) {
        ChapterProgressItem currentItem = getItem(position);
        holder.bind(currentItem);
    }

    static class ProgressViewHolder extends RecyclerView.ViewHolder {
        private final TextView chapterNameTextView;
        private final TextView accuracyPercentageTextView;
        private final ProgressBar chapterProgressBar;
        private final TextView progressCountTextView;

        public ProgressViewHolder(@NonNull View itemView) {
            super(itemView);
            chapterNameTextView = itemView.findViewById(R.id.chapterNameTextView);
            accuracyPercentageTextView = itemView.findViewById(R.id.accuracyPercentageTextView);
            chapterProgressBar = itemView.findViewById(R.id.chapterProgressBar);
            progressCountTextView = itemView.findViewById(R.id.progressCountTextView);
        }

        public void bind(ChapterProgressItem item) {
            chapterNameTextView.setText(item.getChapterName());
            accuracyPercentageTextView.setText(String.format(Locale.JAPAN, "%d%%", item.getCompletionPercentage()));
            chapterProgressBar.setProgress(item.getCompletionPercentage());
            progressCountTextView.setText(String.format(Locale.JAPAN, "%d/%d問", item.getAnsweredCount(), item.getTotalProblemsInChapter()));
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/adapter/StatisticsAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.ListAdapter;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.R;
import com.example.contentful_javasilver.data.ProblemStats;

import java.util.Locale;

public class StatisticsAdapter extends ListAdapter<ProblemStats, StatisticsAdapter.StatisticsViewHolder> {

    public StatisticsAdapter() {
        super(DIFF_CALLBACK);
    }

    private static final DiffUtil.ItemCallback<ProblemStats> DIFF_CALLBACK = new DiffUtil.ItemCallback<ProblemStats>() {
        @Override
        public boolean areItemsTheSame(@NonNull ProblemStats oldItem, @NonNull ProblemStats newItem) {
            // Compare based on the unique identifier (problemId)
            return oldItem.problemId.equals(newItem.problemId);
        }

        @Override
        public boolean areContentsTheSame(@NonNull ProblemStats oldItem, @NonNull ProblemStats newItem) {
            // Check if counts are the same
            return oldItem.correctCount == newItem.correctCount &&
                   oldItem.incorrectCount == newItem.incorrectCount;
        }
    };

    @NonNull
    @Override
    public StatisticsViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_statistics, parent, false);
        return new StatisticsViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull StatisticsViewHolder holder, int position) {
        ProblemStats currentStats = getItem(position);
        holder.problemIdTextView.setText(currentStats.problemId);
        holder.correctTextView.setText(String.format(Locale.getDefault(), "正: %d", currentStats.correctCount));
        holder.incorrectTextView.setText(String.format(Locale.getDefault(), "誤: %d", currentStats.incorrectCount));
        holder.accuracyTextView.setText(String.format(Locale.getDefault(), "率: %.1f%%", currentStats.getAccuracy()));
    }

    public static class StatisticsViewHolder extends RecyclerView.ViewHolder {
        public TextView problemIdTextView;
        public TextView correctTextView;
        public TextView incorrectTextView;
        public TextView accuracyTextView;

        public StatisticsViewHolder(View itemView) {
            super(itemView);
            problemIdTextView = itemView.findViewById(R.id.text_stats_problem_id);
            correctTextView = itemView.findViewById(R.id.text_stats_correct);
            incorrectTextView = itemView.findViewById(R.id.text_stats_incorrect);
            accuracyTextView = itemView.findViewById(R.id.text_stats_accuracy);
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/data/ChapterProgressItem.java
================
package com.example.contentful_javasilver.data;

/**
 * RecyclerView で章ごとの進捗を表示するためのデータクラス
 * (進捗率、解答済み問題数、章の総問題数を保持)
 */
public class ChapterProgressItem {
    private final String chapterName;
    private final int completionPercentage;
    private final int answeredCount;
    private final int totalProblemsInChapter;

    public ChapterProgressItem(String chapterName, int completionPercentage, int answeredCount, int totalProblemsInChapter) {
        this.chapterName = chapterName;
        this.completionPercentage = completionPercentage;
        this.answeredCount = answeredCount;
        this.totalProblemsInChapter = totalProblemsInChapter;
    }

    public String getChapterName() {
        return chapterName;
    }

    public int getCompletionPercentage() {
        return completionPercentage;
    }

    public int getAnsweredCount() {
        return answeredCount;
    }

    public int getTotalProblemsInChapter() {
        return totalProblemsInChapter;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/data/DatabaseTransaction.kt
================
package com.example.contentful_javasilver.data

import androidx.room.withTransaction
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

/**
 * データベーストランザクションを安全に処理するユーティリティクラス
 */
object DatabaseTransaction {
    /**
     * トランザクション内で処理を実行し、自動的にリソースを閉じる
     * @param database データベースインスタンス
     * @param block 実行するトランザクション処理
     * @return トランザクション処理の結果
     */
    suspend fun <T> executeInTransaction(database: QuizDatabase, block: suspend (QuizDao) -> T): T {
        return withContext(Dispatchers.IO) {
            // Room 2.2以降ではwithTransactionを使うとサスペンド関数を直接呼び出せる
            database.withTransaction {
                block(database.quizDao())
            }
        }
    }

    /**
     * クエリを実行して安全にリソースを閉じる
     * @param database データベースインスタンス
     * @param block 実行するクエリ処理
     * @return クエリ処理の結果
     */
    suspend fun <T> executeQuery(database: QuizDatabase, block: suspend (QuizDao) -> T): T {
        return withContext(Dispatchers.IO) {
            block(database.quizDao())
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/data/ProblemStats.java
================
package com.example.contentful_javasilver.data;

import androidx.annotation.NonNull;

/**
 * Represents the statistics for a single problem (qid).
 */
public class ProblemStats {

    @NonNull
    public String problemId; // The ID of the problem (qid)

    public int correctCount; // Number of times answered correctly

    public int incorrectCount; // Number of times answered incorrectly

    // Room needs a constructor (even if empty) or public fields.
    // We use public fields here for simplicity as Room can directly map columns to them.
    // If you needed more complex logic or encapsulation, you'd use a constructor and getters.
    public ProblemStats(@NonNull String problemId, int correctCount, int incorrectCount) {
        this.problemId = problemId;
        this.correctCount = correctCount;
        this.incorrectCount = incorrectCount;
    }

    // Optional: Method to calculate accuracy
    public double getAccuracy() {
        int total = correctCount + incorrectCount;
        if (total == 0) {
            return 0.0; // Avoid division by zero
        }
        return (double) correctCount / total * 100.0;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/data/QuizHistory.java
================
package com.example.contentful_javasilver.data;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;
import androidx.annotation.NonNull;

@Entity(tableName = "quiz_history")
public class QuizHistory {

    @PrimaryKey(autoGenerate = true)
    public int id;

    @NonNull
    @ColumnInfo(name = "problemId")
    public String problemId; // Matches QuizEntity ID type

    @ColumnInfo(name = "isCorrect")
    public boolean isCorrect;

    @ColumnInfo(name = "timestamp")
    public long timestamp; // Store time as milliseconds since epoch

    // Constructor
    public QuizHistory(@NonNull String problemId, boolean isCorrect, long timestamp) {
        this.problemId = problemId;
        this.isCorrect = isCorrect;
        this.timestamp = timestamp;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/data/repository/QuizRepository.kt
================
package com.example.contentful_javasilver.data.repository

import androidx.lifecycle.LiveData
import com.example.contentful_javasilver.data.QuizDao
import com.example.contentful_javasilver.data.QuizEntity
import com.example.contentful_javasilver.data.QuizHistory
import com.example.contentful_javasilver.data.ProblemStats
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton // Or @ViewModelScoped, depending on lifecycle needs
class QuizRepository @Inject constructor(private val quizDao: QuizDao) {

    // Example: Get all quizzes sorted as a suspend function
    suspend fun getAllQuizzesSorted(): List<QuizEntity> = withContext(Dispatchers.IO) {
        quizDao.getAllQuizzesSorted()
    }

    // Example: Get random quizzes as LiveData
    fun getRandomQuizzes(count: Int): LiveData<List<QuizEntity>> {
        return quizDao.getRandomQuizzes(count)
    }

    // Get a single random quiz ID
    suspend fun getRandomQuizId(): String? = withContext(Dispatchers.IO) {
        quizDao.getRandomQuizIdSync()
    }

    // Example: Get quiz count as LiveData
    fun getQuizCount(): LiveData<Int> {
        return quizDao.getQuizCount()
    }

    // Example: Get quiz count synchronously (use with caution on main thread)
    suspend fun getQuizCountSync(): Int = withContext(Dispatchers.IO) {
        quizDao.getQuizCountSync()
    }

    // Add other necessary repository methods wrapping DAO calls...
    // For example:
    // suspend fun getQuizzesByCategory(category: String): List<QuizEntity> = withContext(Dispatchers.IO) {
    //     quizDao.getQuizzesByCategorySync(category)
    // }

    suspend fun updateBookmarkStatus(qid: String, isBookmarked: Boolean) = withContext(Dispatchers.IO) {
        quizDao.updateBookmarkStatus(qid, isBookmarked)
    }

    fun getBookmarkedQuizzes(): LiveData<List<QuizEntity>> {
        return quizDao.getBookmarkedQuizzes()
    }

    suspend fun resetAllBookmarks() = withContext(Dispatchers.IO) {
        quizDao.resetAllBookmarks()
    }

    suspend fun insertHistory(history: QuizHistory) = withContext(Dispatchers.IO) {
        quizDao.insertHistory(history)
    }

    fun getAllHistorySortedByTimestampDesc(): LiveData<List<QuizHistory>> {
        return quizDao.getAllHistorySortedByTimestampDesc()
    }

    fun getProblemStatistics(): LiveData<List<ProblemStats>> {
        return quizDao.getProblemStatistics()
    }

    suspend fun getTotalAnswerCountSync(): Int = withContext(Dispatchers.IO) {
        quizDao.getTotalAnswerCountSync()
    }

    suspend fun getWeeklyAnswerCountSync(startTimeMillis: Long): Int = withContext(Dispatchers.IO) {
        quizDao.getWeeklyAnswerCountSync(startTimeMillis)
    }

    suspend fun getDistinctAnswerDaysCount(startTimeMillis: Long): Int = withContext(Dispatchers.IO) {
        quizDao.getDistinctAnswerDaysCount(startTimeMillis)
    }

    suspend fun getAllAnswerDaysSortedDesc(): List<String> = withContext(Dispatchers.IO) {
        quizDao.getAllAnswerDaysSortedDesc()
    }

    suspend fun getWeeklyAnswerCountSync(startTimeMillis: Long, endTimeMillis: Long): Int = withContext(Dispatchers.IO) {
        quizDao.getWeeklyAnswerCountSync(startTimeMillis, endTimeMillis)
    }

    // Add wrappers for other DAO methods as needed

}

================
File: app/src/main/java/com/example/contentful_javasilver/decoration/VerticalSpaceItemDecoration.java
================
package com.example.contentful_javasilver.decoration;

import android.graphics.Rect;
import android.view.View;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

public class VerticalSpaceItemDecoration extends RecyclerView.ItemDecoration {

    private final int verticalSpaceHeight;

    public VerticalSpaceItemDecoration(int verticalSpaceHeight) {
        this.verticalSpaceHeight = verticalSpaceHeight;
    }

    @Override
    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
        // Add top margin only for the first item to avoid double space between items
        // parent.getChildAdapterPosition(view) == 0 -> outRect.top = verticalSpaceHeight;
        
        // Add bottom margin to all items except the last one
        if (parent.getChildAdapterPosition(view) != parent.getAdapter().getItemCount() - 1) {
             outRect.bottom = verticalSpaceHeight;
        }
        // Add top margin to all items (alternative approach)
        // outRect.top = verticalSpaceHeight;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/di/AppModule.java
================
package com.example.contentful_javasilver.di;

import com.google.firebase.auth.FirebaseAuth;
import javax.inject.Singleton;
import dagger.Module;
import dagger.Provides;
import dagger.hilt.InstallIn;
import dagger.hilt.components.SingletonComponent;

@Module
@InstallIn(SingletonComponent.class) // Applicationスコープでインスタンスを提供
public final class AppModule {

    @Provides
    @Singleton // アプリ全体で FirebaseAuth の単一インスタンスを使用
    public FirebaseAuth provideFirebaseAuth() {
        return FirebaseAuth.getInstance();
    }

    // 他の依存関係 (例: Room Database, Retrofit など) も
    // 必要に応じてこのモジュールに追加できます。

}

================
File: app/src/main/java/com/example/contentful_javasilver/di/DatabaseModule.kt
================
package com.example.contentful_javasilver.di

import android.content.Context
import androidx.room.Room
import com.example.contentful_javasilver.data.QuizDao
import com.example.contentful_javasilver.data.QuizDatabase
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object DatabaseModule {

    @Provides
    @Singleton
    fun provideQuizDatabase(@ApplicationContext appContext: Context): QuizDatabase {
        return QuizDatabase.getDatabase(appContext)
        /* Alternative if using Room.databaseBuilder directly:
        return Room.databaseBuilder(
            appContext,
            QuizDatabase::class.java,
            "quiz_database" // Make sure the name matches your QuizDatabase class
        )
        // Add migrations if necessary
        .build()
        */
    }

    @Provides
    @Singleton // Assuming DAO should be singleton as well
    fun provideQuizDao(database: QuizDatabase): QuizDao {
        return database.quizDao()
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/LoginFragment.kt
================
package com.example.contentful_javasilver

import android.app.Activity
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.ui.platform.ComposeView
import androidx.compose.ui.platform.ViewCompositionStrategy
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.NavOptions
import androidx.navigation.fragment.findNavController
import com.example.contentful_javasilver.ui.LoginScreen
import com.example.contentful_javasilver.ui.theme.ContentfulJavasilverTheme
import com.example.contentful_javasilver.viewmodels.AuthViewModel
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.common.api.ApiException
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class LoginFragment : Fragment() {

    private val authViewModel: AuthViewModel by viewModels()

    // ActivityResultLauncher for Google Sign-In
    private lateinit var googleSignInLauncher: ActivityResultLauncher<android.content.Intent>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Initialize the launcher in onCreate
        googleSignInLauncher = registerForActivityResult(
            ActivityResultContracts.StartActivityForResult() // Standard contract
        ) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                // Handle the successful sign-in result
                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)
                try {
                    // Google Sign In was successful, authenticate with Firebase
                    val account = task.getResult(ApiException::class.java)!!
                    Log.d("LoginFragment", "Google Sign In successful, attempting Firebase Auth with token: ${account.idToken}")
                    authViewModel.firebaseAuthWithGoogle(account.idToken!!)
                } catch (e: ApiException) {
                    // Google Sign In failed, update UI appropriately
                    Log.w("LoginFragment", "Google sign in failed", e)
                    // Optionally show an error message to the user
                    authViewModel.setLoginError("Google ログインに失敗しました: ${e.statusCode}") // Add this method to ViewModel if needed
                }
            } else {
                // Handle sign-in cancellation or error
                Log.w("LoginFragment", "Google sign in cancelled or failed with code: ${result.resultCode}")
                 authViewModel.setLoginError("Google ログインがキャンセルされました")
            }
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        return ComposeView(requireContext()).apply {
            setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
            setContent {
                ContentfulJavasilverTheme {
                    LoginScreen(
                        viewModel = authViewModel,
                        onLoginSuccess = {
                            val navOptions = NavOptions.Builder()
                                .setPopUpTo(R.id.nav_graph, true)
                                .build()
                            findNavController().navigate(R.id.action_loginFragment_to_loadingFragment, null, navOptions)
                        },
                        onNavigateToRegister = {
                            findNavController().navigate(R.id.action_loginFragment_to_registerFragment)
                        },
                        // Pass the Google Sign-In Intent launch logic
                        onGoogleSignInClick = {
                            Log.d("LoginFragment", "Google Sign In button clicked")
                            val signInIntent = authViewModel.getGoogleSignInIntent()
                            googleSignInLauncher.launch(signInIntent)
                        }
                    )
                }
            }
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/model/CategoryItem.java
================
package com.example.contentful_javasilver.model;

import java.util.Objects;

/**
 * カテゴリ選択画面で表示するカテゴリの情報を保持するデータモデル
 */
public class CategoryItem {
    private final String categoryName;
    private final int totalQuestions;
    private final int completedQuestions;
    private final int iconResId; // カテゴリの種類を示すアイコン (仮)
    private final int chapterNumber; // どの章に属するか

    public CategoryItem(String categoryName, int totalQuestions, int completedQuestions, int iconResId, int chapterNumber) {
        this.categoryName = categoryName;
        this.totalQuestions = totalQuestions;
        this.completedQuestions = completedQuestions;
        this.iconResId = iconResId;
        this.chapterNumber = chapterNumber;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public int getTotalQuestions() {
        return totalQuestions;
    }

    public int getCompletedQuestions() {
        return completedQuestions;
    }

    public int getIconResId() {
        return iconResId;
    }
    
    public int getChapterNumber() {
        return chapterNumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CategoryItem that = (CategoryItem) o;
        return totalQuestions == that.totalQuestions &&
                completedQuestions == that.completedQuestions &&
                iconResId == that.iconResId &&
                chapterNumber == that.chapterNumber &&
                Objects.equals(categoryName, that.categoryName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(categoryName, totalQuestions, completedQuestions, iconResId, chapterNumber);
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/model/ChapterItem.java
================
package com.example.contentful_javasilver.model;

/**
 * チャプター選択画面で表示する章の情報を保持するデータモデル
 */
public class ChapterItem {
    
    private final int chapterNumber;
    private final String title;
    private final String description;
    private final int totalCategories;
    private final int completedCategories;
    private final int colorResId;
    private final int iconResId;

    /**
     * チャプターアイテム用コンストラクタ
     */
    public ChapterItem(int chapterNumber, String title, String description, 
                  int totalCategories, int completedCategories, 
                  int colorResId, int iconResId) {
        this.chapterNumber = chapterNumber;
        this.title = title;
        this.description = description;
        this.totalCategories = totalCategories;
        this.completedCategories = completedCategories;
        this.colorResId = colorResId;
        this.iconResId = iconResId;
    }

    public int getChapterNumber() {
        return chapterNumber;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getTotalCategories() {
        return totalCategories;
    }

    public int getCompletedCategories() {
        return completedCategories;
    }

    public int getColorResId() {
        return colorResId;
    }

    public int getIconResId() {
        return iconResId;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/model/UnitLessonItem.java
================
package com.example.contentful_javasilver.model;

/**
 * ユニットヘッダーまたはレッスンアイテムを表すデータモデル
 */
public class UnitLessonItem {
    
    private final boolean isUnitHeader;
    private final int unitNumber;
    private final int lessonNumber;
    private final String title;
    private final String description;
    private final String category;
    private final int iconResId;
    private final boolean isCompleted;
    private final int completedLessons;
    private final int totalLessons;
    private final boolean isLastUnit;
    private final String qid; // クイズID（レッスンを開くときに使用）

    /**
     * ユニットヘッダー用コンストラクタ
     */
    public UnitLessonItem(int unitNumber, String title, String description,
                         int completedLessons, int totalLessons, boolean isLastUnit) {
        this.isUnitHeader = true;
        this.unitNumber = unitNumber;
        this.lessonNumber = 0;
        this.title = title;
        this.description = description;
        this.category = "";
        this.iconResId = 0;
        this.isCompleted = false;
        this.completedLessons = completedLessons;
        this.totalLessons = totalLessons;
        this.isLastUnit = isLastUnit;
        this.qid = "";
    }

    /**
     * レッスンアイテム用コンストラクタ
     */
    public UnitLessonItem(int unitNumber, int lessonNumber, String title, String category,
                         int iconResId, boolean isCompleted, String qid) {
        this.isUnitHeader = false;
        this.unitNumber = unitNumber;
        this.lessonNumber = lessonNumber;
        this.title = title;
        this.description = "";
        this.category = category;
        this.iconResId = iconResId;
        this.isCompleted = isCompleted;
        this.completedLessons = 0;
        this.totalLessons = 0;
        this.isLastUnit = false;
        this.qid = qid;
    }

    public boolean isUnitHeader() {
        return isUnitHeader;
    }

    public int getUnitNumber() {
        return unitNumber;
    }

    public int getLessonNumber() {
        return lessonNumber;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public String getCategory() {
        return category;
    }

    public int getIconResId() {
        return iconResId;
    }

    public boolean isCompleted() {
        return isCompleted;
    }

    public int getCompletedLessons() {
        return completedLessons;
    }

    public int getTotalLessons() {
        return totalLessons;
    }

    public boolean isLastUnit() {
        return isLastUnit;
    }

    public String getQid() {
        return qid;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/models/Problem.kt
================
package com.example.contentful_javasilver.models

data class Problem(
    val id: String,
    val title: String,
    val description: String,
    val category: String,
    val isCompleted: Boolean = false
)

================
File: app/src/main/java/com/example/contentful_javasilver/MyApplication.java
================
package com.example.contentful_javasilver;

import android.app.Application;
import dagger.hilt.android.HiltAndroidApp;

@HiltAndroidApp
public class MyApplication extends Application {
    // 必要に応じて、onCreate() などで追加の初期化処理を記述できます
    @Override
    public void onCreate() {
        super.onCreate();
        // アプリケーションレベルの初期化処理
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/PrivacyPolicyFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.fragment.app.Fragment;
import androidx.navigation.NavController;
import androidx.navigation.fragment.NavHostFragment;
import androidx.navigation.ui.NavigationUI;

import com.google.android.material.bottomnavigation.BottomNavigationView;

public class PrivacyPolicyFragment extends Fragment {

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_privacy_policy, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        NavController navController = NavHostFragment.findNavController(this);

        // Setup BottomNavigationView
        // Note: Toolbar setup is removed as it's assumed to be handled by MainActivity
        BottomNavigationView bottomNav = view.findViewById(R.id.bottom_navigation);
        // Ensure the correct item is selected based on the current destination
        // This might need adjustment depending on how navigation is structured
        // If Privacy Policy is considered a top-level destination, add it to the menu
        // If not, you might want to hide the bottom nav or handle selection differently
        NavigationUI.setupWithNavController(bottomNav, navController);

        // Toolbar navigation click is assumed to be handled by MainActivity's toolbar setup

        // Hide BottomNavigationView if it's not a top-level destination
        // MainActivity might handle this globally, check MainActivity.java
        // ((MainActivity) requireActivity()).setBottomNavigationVisibility(false); // Example
    }

    @Override
    public void onResume() {
        super.onResume();
        // Optionally hide BottomNavigationView when this fragment is shown
        // MainActivity might handle this based on destination changes
        // ((MainActivity) requireActivity()).setBottomNavigationVisibility(false); // Example
    }

    @Override
    public void onPause() {
        super.onPause();
        // Optionally show BottomNavigationView when leaving this fragment
        // MainActivity might handle this based on destination changes
        // ((MainActivity) requireActivity()).setBottomNavigationVisibility(true); // Example
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/RegisterFragment.kt
================
package com.example.contentful_javasilver

import android.app.Activity
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.ui.platform.ComposeView
import androidx.compose.ui.platform.ViewCompositionStrategy
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.NavOptions
import androidx.navigation.fragment.findNavController
import com.example.contentful_javasilver.ui.RegisterScreen
import com.example.contentful_javasilver.ui.theme.ContentfulJavasilverTheme
import com.example.contentful_javasilver.viewmodels.AuthViewModel
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.common.api.ApiException
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class RegisterFragment : Fragment() {

    private val authViewModel: AuthViewModel by viewModels()

    // ActivityResultLauncher for Google Sign-In
    private lateinit var googleSignInLauncher: ActivityResultLauncher<android.content.Intent>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Initialize the launcher in onCreate (same as LoginFragment)
        googleSignInLauncher = registerForActivityResult(
            ActivityResultContracts.StartActivityForResult()
        ) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)
                try {
                    val account = task.getResult(ApiException::class.java)!!
                    Log.d("RegisterFragment", "Google Sign In successful, attempting Firebase Auth with token: ${account.idToken}")
                    authViewModel.firebaseAuthWithGoogle(account.idToken!!) // Register/Sign in with Google
                } catch (e: ApiException) {
                    Log.w("RegisterFragment", "Google sign in failed", e)
                    authViewModel.setLoginError("Google 登録/ログインに失敗しました: ${e.statusCode}")
                }
            } else {
                Log.w("RegisterFragment", "Google sign in cancelled or failed with code: ${result.resultCode}")
                authViewModel.setLoginError("Google 登録/ログインがキャンセルされました")
            }
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        return ComposeView(requireContext()).apply {
            setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
            setContent {
                ContentfulJavasilverTheme {
                    RegisterScreen(
                        viewModel = authViewModel,
                        onRegisterSuccess = {
                            val navOptions = NavOptions.Builder()
                                .setPopUpTo(R.id.nav_graph, true)
                                .build()
                            findNavController().navigate(R.id.action_registerFragment_to_loadingFragment, null, navOptions)
                        },
                        onNavigateBackToLogin = {
                            findNavController().popBackStack()
                        },
                        // Pass the Google Sign-In Intent launch logic
                        onGoogleSignInClick = {
                            Log.d("RegisterFragment", "Google Sign In button clicked")
                            val signInIntent = authViewModel.getGoogleSignInIntent()
                            googleSignInLauncher.launch(signInIntent)
                        }
                    )
                }
            }
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/ui/LoginScreen.kt
================
package com.example.contentful_javasilver.ui

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.example.contentful_javasilver.R
import com.example.contentful_javasilver.viewmodels.AuthViewModel
import com.google.firebase.auth.FirebaseAuth

@Composable
fun LoginScreen(
    // HiltからViewModelを取得
    viewModel: AuthViewModel = hiltViewModel(),
    // TODO: ログイン成功時のナビゲーション処理を追加
    onLoginSuccess: () -> Unit = {},
    // TODO: 新規登録画面へのナビゲーション処理を追加
    onNavigateToRegister: () -> Unit = {},
    onGoogleSignInClick: () -> Unit = {}
) {
    // State for email and password input fields
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }

    // Observe the login state from the ViewModel
    val loginState by viewModel.loginState.collectAsStateWithLifecycle()

    // Handle side effects when login state changes to Success
    LaunchedEffect(loginState) {
        if (loginState is AuthViewModel.LoginState.Success) {
            onLoginSuccess() // Navigate away on success
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("ログイン", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(32.dp))

        // Email Input
        OutlinedTextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("メールアドレス") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(16.dp))

        // Password Input
        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("パスワード") },
            modifier = Modifier.fillMaxWidth(),
            visualTransformation = PasswordVisualTransformation(),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(32.dp))

        // Login Button
        Button(
            onClick = { viewModel.signInWithEmailPassword(email, password) },
            modifier = Modifier.fillMaxWidth(),
            enabled = loginState !is AuthViewModel.LoginState.Loading // Disable if loading
        ) {
            Text("ログイン")
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Google Sign-In Button
        Button(
            onClick = onGoogleSignInClick,
            modifier = Modifier.fillMaxWidth(),
            enabled = loginState !is AuthViewModel.LoginState.Loading,
            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
        ) {
            Icon(
                painter = painterResource(id = R.drawable.ic_google_logo),
                contentDescription = "Google Logo",
                modifier = Modifier.size(ButtonDefaults.IconSize),
                tint = Color.Unspecified
            )
            Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))
            Text("Googleでログイン", color = MaterialTheme.colorScheme.onSurfaceVariant)
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Navigate to Register Screen
        TextButton(onClick = onNavigateToRegister) {
            Text("アカウントをお持ちでない場合はこちら")
        }

        // Loading Indicator
        if (loginState is AuthViewModel.LoginState.Loading) {
            Spacer(modifier = Modifier.height(16.dp))
            CircularProgressIndicator()
        }

        // Error Message
        if (loginState is AuthViewModel.LoginState.Error) {
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = (loginState as AuthViewModel.LoginState.Error).message,
                color = MaterialTheme.colorScheme.error
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun LoginScreenPreview() {
    // Preview doesn't need a real ViewModel.
    // We'll just call the Composable with default values or simplified logic if needed.
    // Since the viewModel parameter has a default value, we can call it without it for preview.
    // However, we need to pass the lambda functions.
    LoginScreen(
        onLoginSuccess = {},
        onNavigateToRegister = {},
        onGoogleSignInClick = {}
        // viewModel = hiltViewModel() // Let the default handle it, or provide a simple mock if absolutely necessary
    )
}

// Remove or comment out the placeholder ViewModel class as it's causing issues in preview
/*
open class AuthViewModel_Preview_Placeholder : AuthViewModel(FirebaseAuth.getInstance()) {
    // Override states/methods if needed for preview scenarios
}
*/

// Remember to add Hilt annotations to your Application class and Activity
// Example Application class:
// @HiltAndroidApp
// class YourApplication : Application() { ... }

// Example Activity:
// @AndroidEntryPoint
// class MainActivity : ComponentActivity() { ... }

================
File: app/src/main/java/com/example/contentful_javasilver/ui/RegisterScreen.kt
================
package com.example.contentful_javasilver.ui

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.example.contentful_javasilver.R
import com.example.contentful_javasilver.viewmodels.AuthViewModel
import com.google.firebase.auth.FirebaseAuth

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterScreen(
    viewModel: AuthViewModel = hiltViewModel(),
    onRegisterSuccess: () -> Unit = {},
    onNavigateBackToLogin: () -> Unit = {},
    onGoogleSignInClick: () -> Unit = {}
) {
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var passwordError by remember { mutableStateOf<String?>(null) }

val registerState by viewModel.loginState.collectAsStateWithLifecycle()

    LaunchedEffect(registerState) {
        if (registerState is AuthViewModel.LoginState.Success) {
            onRegisterSuccess()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("新規登録") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBackToLogin) {
                        Icon(Icons.Filled.ArrowBack, contentDescription = "戻る")
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            OutlinedTextField(
                value = email,
                onValueChange = { email = it },
                label = { Text("メールアドレス") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )
            Spacer(modifier = Modifier.height(16.dp))

            OutlinedTextField(
                value = password,
                onValueChange = {
                    password = it
                    passwordError = if (it.length < 6) "パスワードは6文字以上必要です" else null
                },
                label = { Text("パスワード (6文字以上)") },
                modifier = Modifier.fillMaxWidth(),
                visualTransformation = PasswordVisualTransformation(),
                singleLine = true,
                isError = passwordError != null
            )
            if (passwordError != null && password.isNotEmpty()) {
                Text(passwordError!!, color = MaterialTheme.colorScheme.error, style = MaterialTheme.typography.bodySmall)
            }
            Spacer(modifier = Modifier.height(16.dp))

            OutlinedTextField(
                value = confirmPassword,
                onValueChange = { confirmPassword = it },
                label = { Text("パスワード（確認用）") },
                modifier = Modifier.fillMaxWidth(),
                visualTransformation = PasswordVisualTransformation(),
                singleLine = true,
                isError = password != confirmPassword && confirmPassword.isNotEmpty()
            )
            if (password != confirmPassword && confirmPassword.isNotEmpty()) {
                Text("パスワードが一致しません", color = MaterialTheme.colorScheme.error, style = MaterialTheme.typography.bodySmall)
            }
            Spacer(modifier = Modifier.height(32.dp))

            Button(
                onClick = {
                    if (password.length >= 6 && password == confirmPassword) {
                        viewModel.createUserWithEmailPassword(email, password)
                    } else if (password.length < 6) {
                        passwordError = "パスワードは6文字以上必要です"
                    } else {
                        // Show general mismatch error perhaps via ViewModel state if needed
                    }
                },
                modifier = Modifier.fillMaxWidth(),
                enabled = registerState !is AuthViewModel.LoginState.Loading && email.isNotEmpty() && password.isNotEmpty() && confirmPassword.isNotEmpty() && password == confirmPassword && password.length >= 6
            ) {
                Text("登録する")
            }
            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = onGoogleSignInClick,
                modifier = Modifier.fillMaxWidth(),
                enabled = registerState !is AuthViewModel.LoginState.Loading,
                colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_google_logo),
                    contentDescription = "Google Logo",
                    modifier = Modifier.size(ButtonDefaults.IconSize),
                    tint = Color.Unspecified
                )
                Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))
                Text("Googleで登録/ログイン", color = MaterialTheme.colorScheme.onSurfaceVariant)
            }
            Spacer(modifier = Modifier.height(16.dp))

            if (registerState is AuthViewModel.LoginState.Loading) {
                CircularProgressIndicator()
            }

            if (registerState is AuthViewModel.LoginState.Error) {
                Text(
                    text = (registerState as AuthViewModel.LoginState.Error).message,
                    color = MaterialTheme.colorScheme.error,
                    modifier = Modifier.padding(top = 8.dp)
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun RegisterScreenPreview() {
    RegisterScreen(
        onRegisterSuccess = {},
        onNavigateBackToLogin = {},
        onGoogleSignInClick = {}
    )
}

/*
class AuthViewModel_Preview_Placeholder_Register : AuthViewModel(FirebaseAuth.getInstance()) {
    // Override states/methods if needed for preview scenarios
}
*/

================
File: app/src/main/java/com/example/contentful_javasilver/ui/StartScreen.kt
================
package com.example.contentful_javasilver.ui

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp

@Composable
fun StartScreen(
    onNavigateToLogin: () -> Unit,
    onNavigateToHome: () -> Unit // Assuming Home screen for non-logged-in users
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("ようこそ！", style = MaterialTheme.typography.headlineLarge)
        Spacer(modifier = Modifier.height(64.dp))

        Button(
            onClick = onNavigateToLogin,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("ログイン / 新規登録")
        }
        Spacer(modifier = Modifier.height(16.dp))

        OutlinedButton(
            onClick = onNavigateToHome,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("ログインせずに利用する")
        }
    }
}

@Preview(showBackground = true)
@Composable
fun StartScreenPreview() {
    StartScreen(onNavigateToLogin = {}, onNavigateToHome = {})
}

================
File: app/src/main/java/com/example/contentful_javasilver/utils/SecurePreferences.java
================
package com.example.contentful_javasilver.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.util.Base64;

import androidx.security.crypto.EncryptedSharedPreferences;
import androidx.security.crypto.MasterKey;

import java.io.IOException;
import java.security.GeneralSecurityException;

/**
 * 安全な暗号化されたSharedPreferencesを提供するユーティリティクラス
 */
public class SecurePreferences {
    private static final String PREFERENCES_FILE_NAME = "secure_prefs";
    private static final String API_KEY_CONTENTFUL = "contentful_api_key";
    private static final String SPACE_ID_CONTENTFUL = "contentful_space_id";
    private static SharedPreferences securePrefs;

    /**
     * 暗号化されたSharedPreferencesを初期化
     * @param context アプリケーションコンテキスト
     * @return 初期化されたPreferences
     */
    public static SharedPreferences getSecurePreferences(Context context) {
        if (securePrefs == null) {
            try {
                // マスターキーを生成
                KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(
                        MasterKey.DEFAULT_MASTER_KEY_ALIAS,
                        KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
                        .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
                        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
                        .setKeySize(256)
                        .build();

                MasterKey masterKey = new MasterKey.Builder(context)
                        .setKeyGenParameterSpec(spec)
                        .build();

                // 暗号化されたSharedPreferencesを作成
                securePrefs = EncryptedSharedPreferences.create(
                        context,
                        PREFERENCES_FILE_NAME,
                        masterKey,
                        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
                );
            } catch (GeneralSecurityException | IOException e) {
                // フォールバックとして通常のSharedPreferencesを使用
                securePrefs = context.getSharedPreferences(PREFERENCES_FILE_NAME, Context.MODE_PRIVATE);
            }
        }
        return securePrefs;
    }

    /**
     * Contentful APIキーを保存
     */
    public static void saveContentfulApiKey(Context context, String apiKey) {
        getSecurePreferences(context).edit().putString(API_KEY_CONTENTFUL, apiKey).apply();
    }

    /**
     * Contentful APIキーを取得
     */
    public static String getContentfulApiKey(Context context) {
        return getSecurePreferences(context).getString(API_KEY_CONTENTFUL, "");
    }

    /**
     * Contentful SPACE_IDを保存
     */
    public static void saveContentfulSpaceId(Context context, String spaceId) {
        getSecurePreferences(context).edit().putString(SPACE_ID_CONTENTFUL, spaceId).apply();
    }

    /**
     * Contentful SPACE_IDを取得
     */
    public static String getContentfulSpaceId(Context context) {
        return getSecurePreferences(context).getString(SPACE_ID_CONTENTFUL, "");
    }

    /**
     * 初期APIキーを安全に保存する（アプリ初回起動時のみ）
     */
    public static void initializeSecureKeys(Context context, String contentfulApiKey, String contentfulSpaceId) {
        SharedPreferences prefs = getSecurePreferences(context);
        
        // キーがまだ保存されていない場合のみ保存
        if (prefs.getString(API_KEY_CONTENTFUL, "").isEmpty()) {
            prefs.edit().putString(API_KEY_CONTENTFUL, contentfulApiKey).apply();
        }
        
        if (prefs.getString(SPACE_ID_CONTENTFUL, "").isEmpty()) {
            prefs.edit().putString(SPACE_ID_CONTENTFUL, contentfulSpaceId).apply();
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/viewmodels/AuthViewModel.kt
================
package com.example.contentful_javasilver.viewmodels

import android.app.Application
import android.content.Intent
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.GoogleAuthProvider
import com.example.contentful_javasilver.R
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import javax.inject.Inject

// Hiltを使ってFirebaseAuthをインジェクト
@HiltViewModel
open class AuthViewModel @Inject constructor(
    private val app: Application,
    private val auth: FirebaseAuth
) : ViewModel() {

    // ログイン状態 (例: Loading, Success, Error) を管理するStateFlow
    // sealed interface などで状態を定義するとより良い
    private val _loginState = MutableStateFlow<LoginState>(LoginState.Idle)
    val loginState: StateFlow<LoginState> = _loginState

    // 現在のログインユーザーを取得 (起動時などに確認)
    val currentUser = auth.currentUser // 同期的だが、リスナーを使う方が推奨される場合も

    // GoogleSignInClient (Lazily initialized)
    private val googleSignInClient: GoogleSignInClient by lazy {
        // Configure Google Sign In
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            // Request ID token. ID token is necessary for Firebase Auth.
            // Use your server's client ID generated for your web app.
            // This is typically found in the google-services.json file downloaded from Firebase.
            .requestIdToken(app.getString(R.string.default_web_client_id)) // Get from strings.xml
            .requestEmail()
            .build()
        GoogleSignIn.getClient(app, gso)
    }

    init {
        // TODO: ログイン状態の変化を監視するリスナーを設定する
        // auth.addAuthStateListener { ... }
    }

    // Method for the Fragment to get the Google Sign-In Intent
    fun getGoogleSignInIntent(): Intent {
        return googleSignInClient.signInIntent
    }

    // --- メール/パスワード ログイン ---
    fun signInWithEmailPassword(email: String, password: String) {
        viewModelScope.launch {
            _loginState.value = LoginState.Loading
            try {
                auth.signInWithEmailAndPassword(email, password).await() // kotlinx-coroutines-play-services が必要
                _loginState.value = LoginState.Success
            } catch (e: Exception) {
                _loginState.value = LoginState.Error(e.localizedMessage ?: "ログインエラーが発生しました")
            }
        }
    }

    // --- メール/パスワード 新規登録 ---
    fun createUserWithEmailPassword(email: String, password: String) {
         viewModelScope.launch {
            _loginState.value = LoginState.Loading
            try {
                auth.createUserWithEmailAndPassword(email, password).await() // kotlinx-coroutines-play-services が必要
                // 新規登録成功時は自動的にログイン状態になる
                _loginState.value = LoginState.Success
            } catch (e: Exception) {
                 _loginState.value = LoginState.Error(e.localizedMessage ?: "新規登録エラーが発生しました")
            }
        }
    }

    // --- Google ログイン ---
    // Renamed to clarify it handles the result (token)
    fun firebaseAuthWithGoogle(idToken: String) {
        viewModelScope.launch {
            _loginState.value = LoginState.Loading
            try {
                val credential = GoogleAuthProvider.getCredential(idToken, null)
                auth.signInWithCredential(credential).await()
                _loginState.value = LoginState.Success
            } catch (e: Exception) {
                _loginState.value = LoginState.Error("Google ログインエラー: ${e.localizedMessage}")
            }
        }
    }

    // --- ログアウト ---
    fun signOut() {
        viewModelScope.launch { // Launch coroutine for sign out
            googleSignInClient.signOut().await() // Sign out from Google also
            auth.signOut()
            _loginState.value = LoginState.Idle
        }
    }

    // --- エラー状態設定用メソッド ---
    fun setLoginError(errorMessage: String) {
        _loginState.value = LoginState.Error(errorMessage)
    }

    // ログイン状態を表すクラス (より詳細な状態を追加可能)
    sealed class LoginState {
        object Idle : LoginState()
        object Loading : LoginState()
        object Success : LoginState()
        data class Error(val message: String) : LoginState()
    }
}

// signInWithEmailAndPassword().await() などを使うために必要
// app/build.gradle の dependencies に追加:
// implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3' // Use appropriate version aligned with coroutines

================
File: app/src/main/java/com/example/contentful_javasilver/viewmodels/BookmarkViewModel.java
================
package com.example.contentful_javasilver.viewmodels;

import android.app.Application;
import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;

import java.util.List;

public class BookmarkViewModel extends AndroidViewModel {

    private QuizDao quizDao;
    private LiveData<List<QuizEntity>> bookmarkedQuizzes;

    public BookmarkViewModel(@NonNull Application application) {
        super(application);
        QuizDatabase db = QuizDatabase.getDatabase(application);
        quizDao = db.quizDao();
        bookmarkedQuizzes = quizDao.getBookmarkedQuizzes();
    }

    public LiveData<List<QuizEntity>> getBookmarkedQuizzes() {
        return bookmarkedQuizzes;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/viewmodels/HistoryViewModel.java
================
package com.example.contentful_javasilver.viewmodels;

import android.app.Application;
import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;

// import com.example.contentful_javasilver.data.ProblemStats; // No longer needed
import com.example.contentful_javasilver.data.QuizHistory; // Import QuizHistory
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;

import java.util.List;

public class HistoryViewModel extends AndroidViewModel {

    private final QuizDao quizDao;
    private final LiveData<List<QuizHistory>> allHistory; // Changed type

    public HistoryViewModel(@NonNull Application application) {
        super(application);
        QuizDatabase db = QuizDatabase.getDatabase(application);
        quizDao = db.quizDao();
        allHistory = quizDao.getAllHistorySortedByTimestampDesc(); // Call new DAO method
    }

    public LiveData<List<QuizHistory>> getAllHistory() { // Changed method name and return type
        return allHistory;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/viewmodels/LoadingViewModel.kt
================
package com.example.contentful_javasilver.viewmodels

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.contentful_javasilver.data.repository.QuizRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class LoadingViewModel @Inject constructor(
    private val quizRepository: QuizRepository
) : ViewModel() {

    private val _randomQuizId = MutableLiveData<String?>()
    val randomQuizId: LiveData<String?> = _randomQuizId

    private val _isLoadingComplete = MutableLiveData<Boolean>(false)
    val isLoadingComplete: LiveData<Boolean> = _isLoadingComplete

    private val _loadingStatus = MutableLiveData<String?>()
    val loadingStatus: LiveData<String?> = _loadingStatus

    private val _errorOccurred = MutableLiveData<String?>()
    val errorOccurred: LiveData<String?> = _errorOccurred

    init {
        fetchRandomQuizId()
    }

    private fun fetchRandomQuizId() {
        viewModelScope.launch {
            try {
                val id = quizRepository.getRandomQuizId()
                _randomQuizId.postValue(id)
            } catch (e: Exception) {
                _randomQuizId.postValue(null)
                _errorOccurred.postValue("Error fetching random quiz ID: ${e.message}")
                println("Error fetching random quiz ID: ${e.message}")
            } finally {
            }
        }
    }

    fun setLoadingComplete() {
        _isLoadingComplete.postValue(true)
        _loadingStatus.postValue("準備完了")
        _errorOccurred.postValue(null)
    }

    fun setLoadingError(errorMessage: String) {
        _errorOccurred.postValue(errorMessage)
        _loadingStatus.postValue("エラーが発生しました")
        _isLoadingComplete.postValue(false)
    }

    fun updateLoadingStatus(status: String) {
        _loadingStatus.postValue(status)
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/viewmodels/StatisticsViewModel.java
================
package com.example.contentful_javasilver.viewmodels;

import android.app.Application;
import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;

import com.example.contentful_javasilver.data.ProblemStats; // Import ProblemStats
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;

import java.util.List;

public class StatisticsViewModel extends AndroidViewModel {

    private final QuizDao quizDao;
    private final LiveData<List<ProblemStats>> problemStatistics;

    public StatisticsViewModel(@NonNull Application application) {
        super(application);
        QuizDatabase db = QuizDatabase.getDatabase(application);
        quizDao = db.quizDao();
        problemStatistics = quizDao.getProblemStatistics(); // Call the new DAO method
    }

    public LiveData<List<ProblemStats>> getProblemStatistics() {
        return problemStatistics;
    }
}

================
File: app/src/main/java/com/example/contentfuljavasilver/data/ThemeDataStore.kt
================
package com.example.contentfuljavasilver.data

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "settings")

class ThemeDataStore(private val context: Context) {

    companion object {
        val THEME_KEY = stringPreferencesKey("theme_preference")
    }

    val getTheme: Flow<String?> = context.dataStore.data
        .map { preferences ->
            preferences[THEME_KEY] ?: "default" // Provide default value
        }

    suspend fun saveTheme(theme: String) {
        context.dataStore.edit {
            settings -> settings[THEME_KEY] = theme
        }
    }
}

================
File: app/src/main/java/com/example/contentfuljavasilver/di/DataStoreModule.kt
================
package com.example.contentfuljavasilver.di

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import com.example.contentfuljavasilver.data.ThemeDataStore
import com.example.contentfuljavasilver.data.dataStore
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object DataStoreModule {

    @Provides
    @Singleton
    fun providePreferencesDataStore(@ApplicationContext appContext: Context): DataStore<Preferences> {
        return appContext.dataStore
    }

    @Provides
    @Singleton
    fun provideThemeDataStore(@ApplicationContext context: Context): ThemeDataStore {
        return ThemeDataStore(context)
    }
}

================
File: app/src/main/java/com/example/contentfuljavasilver/viewmodel/ThemeViewModel.kt
================
package com.example.contentfuljavasilver.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.contentfuljavasilver.data.ThemeDataStore
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ThemeViewModel @Inject constructor(
    private val themeDataStore: ThemeDataStore
) : ViewModel() {

    // データストアから現在のテーマを取得し、StateFlowとして公開します
    // これにより、UIはテーマの変更をリアクティブに監視できます
    val currentTheme: StateFlow<String> = themeDataStore.getTheme
        .map { themeName ->
            themeName ?: "default" // null の場合は "default" を返す
        }
        .stateIn(
            scope = viewModelScope, // ViewModelのライフサイクルに連動
            started = SharingStarted.WhileSubscribed(5000), // 画面が表示されている間アクティブ
            initialValue = "default" // 初期値も "default" に統一 (stateInの初期値は最初の値がemitされるまで使われる)
        )

    // 新しいテーマ名をデータストアに保存する関数
    fun changeTheme(themeName: String) {
        viewModelScope.launch { // 非同期で実行
            themeDataStore.saveTheme(themeName)
        }
    }
}

================
File: app/src/main/res/anim/chat_bubble_in.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android"
    android:shareInterpolator="false">
    <alpha
        android:fromAlpha="0.0"
        android:toAlpha="1.0"
        android:duration="750"
        android:interpolator="@android:anim/accelerate_interpolator" />
    <translate
        android:fromYDelta="10%"
        android:toYDelta="0"
        android:duration="900"
        android:interpolator="@android:anim/overshoot_interpolator" />
    <scale
        android:fromXScale="0.95"
        android:fromYScale="0.95"
        android:toXScale="1.0"
        android:toYScale="1.0"
        android:pivotX="50%"
        android:pivotY="50%"
        android:duration="900"
        android:interpolator="@android:anim/overshoot_interpolator" />
</set>

================
File: app/src/main/res/anim/gradient_animation.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android"
    android:interpolator="@android:anim/accelerate_decelerate_interpolator"
    android:fillAfter="true">
    <alpha
        android:duration="8000"
        android:fromAlpha="0.97"
        android:toAlpha="1.0"
        android:repeatCount="infinite"
        android:repeatMode="reverse" />
</set>

================
File: app/src/main/res/anim/slide_in_left.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="-100%"
        android:toXDelta="0%" />
</set>

================
File: app/src/main/res/anim/slide_in_right.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="100%"
        android:toXDelta="0%" />
</set>

================
File: app/src/main/res/anim/slide_out_left.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="0%"
        android:toXDelta="-100%" />
</set>

================
File: app/src/main/res/anim/slide_out_right.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="0%"
        android:toXDelta="100%" />
</set>

================
File: app/src/main/res/animator/toggle_elevation_animator.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_checked="true">
        <objectAnimator
            android:duration="200"
            android:propertyName="translationZ"
            android:valueTo="4dp"
            android:valueType="floatType" />
    </item>
    <item>
        <objectAnimator
            android:duration="200"
            android:propertyName="translationZ"
            android:valueTo="2dp"
            android:valueType="floatType" />
    </item>
</selector>

================
File: app/src/main/res/color/quiz_choice_background_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <!-- Order matters: More specific states first -->

    <!-- Incorrect state (custom state_incorrect=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_incorrect="true" android:color="?attr/colorErrorContainer" />
    <!-- Correct state (custom state_correct=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_correct="true" android:color="?attr/colorPrimaryContainer" />
    <!-- Missed state (correct answer shown when incorrect answer was selected, disabled) -->
    <item android:state_enabled="false" app:state_missed="true" android:color="?attr/colorPrimaryContainer" /> <!-- Show correct background -->
    <!-- Disabled state (after answering, other non-correct/incorrect options) -->
    <item android:state_enabled="false" android:color="?attr/colorSurfaceContainer" /> <!-- Use default or slightly different disabled background -->
    <!-- Checked state (CheckBox) -->
    <item android:state_checked="true" android:color="?attr/colorSurfaceContainerHighest" />
    <!-- Pressed state (Button) -->
    <item android:state_pressed="true" android:color="?attr/colorSurfaceContainerHighest" />
    <!-- Selected state (General focus, use same as checked/pressed for consistency) -->
    <item android:state_selected="true" android:color="?attr/colorSurfaceContainerHighest" />
    <!-- Default state (enabled, not selected/checked/pressed) -->
    <item android:color="?attr/colorSurface"/>

</selector>

================
File: app/src/main/res/color/quiz_choice_checkbox_tint_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <!-- Order matters: More specific states first -->

    <!-- Incorrect state (custom state_incorrect=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_incorrect="true" android:color="?attr/colorError" /> <!-- Show error color for incorrect checkbox? -->
    <!-- Correct state (custom state_correct=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_correct="true" android:color="?attr/colorPrimary" /> <!-- Show primary color for correct checkbox? -->
    <!-- Missed state (correct answer shown when incorrect answer was selected, disabled) -->
    <item android:state_enabled="false" app:state_missed="true" android:color="?attr/colorPrimary"/> <!-- Show primary color for missed correct answer -->
    <!-- Disabled state (after answering, other non-correct/incorrect options) -->
    <item android:state_enabled="false" android:color="?attr/colorOnSurfaceVariant" /> <!-- Use standard disabled tint -->
    <!-- Checked state -->
    <item android:state_checked="true" android:color="?attr/colorPrimary" />
    <!-- Default state (enabled, not checked) -->
    <item android:color="?attr/colorOnSurfaceVariant"/> <!-- Use standard unchecked tint -->

</selector>

================
File: app/src/main/res/color/quiz_choice_stroke_color_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <!-- Order matters: More specific states first -->

    <!-- Incorrect state (custom state_incorrect=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_incorrect="true" android:color="?attr/colorOutline" /> <!-- Keep default outline -->
    <!-- Correct state (custom state_correct=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_correct="true" android:color="?attr/colorOutline" /> <!-- Keep default outline -->
    <!-- Missed state (correct answer shown when incorrect answer was selected, disabled) -->
    <item android:state_enabled="false" app:state_missed="true" android:color="?attr/colorPrimary"/> <!-- Highlight correct outline? Or keep default? Using Primary here -->
    <!-- Disabled state (after answering, other non-correct/incorrect options) -->
    <item android:state_enabled="false" android:color="?attr/colorOutlineVariant" /> <!-- Use a slightly lighter outline for disabled -->
    <!-- Checked state (CheckBox) -->
    <item android:state_checked="true" android:color="?attr/colorPrimary" />
    <!-- Pressed state (Button) -->
    <item android:state_pressed="true" android:color="?attr/colorPrimary" />
    <!-- Selected state (General focus) -->
    <item android:state_selected="true" android:color="?attr/colorPrimary" />
    <!-- Default state (enabled, not selected/checked/pressed) -->
    <item android:color="?attr/colorOutline"/>

</selector>

================
File: app/src/main/res/color/toggle_icon_color.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:color="#FFFFFF" android:state_checked="true" />
    <item android:color="#A0B0C0" /> <!-- 非選択時のカラー -->
</selector>

================
File: app/src/main/res/color/toggle_text_color.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:color="#FFFFFF" android:state_checked="true" />
    <item android:color="#A0B0C0" /> <!-- 非選択時のカラー -->
</selector>

================
File: app/src/main/res/drawable/background_dot_pattern.xml
================
<?xml version="1.0" encoding="utf-8"?>
<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
    android:src="@drawable/dot_pattern"
    android:tileMode="repeat"
    android:alpha="0.05" />

================
File: app/src/main/res/drawable/banner_background_gradient.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- Start color (Purple) -->
    <!-- End color (Darker Purple) -->
    <gradient
        android:angle="45"
        android:startColor="#8E44AD"
        android:endColor="#6C3483"
        android:type="linear" />
    <corners android:radius="8dp" /> <!-- Add rounded corners -->
</shape>

================
File: app/src/main/res/drawable/bar_background_active_gradient.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:type="linear"
        android:angle="90"
        android:startColor="#82D1FF"
        android:endColor="#004D65"
        />
    <corners android:radius="4dp" />
</shape>

================
File: app/src/main/res/drawable/bg_problem_answered.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:type="linear"
        android:angle="135"
        android:startColor="#1A1A1A" 
        android:endColor="#000000"
        android:centerColor="#121212" />
    <corners android:radius="12dp" />
</shape>

================
File: app/src/main/res/drawable/bg_problem_unanswered.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:type="linear"
        android:angle="135"
        android:startColor="#442785" 
        android:endColor="#1A237E"
        android:centerColor="#3F51B5" />
    <corners android:radius="12dp" />
</shape>

================
File: app/src/main/res/drawable/bottom_nav_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">

    <gradient
        android:startColor="#3D354F"
        android:endColor="#252042"
        android:angle="270" />
    
    <corners android:radius="20dp" />
    
    <stroke
        android:width="1dp"
        android:color="#40FFFFFF" />
</shape>

================
File: app/src/main/res/drawable/bottom_nav_selected_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- 背景色: 画像を参考に明るい青色を設定 -->
    <solid android:color="#448AFF" /> <!-- 例: Material Blue A200 -->
    <!-- 角丸の半径: コンテナより少し小さめに設定 -->
    <corners android:radius="24dp" />
</shape>

================
File: app/src/main/res/drawable/bubble_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#4D201F2B" />
    <corners android:radius="12dp" />
</shape>

================
File: app/src/main/res/drawable/button_background_blue.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:type="linear"
        android:angle="270"
        android:startColor="#5C6BC0"
        android:endColor="#3949AB"
        />
    <corners android:radius="100dp" />
</shape>

================
File: app/src/main/res/drawable/button_stroke_pink.xml
================
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <shape android:shape="rectangle">
            <corners android:radius="100dp" />
            <gradient
                android:type="linear"
                android:angle="270"
                android:startColor="#EC407A"
                android:endColor="#AD1457"
                />
            </shape>
    </item>
    <item android:left="2dp" android:right="2dp" android:top="2dp" android:bottom="2dp">
         <shape android:shape="rectangle">
             <solid android:color="#00000000"/>
             <corners android:radius="98dp" />
         </shape>
    </item>
</layer-list>

================
File: app/src/main/res/drawable/category_badge_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    
    <solid android:color="#33444444" />
    <corners android:radius="4dp" />
    
</shape>

================
File: app/src/main/res/drawable/chat_bubble_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
            <corners android:radius="16dp" />
    <solid android:color="#00000000" />
    <stroke android:color="#FFFFFF" android:width="1dp" />
        </shape>

================
File: app/src/main/res/drawable/day_highlight_circle.xml
================
<?xml version="1.0" encoding="utf-8"?><shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval"><solid android:color="@android:color/white"/><size android:width="24dp" android:height="20dp"/></shape>

================
File: app/src/main/res/drawable/dot_pattern.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <solid android:color="#FFFFFF" />
    <size android:width="2dp" android:height="2dp" />
</shape>

================
File: app/src/main/res/drawable/gradient_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:type="linear"
        android:angle="270"
        android:startColor="#7C5EAA"
        android:endColor="#1A237E"
        />
</shape>

================
File: app/src/main/res/drawable/gradient_spot_blue.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <gradient
        android:type="radial"
        android:gradientRadius="50%p"
        android:startColor="#2600BFFF"
        android:endColor="@android:color/transparent" />
</shape>

================
File: app/src/main/res/drawable/gradient_spot_green.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <gradient
        android:type="radial"
        android:gradientRadius="50%p"
        android:startColor="#2688FF88"
        android:endColor="@android:color/transparent" />
</shape>

================
File: app/src/main/res/drawable/gradient_spot_orange.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <gradient
        android:type="radial"
        android:gradientRadius="50%p"
        android:startColor="#26FFB347"
        android:endColor="@android:color/transparent" />
</shape>

================
File: app/src/main/res/drawable/gradient_spot_pink.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <gradient
        android:type="radial"
        android:gradientRadius="50%p"
        android:startColor="#26FF70C6"
        android:endColor="@android:color/transparent" />
</shape>

================
File: app/src/main/res/drawable/highlight_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="#40FFFFFF">
    <item>
        <shape android:shape="rectangle">
            <solid android:color="#266495ED" />
            <corners android:radius="8dp"/>
        </shape>
    </item>
</ripple>

================
File: app/src/main/res/drawable/home_background_gradient.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:type="linear"
        android:angle="135"
        android:startColor="#1E1635"
        android:centerColor="#2A254F"
        android:endColor="#1E2B4D"
        android:centerX="0.5"
        android:centerY="0.5" />
</shape>

================
File: app/src/main/res/drawable/ic_arrow_back.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z"/>
</vector>

================
File: app/src/main/res/drawable/ic_arrow_forward.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z"/>
</vector>

================
File: app/src/main/res/drawable/ic_bar_chart.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M294,748 L294,212 L134,212 L134,748 L294,748ZM483,748 L483,424 L323,424 L323,748 L483,748ZM672,748 L672,518 L512,518 L512,748 L672,748ZM860,748 L860,306 L700,306 L700,748 L860,748Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_baseline_category_24.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M12,2l-5.5,9h11z"/>
  <path
      android:fillColor="@android:color/white"
      android:pathData="M17.5,17.5m-4.5,0a4.5,4.5 0,1 1,9 0a4.5,4.5 0,1 1,-9 0"/>
  <path
      android:fillColor="@android:color/white"
      android:pathData="M3,13.5h8v8H3z"/>
</vector>

================
File: app/src/main/res/drawable/ic_baseline_menu_book_24.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M21,5c-1.11,-0.35 -2.33,-0.5 -3.5,-0.5c-1.95,0 -4.05,0.4 -5.5,1.5c-1.45,-1.1 -3.55,-1.5 -5.5,-1.5S2.45,4.9 1,6v14.65c0,0.25 0.25,0.5 0.5,0.5c0.1,0 0.15,-0.05 0.25,-0.05C3.1,20.45 5.05,20 6.5,20c1.95,0 4.05,0.4 5.5,1.5c1.35,-0.85 3.8,-1.5 5.5,-1.5c1.65,0 3.35,0.3 4.75,1.05c0.1,0.05 0.15,0.05 0.25,0.05c0.25,0 0.5,-0.25 0.5,-0.5V6C22.4,5.55 21.75,5.25 21,5zM21,18.5c-1.1,-0.35 -2.3,-0.5 -3.5,-0.5c-1.7,0 -4.15,0.65 -5.5,1.5V8c1.35,-0.85 3.8,-1.5 5.5,-1.5c1.2,0 2.4,0.15 3.5,0.5V18.5z"/>
  <path
      android:fillColor="@android:color/white"
      android:pathData="M17.5,10.5c0.88,0 1.73,0.09 2.5,0.26V9.24C19.21,9.09 18.36,9 17.5,9c-1.7,0 -3.24,0.29 -4.5,0.83v1.66C14.13,10.85 15.7,10.5 17.5,10.5z"/>
  <path
      android:fillColor="@android:color/white"
      android:pathData="M13,12.49v1.66c1.13,-0.64 2.7,-0.99 4.5,-0.99c0.88,0 1.73,0.09 2.5,0.26V11.9c-0.79,-0.15 -1.64,-0.24 -2.5,-0.24C15.8,11.66 14.26,11.96 13,12.49z"/>
  <path
      android:fillColor="@android:color/white"
      android:pathData="M17.5,14.33c-1.7,0 -3.24,0.29 -4.5,0.83v1.66c1.13,-0.64 2.7,-0.99 4.5,-0.99c0.88,0 1.73,0.09 2.5,0.26v-1.52C19.21,14.41 18.36,14.33 17.5,14.33z"/>
</vector>

================
File: app/src/main/res/drawable/ic_bookmark_border_24dp.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M17,3H7c-1.1,0 -1.99,0.9 -1.99,2L5,21l7,-3 7,3V5c0,-1.1 -0.9,-2 -2,-2zm0,15l-5,-2.18L7,18V5h10v13z"/>
</vector>

================
File: app/src/main/res/drawable/ic_bookmark_filled.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="?attr/colorControlNormal"
      android:pathData="M17,3H7c-1.1,0 -1.99,0.9 -1.99,2L5,21l7,-3 7,3V5c0,-1.1 -0.9,-2 -2,-2z"/>
</vector>

================
File: app/src/main/res/drawable/ic_bookmark.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M17,3H7c-1.1,0 -2,0.9 -2,2v16l7,-3 7,3V5c0,-1.1 -0.9,-2 -2,-2z" />
</vector>

================
File: app/src/main/res/drawable/ic_category_placeholder.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,2L4,5v6.09c0,5.05 3.41,9.76 8,10.91c4.59,-1.15 8,-5.86 8,-10.91V5L12,2zM15.5,14.09l-1.41,1.41L12,13.42L9.91,15.5L8.5,14.09L10.59,12L8.5,9.91L9.91,8.5L12,10.59l2.09,-2.09l1.41,1.41L13.42,12L15.5,14.09z"/>
</vector>

================
File: app/src/main/res/drawable/ic_category.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="?attr/colorControlNormal"
        android:pathData="M12,2l-5.5,9h11L12,2zM12,5.84L13.93,9h-3.87L12,5.84zM17.5,13c-2.49,0 -4.5,2.01 -4.5,4.5s2.01,4.5 4.5,4.5 4.5,-2.01 4.5,-4.5 -2.01,-4.5 -4.5,-4.5zM17.5,20c-1.38,0 -2.5,-1.12 -2.5,-2.5s1.12,-2.5 2.5,-2.5 2.5,1.12 2.5,2.5 -1.12,2.5 -2.5,2.5zM3,21.5h8v-8L3,13.5v8zM5,15.5h4v4L5,19.5v-4z"/>
</vector>

================
File: app/src/main/res/drawable/ic_chapter.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M4,6L2,6v14c0,1.1 0.9,2 2,2h14v-2L4,20L4,6zM20,2L8,2c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2L22,4c0,-1.1 -0.9,-2 -2,-2zM19,11L9,11L9,9h10v2zM15,15L9,15v-2h6v2zM19,7L9,7L9,5h10v2z"/>
</vector>

================
File: app/src/main/res/drawable/ic_clock.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M11.99,2C6.47,2 2,6.48 2,12s4.47,10 9.99,10C17.52,22 22,17.52 22,12S17.52,2 11.99,2zM12,20c-4.42,0 -8,-3.58 -8,-8s3.58,-8 8,-8 8,3.58 8,8 -3.58,8 -8,8zM12.5,7H11v6l5.25,3.15 0.75,-1.23 -4.5,-2.67z" />
</vector>

================
File: app/src/main/res/drawable/ic_exam_checklist.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M19,3h-4.18C14.4,1.84 13.3,1 12,1c-1.3,0 -2.4,0.84 -2.82,2L5,3c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2zM12,3c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM10,17l-4,-4 1.41,-1.41L10,14.17l6.59,-6.59L18,9l-8,8z"/>
</vector>

================
File: app/src/main/res/drawable/ic_fire_achievement.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="#FF8C00"
      android:pathData="M12,2C10.73,2 9.6,2.8 9.18,3.95L8.5,5.5L7.39,4.33C6.65,3.55 5.32,3.93 5.06,4.97L3.06,11.97C2.87,12.67 3.3,13.4 4,13.6L4.66,13.8L4.38,14.4C4.14,14.91 4.31,15.5 4.81,15.77L5.41,16.09L5.28,16.76C5.16,17.37 5.56,17.97 6.17,18.1L7.15,18.29L7.68,19.18C8.12,19.9 9.03,20.12 9.72,19.68L12,18.32L14.28,19.68C14.97,20.12 15.88,19.9 16.32,19.18L16.85,18.29L17.83,18.1C18.44,17.96 18.84,17.37 18.72,16.76L18.59,16.09L19.19,15.77C19.69,15.5 19.86,14.91 19.62,14.4L19.34,13.8L20,13.6C20.7,13.4 21.13,12.67 20.94,11.97L18.94,4.97C18.68,3.93 17.35,3.55 16.61,4.33L15.5,5.5L14.82,3.95C14.4,2.8 13.27,2 12,2Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_folder_24.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M9.17,6l2,2H20v10H4V6h5.17M10,4H4C2.9,4 2.01,4.9 2.01,6L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2V8c0,-1.1 -0.9,-2 -2,-2h-8l-2,-2z"/>
</vector>

================
File: app/src/main/res/drawable/ic_folder_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M20,6h-8l-2,-2H4C2.9,4 2.01,4.9 2.01,6L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2V8C22,6.9 21.1,6 20,6zM20,18H4V8h16V18z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M8,13.5h8v1h-8z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M8,10.5h8v1h-8z"/>
</vector>

================
File: app/src/main/res/drawable/ic_gem_achievement.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="#9B59B6"
      android:pathData="M16,9L19,4L10.5,4L7.5,9L16,9ZM3.22,3.32L1.95,4.59L3,5.64L4.48,4.16L3.22,3.32ZM12,18.01L4.74,10.75L3.25,12.24L12,20.99L20.75,12.24L19.26,10.75L12,18.01ZM19.52,4.16L21,5.64L22.05,4.59L20.78,3.32L19.52,4.16ZM8,5L9.5,9L5,9L8,5ZM15,4L14,4L12,4L11,9L13,9L15,4Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_gem_placeholder.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FFFFFFFF" 
        android:pathData="M12,2L2,8.5V15.5L12,22L22,15.5V8.5L12,2ZM11,19.93L4,14.41V9.59L11,5.07V19.93ZM13,5.07L20,9.59V14.41L13,19.93V5.07Z" />
</vector>

================
File: app/src/main/res/drawable/ic_google_logo.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="40dp"
    android:height="40dp"
    android:viewportWidth="40"
    android:viewportHeight="40">
  <path
      android:pathData="M20,0L20,0A20,20 0,0 1,40 20L40,20A20,20 0,0 1,20 40L20,40A20,20 0,0 1,0 20L0,20A20,20 0,0 1,20 0z"
      android:fillColor="#F2F2F2"/>
  <group>
    <clip-path
        android:pathData="M10,10h20v20h-20z"/>
    <path
        android:pathData="M29.6,20.227C29.6,19.518 29.536,18.836 29.418,18.182H20V22.05H25.382C25.15,23.3 24.445,24.359 23.386,25.068V27.577H26.618C28.509,25.836 29.6,23.273 29.6,20.227Z"
        android:fillColor="#4285F4"/>
    <path
        android:pathData="M20,30C22.7,30 24.964,29.104 26.618,27.577L23.386,25.068C22.491,25.668 21.345,26.023 20,26.023C17.395,26.023 15.191,24.264 14.405,21.9H11.064V24.491C12.709,27.759 16.091,30 20,30Z"
        android:fillColor="#34A853"/>
    <path
        android:pathData="M14.405,21.9C14.205,21.3 14.091,20.659 14.091,20C14.091,19.341 14.205,18.7 14.405,18.1V15.509H11.064C10.386,16.859 10,18.386 10,20C10,21.614 10.386,23.141 11.064,24.491L14.405,21.9Z"
        android:fillColor="#FBBC04"/>
    <path
        android:pathData="M20,13.977C21.468,13.977 22.786,14.482 23.823,15.473L26.691,12.604C24.959,10.991 22.695,10 20,10C16.091,10 12.709,12.241 11.064,15.509L14.405,18.1C15.191,15.736 17.395,13.977 20,13.977Z"
        android:fillColor="#E94235"/>
  </group>
</vector>

================
File: app/src/main/res/drawable/ic_grammar_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M14,17H4v2h10V17zM20,9H4v2h16V9zM4,15h16v-2H4V15zM4,5v2h16V5H4z"/>
</vector>

================
File: app/src/main/res/drawable/ic_history_24dp.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M13,3c-4.97,0 -9,4.03 -9,9H1l3.89,3.89 0.07,0.14L9,12H6c0,-3.86 3.14,-7 7,-7s7,3.14 7,7 -3.14,7 -7,7v2c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08V8H12z"/>
</vector>

================
File: app/src/main/res/drawable/ic_history.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M13,3c-4.97,0 -9,4.03 -9,9L1,12l3.89,3.89 0.07,0.14L9,12L6,12c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C8.27,19.99 10.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08L13.5,8L12,8z" />
</vector>

================
File: app/src/main/res/drawable/ic_home_24dp.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z"/>
</vector>

================
File: app/src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: app/src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================
File: app/src/main/res/drawable/ic_lesson_class.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M8,3A2,2 0 0,0 6,5V9A2,2 0 0,0 8,11H10V13H8A2,2 0 0,0 6,15V19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V15A2,2 0 0,0 16,13H14V11H16A2,2 0 0,0 18,9V5A2,2 0 0,0 16,3M8,5H16V9H8M8,15H16V19H8Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_code.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M8,3L5,3L2,12L5,21L8,21L5,12L8,3M16,3L19,3L22,12L19,21L16,21L19,12L16,3M13,3L10,3L7,12L10,21L13,21L10,12L13,3Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_complete.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#4CAF50"
        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM10,17l-5,-5 1.41,-1.41L10,14.17l7.59,-7.59L19,8l-9,9z"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_control.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M3,3H21V5H3V3M3,7H15V9H3V7M3,11H21V13H3V11M3,15H15V17H3V15M3,19H21V21H3V19M17,7H21V9H17V7M17,15H21V17H17V15"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_datatype.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M11,7L17,7A2,2 0,0 1,19 9L19,17A2,2 0,0 1,17 19L11,19A2,2 0,0 1,9 17L9,9A2,2 0,0 1,11 7M11,9L11,17L17,17L17,9L11,9M5,3L7,3L7,21L5,21L5,3M3,5L21,5L21,7L3,7L3,5"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_exception.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,2L1,21H23M12,6L19.53,19H4.47M11,10V14H13V10M11,16V18H13V16"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_icon_template.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_inheritance.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M6,3A3,3 0,0 1,9 6C9,7.31 8.17,8.42 7,8.83V15.17C8.17,15.58 9,16.69 9,18A3,3 0,0 1,6 21A3,3 0,0 1,3 18C3,16.69 3.83,15.58 5,15.17V8.83C3.83,8.42 3,7.31 3,6A3,3 0,0 1,6 3M18,3A3,3 0,0 1,21 6C21,7.31 20.17,8.42 19,8.83V17.17C20.17,17.58 21,18.69 21,20A3,3 0,0 1,18 23A3,3 0,0 1,15 20C15,18.69 15.83,17.58 17,17.17V8.83C15.83,8.42 15,7.31 15,6A3,3 0,0 1,18 3M6,5A1,1 0,0 0,5 6A1,1 0,0 0,6 7A1,1 0,0 0,7 6A1,1 0,0 0,6 5M18,5A1,1 0,0 0,17 6A1,1 0,0 0,18 7A1,1 0,0 0,19 6A1,1 0,0 0,18 5M18,19A1,1 0,0 0,17 20A1,1 0,0 0,18 21A1,1 0,0 0,19 20A1,1 0,0 0,18 19M6,17A1,1 0,0 0,5 18A1,1 0,0 0,6 19A1,1 0,0 0,7 18A1,1 0,0 0,6 17Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_method.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="#F44336"
      android:pathData="M20,4C21.11,4 22,4.89 22,6V18C22,19.11 21.11,20 20,20H4C2.89,20 2,19.11 2,18V6C2,4.89 2.89,4 4,4H20M20,18V6H4V18H20M5,7H19V9H5V7M5,11H19V13H5V11M5,15H14V17H5V15Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_lesson_package.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="#42A5F5"
      android:pathData="M21,16.5C21,16.88 20.79,17.21 20.47,17.38L12.57,21.82C12.41,21.94 12.21,22 12,22C11.79,22 11.59,21.94 11.43,21.82L3.53,17.38C3.21,17.21 3,16.88 3,16.5V7.5C3,7.12 3.21,6.79 3.53,6.62L11.43,2.18C11.59,2.06 11.79,2 12,2C12.21,2 12.41,2.06 12.57,2.18L20.47,6.62C20.79,6.79 21,7.12 21,7.5V16.5M12,4.15L5,8.09V15.91L12,19.85L19,15.91V8.09L12,4.15M12,6.23L16.9,9.06L12,11.89L7.1,9.06L12,6.23M17,14.89L13,17.2V13.62L17,11.31V14.89M11,17.2L7,14.89V11.31L11,13.62V17.2Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_list_24.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M3,13h2v-2H3v2zM3,17h2v-2H3v2zM3,9h2V7H3v2zM7,13h14v-2H7v2zM7,17h14v-2H7v2zM7,7v2h14V7H7z"/>
</vector>

================
File: app/src/main/res/drawable/ic_list.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="?attr/colorControlNormal"
        android:pathData="M3,13h2v-2H3v2zm0,4h2v-2H3v2zm0,-8h2V7H3v2zm4,4h14v-2H7v2zm0,4h14v-2H7v2zM7,7v2h14V7H7z"/>
</vector>

================
File: app/src/main/res/drawable/ic_listening_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,3c-4.97,0 -9,4.03 -9,9v7c0,1.1 0.9,2 2,2h4v-8H5v-1c0,-3.87 3.13,-7 7,-7s7,3.13 7,7v1h-4v8h4c1.1,0 2,-0.9 2,-2v-7C21,7.03 16.97,3 12,3z"/>
</vector>

================
File: app/src/main/res/drawable/ic_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="#FFFFFF"
      android:pathData="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_person.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="#FFFFFF"
      android:pathData="M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z"/>
</vector>

================
File: app/src/main/res/drawable/ic_quiz.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M11.07,12.85c.77,-1.39 2.25,-2.21 3.11,-3.44 0.91,-1.29 0.4,-3.7 -2.18,-3.7 -1.69,0 -2.52,1.28 -2.87,2.34L6.54,6.96C7.25,4.83 8.96,3 11.5,3c3.31,0 5.5,2.1 5.5,5.07 0,2.08 -1.15,3.39 -2.04,4.44 -0.63,0.74 -1.5,1.43 -1.62,2.45h-2.5c0.04,-0.8 0.57,-1.48 1.23,-2.15zM10,18h4v4h-4z"/>
</vector>

================
File: app/src/main/res/drawable/ic_reading_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M21,5c-1.11,-0.35 -2.33,-0.5 -3.5,-0.5c-1.95,0 -4.05,0.4 -5.5,1.5c-1.45,-1.1 -3.55,-1.5 -5.5,-1.5S2.45,4.9 1,6v14.65c0,0.25 0.25,0.5 0.5,0.5c0.1,0 0.15,-0.05 0.25,-0.05C3.1,20.45 5.05,20 6.5,20c1.95,0 4.05,0.4 5.5,1.5c1.35,-0.85 3.8,-1.5 5.5,-1.5c1.65,0 3.35,0.3 4.75,1.05c0.1,0.05 0.15,0.05 0.25,0.05c0.25,0 0.5,-0.25 0.5,-0.5V6C22.4,5.55 21.75,5.25 21,5zM21,18.5c-1.1,-0.35 -2.3,-0.5 -3.5,-0.5c-1.7,0 -4.15,0.65 -5.5,1.5V8c1.35,-0.85 3.8,-1.5 5.5,-1.5c1.2,0 2.4,0.15 3.5,0.5V18.5z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M17.5,10.5c0.88,0 1.73,0.09 2.5,0.26V9.24C19.21,9.09 18.36,9 17.5,9c-1.7,0 -3.24,0.29 -4.5,0.83v1.66C14.13,10.85 15.7,10.5 17.5,10.5z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M13,12.49v1.66c1.13,-0.64 2.7,-0.99 4.5,-0.99c0.88,0 1.73,0.09 2.5,0.26V11.9c-0.79,-0.15 -1.64,-0.24 -2.5,-0.24C15.8,11.66 14.26,11.96 13,12.49z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M17.5,14.33c-1.7,0 -3.24,0.29 -4.5,0.83v1.66c1.13,-0.64 2.7,-0.99 4.5,-0.99c0.88,0 1.73,0.09 2.5,0.26v-1.52C19.21,14.41 18.36,14.33 17.5,14.33z"/>
</vector>

================
File: app/src/main/res/drawable/ic_search.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    
    <!-- 外枠の影 -->
    <path
        android:fillColor="#40000000"
        android:pathData="M12,2.5C6.76,2.5 2.5,6.76 2.5,12C2.5,17.24 6.76,21.5 12,21.5C17.24,21.5 21.5,17.24 21.5,12C21.5,6.76 17.24,2.5 12,2.5Z"
        android:translateX="0.5"
        android:translateY="0.5"/>
    
    <!-- 羅針盤の外枠 -->
    <path
        android:fillColor="#9C27B0"
        android:pathData="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20Z"/>
    
    <!-- 内側の円 -->
    <path
        android:fillColor="#30FFFFFF"
        android:pathData="M12,5C8.14,5 5,8.14 5,12C5,15.86 8.14,19 12,19C15.86,19 19,15.86 19,12C19,8.14 15.86,5 12,5ZM12,17C9.24,17 7,14.76 7,12C7,9.24 9.24,7 12,7C14.76,7 17,9.24 17,12C17,14.76 14.76,17 12,17Z"/>
    
    <!-- 目盛り - 北 -->
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,5V7"/>
    <path
        android:fillColor="#FFFFFF"
        android:strokeWidth="1.5"
        android:strokeColor="#FFFFFF"
        android:pathData="M12,5V7"/>
    
    <!-- 目盛り - 東 -->
    <path
        android:fillColor="#FFFFFF"
        android:strokeWidth="1.5"
        android:strokeColor="#FFFFFF"
        android:pathData="M19,12H17"/>
    
    <!-- 目盛り - 南 -->
    <path
        android:fillColor="#FFFFFF"
        android:strokeWidth="1.5"
        android:strokeColor="#FFFFFF"
        android:pathData="M12,19V17"/>
    
    <!-- 目盛り - 西 -->
    <path
        android:fillColor="#FFFFFF"
        android:strokeWidth="1.5"
        android:strokeColor="#FFFFFF"
        android:pathData="M5,12H7"/>
    
    <!-- 羅針盤の針 - 北/南 -->
    <path
        android:fillColor="#FF9800"
        android:pathData="M12,7L10.5,12L12,17L13.5,12L12,7Z"/>
    
    <!-- 羅針盤の針 - 東/西 -->
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,7L12.5,12L12,17L11.5,12L12,7Z" 
        android:rotation="90"
        android:pivotX="12"
        android:pivotY="12"/>
    
    <!-- 中心点 -->
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,11C11.45,11 11,11.45 11,12C11,12.55 11.45,13 12,13C12.55,13 13,12.55 13,12C13,11.45 12.55,11 12,11Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_settings_24dp.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M19.43,12.98c0.04,-0.32 0.07,-0.64 0.07,-0.98s-0.03,-0.66 -0.07,-0.98l2.11,-1.65c0.19,-0.15 0.24,-0.42 0.12,-0.64l-2,-3.46c-0.12,-0.22 -0.39,-0.3 -0.61,-0.22l-2.49,1c-0.52,-0.4 -1.08,-0.73 -1.69,-0.98l-0.38,-2.65C14.46,2.18 14.25,2 14,2h-4c-0.25,0 -0.46,0.18 -0.49,0.42l-0.38,2.65c-0.61,0.25 -1.17,0.59 -1.69,0.98l-2.49,-1c-0.23,-0.09 -0.49,0 -0.61,0.22l-2,3.46c-0.13,0.22 -0.07,0.49 0.12,0.64l2.11,1.65c-0.04,0.32 -0.07,0.65 -0.07,0.98s0.03,0.66 0.07,0.98l-2.11,1.65c-0.19,0.15 -0.24,0.42 -0.12,0.64l2,3.46c0.12,0.22 0.39,0.3 0.61,0.22l2.49,-1c0.52,0.4 1.08,0.73 1.69,0.98l0.38,2.65c0.03,0.24 0.24,0.42 0.49,0.42h4c0.25,0 0.46,-0.18 0.49,-0.42l0.38,-2.65c0.61,-0.25 1.17,-0.59 1.69,-0.98l2.49,1c0.23,0.09 0.49,0 0.61,-0.22l2,-3.46c0.12,-0.22 0.07,-0.49 -0.12,-0.64l-2.11,-1.65zM12,15.5c-1.93,0 -3.5,-1.57 -3.5,-3.5s1.57,-3.5 3.5,-3.5 3.5,1.57 3.5,3.5 -1.57,3.5 -3.5,3.5z"/>
</vector>

================
File: app/src/main/res/drawable/ic_settings.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94c0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87C2.62,9.08 2.66,9.34 2.86,9.48l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61L19.14,12.94zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6s3.6,1.62 3.6,3.6S13.98,15.6 12,15.6z" />
</vector>

================
File: app/src/main/res/drawable/ic_shield.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#E0E0E0"
        android:pathData="M12,1L3,5v6c0,5.55 3.84,10.74 9,12 5.16,-1.26 9,-6.45 9,-12V5L12,1zM12,20.91c-4.07,-0.99 -7,-5.28 -7,-9.91V6.3l7,-3.11 7,3.11V11c0,4.63 -2.93,8.91 -7,9.91z"/>
</vector>

================
File: app/src/main/res/drawable/ic_shuffle_24.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M10.59,9.17L5.41,4 4,5.41l5.17,5.17 1.42,-1.41zM14.5,4l2.04,2.04L4,18.59 5.41,20 17.96,7.46 20,9.5V4h-5.5zM18.59,10.41l-1.41,1.41L19.5,14.16 14.84,18.82 17,21v-3.5l2.59,-2.59L18.59,10.41z"/>
</vector>

================
File: app/src/main/res/drawable/ic_shuffle.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="?attr/colorControlNormal"
        android:pathData="M10.59,9.17L5.41,4 4,5.41l5.17,5.17 1.42,-1.41zM14.5,4l2.04,2.04L4,18.59 5.41,20 17.96,7.46 20,9.5L20,4h-5.5zM14.83,13.41l-1.41,1.41 3.13,3.13L14.5,20L20,20v-5.5l-2.04,2.04 -3.13,-3.13z"/>
</vector>

================
File: app/src/main/res/drawable/ic_speaking_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3S9,3.34 9,5v6c0,1.66 1.34,3 3,3zM17.91,11c-0.49,0 -0.9,0.36 -0.98,0.85C16.52,14.2 14.47,16 12,16s-4.52,-1.8 -4.93,-4.15c-0.08,-0.49 -0.49,-0.85 -0.98,-0.85 -0.61,0 -1.09,0.54 -1,1.14 0.49,3 3.01,5.3 6.02,5.7L11.11,22L12.88,22v-4.16c3.02,-0.4 5.53,-2.7 6.02,-5.7 0.1,-0.6 -0.39,-1.14 -0.99,-1.14z"/>
</vector>

================
File: app/src/main/res/drawable/ic_status_completed.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#78909C">
    <path
        android:fillColor="#78909C"
        android:pathData="M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41,-1.41z"/>
</vector>

================
File: app/src/main/res/drawable/ic_status_incomplete.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FF5722">
    <path
        android:fillColor="#FF5722"
        android:pathData="M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z"/>
</vector>

================
File: app/src/main/res/drawable/ic_status_pending.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#9E9E9E">
    <path
        android:fillColor="#9E9E9E"
        android:pathData="M11.99,2C6.47,2 2,6.48 2,12s4.47,10 9.99,10C17.52,22 22,17.52 22,12S17.52,2 11.99,2zM12,20c-4.42,0 -8,-3.58 -8,-8s3.58,-8 8,-8 8,3.58 8,8 -3.58,8 -8,8z"/>
    <path
        android:fillColor="#9E9E9E"
        android:pathData="M12.5,7H11v6l5.25,3.15 0.75,-1.23 -4.5,-2.67z"/>
</vector>

================
File: app/src/main/res/drawable/ic_textbook.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M21,5c-1.11,-0.35 -2.33,-0.5 -3.5,-0.5c-1.95,0 -4.05,0.4 -5.5,1.5c-1.45,-1.1 -3.55,-1.5 -5.5,-1.5c-1.17,0 -2.39,0.15 -3.5,0.5C2.37,5.16 2,5.71 2,6.34v11.66c0,0.73 0.63,1.34 1.37,1.34c0.2,0 0.39,-0.04 0.57,-0.11C5.04,18.8 6.27,18.5 7.5,18.5c1.95,0 4.05,0.4 5.5,1.5c1.35,-0.94 3.14,-1.5 5.5,-1.5c1.17,0 2.39,0.15 3.5,0.5c0.76,0.24 1.36,-0.11 1.36,-0.84V6.34C23,5.71 22.63,5.16 21,5zM21,17.34c-0.93,-0.24 -1.92,-0.34 -3,-0.34c-1.66,0 -3.2,0.39 -4.5,1.17V8.5c1.3,-0.77 2.84,-1.17 4.5,-1.17c1.08,0 2.07,0.1 3,0.34V17.34z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M13.5,8.5v10c1.3,-0.77 2.84,-1.17 4.5,-1.17c1.08,0 2.07,0.1 3,0.34V7.66c-0.93,-0.24 -1.92,-0.34 -3,-0.34C16.34,7.32 14.8,7.72 13.5,8.5zM17,13h2v1h-2V13zM17,10h2v1h-2V10zM17,16h2v1h-2V16z"/>
</vector>

================
File: app/src/main/res/drawable/ic_topic.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M14,2H6C4.9,2 4,2.9 4,4v16c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2V8l-6,-6zM16,18H8v-2h8v2zm0,-4H8v-2h8v2zm-3,-4V3.5L18.5,9H13z"/>
</vector>

================
File: app/src/main/res/drawable/ic_transparent_spacer.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- Set width similar to a standard navigation icon touch area -->
    <size android:width="48dp" android:height="48dp" />
    <solid android:color="@android:color/transparent" />
</shape>

================
File: app/src/main/res/drawable/ic_view_list_24dp.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M3,13h2v-2H3v2zM3,17h2v-2H3v2zM3,9h2V7H3v2zM7,13h14v-2H7v2zM7,17h14v-2H7v2zM7,7v2h14V7H7z"/>
</vector>

================
File: app/src/main/res/drawable/ic_vocabulary_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="#FFFFFF">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M16,11c1.66,0 2.99,-1.34 2.99,-3S17.66,5 16,5c-1.66,0 -3,1.34 -3,3s1.34,3 3,3zM8,11c1.66,0 2.99,-1.34 2.99,-3S9.66,5 8,5C6.34,5 5,6.34 5,8s1.34,3 3,3zM8,13c-2.33,0 -7,1.17 -7,3.5L1,19h14v-2.5c0,-2.33 -4.67,-3.5 -7,-3.5zM16,13c-0.29,0 -0.62,0.02 -0.97,0.05 1.16,0.84 1.97,1.97 1.97,3.45L17,19h6v-2.5c0,-2.33 -4.67,-3.5 -7,-3.5z"/>
</vector>

================
File: app/src/main/res/drawable/java_mascot.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:fillColor="#2196F3"
      android:pathData="M9.37,17.51C3.44,18.97 3.94,14.06 3.33,13.86C2.26,13.58 4.53,11.77 6.83,11.77C7.87,11.77 8.19,12.45 8.19,13C8.19,13.55 7.86,14 7.38,14C6.88,14 6.67,13.83 6.67,13.5C6.67,13.33 6.76,13.17 6.94,13.04C6.94,13.04 6.99,13 6.9,13C6.81,13 5.94,13.16 5.94,14.25C5.94,15.34 7.28,15.33 7.87,15.33C9.9,15.33 10.65,14.06 10.87,13C11.3,11.06 8.77,10.79 7.65,9.79C7.12,9.31 7.12,8.58 7.12,8.11C7.12,4.25 12.94,4.04 12.94,7.67C12.94,9.23 11.5,9.62 10.87,9.62C9.8,9.62 9.33,9.07 9.33,8.5C9.33,7.93 9.74,7.5 10.37,7.5C11,7.5 11.45,7.95 11.45,8.5C11.45,8.68 11.36,8.87 11.36,8.87C11.36,8.87 12.1,8.71 12.1,7.68C12.1,6.38 10.07,6.38 10.07,8.13C10.07,9.88 13.88,9.09 14,11.79C14.08,13.43 13.41,14.7 12.36,15.36C12.44,15.5 12.69,15.71 13.22,15.78C13.83,15.86 18.29,15.11 18.96,10C19.75,4 15.07,3 14.38,3C11.75,3 10.84,4.92 10.84,5.33C10.84,5.47 10.93,5.5 11.2,5.5C11.54,5.51 12.47,5.5 12.47,6.42C12.47,7.2 11.5,7.25 11.22,7.25C10.78,7.25 10.51,7.12 10.5,7.12C10.5,7.12 10.3,7.3 10.3,7.7C10.3,8.1 10.67,8.5 11.37,8.5C12.07,8.5 12.8,7.65 12.8,6.77C12.8,6.77 12.8,4.86 10.9,4.27C9,3.67 5.57,4.5 5.57,7.5C5.57,8.57 6.41,9.54 7.4,9.92C8.2,10.21 9.27,10.34 9.53,10.84C9.6,11 9.53,11.42 9.37,12.17C9.08,13.46 9.37,17.14 9.37,17.51M18,19H6C6,19 7.71,18.47 8.53,17.33C5.12,17 4.55,13.88 4.55,12.17C4.55,12.17 5.06,14.64 7.12,15.5C7.12,15.5 6.35,13.23 7.12,12.17C7.96,11 9.97,14.33 10.34,15.5C10.71,16.67 10.91,19 10.91,19"/>
</vector>

================
File: app/src/main/res/drawable/nav_button_bg.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:startColor="#121212"
        android:endColor="#1E3A8A"
        android:angle="90" />
    <corners android:radius="24dp" />
</shape>

================
File: app/src/main/res/drawable/nav_header_background_placeholder.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#311B92" /> <!-- Dark Purple (Deep Purple 900) -->
</shape>

================
File: app/src/main/res/drawable/new_gradient_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:type="radial"
        android:gradientRadius="80%p"
        android:centerColor="#4B0082"
        android:startColor="#6A0DAD"
        android:endColor="#000080"
        android:centerX="0.5"
        android:centerY="0.3" />
</shape>

================
File: app/src/main/res/drawable/outline_article_24.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M19,3H5C3.9,3 3,3.9 3,5v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V5C21,3.9 20.1,3 19,3zM19,19H5V5h14V19z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M14,17H7v-2h7V17zM17,13H7v-2h10V13zM17,9H7V7h10V9z"/>
</vector>

================
File: app/src/main/res/drawable/outline_assignment_24.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M19,3h-4.18C14.4,1.84 13.3,1 12,1c-1.3,0 -2.4,0.84 -2.82,2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V5C21,3.9 20.1,3 19,3zM12,3c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM19,19H5V5h2v2h10V5h2V19z"/>
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,7H7v2h5V7zM12,11H7v2h5V11zM12,15H7v2h5V15z"/>
</vector>

================
File: app/src/main/res/drawable/outline_folder_24.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M10,4H4c-1.1,0 -1.99,0.9 -1.99,2L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2V8c0,-1.1 -0.9,-2 -2,-2h-8l-2,-2zM4,18V6h5.17l2,2H20v10H4z"/>
</vector>

================
File: app/src/main/res/drawable/outline_help_outline_24.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M11,18h2v-2h-2v2zm1,-16C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zm0,18c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zm0,-14c-2.21,0 -4,1.79 -4,4h2c0,-1.1 0.9,-2 2,-2s2,0.9 2,2c0,2 -3,1.75 -3,5h2c0,-2.25 3,-2.5 3,-5 0,-2.21 -1.79,-4 -4,-4z"/>
</vector>

================
File: app/src/main/res/drawable/pattern_dots.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <size
        android:width="4dp"
        android:height="4dp" />
    <solid android:color="#FFFFFF" />
</shape>

================
File: app/src/main/res/drawable/premium_banner_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#33304d" /> <!-- Same as card background -->
    <corners android:radius="8dp" /> <!-- Add rounded corners -->
</shape>

================
File: app/src/main/res/drawable/premium_button_bg.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:startColor="#FF9D2F"
        android:endColor="#FFBA5C"
        android:angle="45" />
    <corners android:radius="24dp" />
</shape>

================
File: app/src/main/res/drawable/problem_icon_background_solved.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <gradient
        android:type="radial"
        android:gradientRadius="28dp"
        android:startColor="#546E7A"
        android:endColor="#455A64"
        android:centerX="0.5"
        android:centerY="0.5" />
</shape>

================
File: app/src/main/res/drawable/problem_icon_background_unsolved.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <gradient
        android:type="radial"
        android:gradientRadius="28dp"
        android:startColor="#37474F"
        android:endColor="#263238"
        android:centerX="0.5"
        android:centerY="0.5" />
</shape>

================
File: app/src/main/res/drawable/rich_background_chapters.xml
================
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- グラデーション背景 -->
    <item>
        <shape>
            <gradient
                android:startColor="#1A1A2E"
                android:endColor="#16213E"
                android:angle="135"
                android:type="linear" />
        </shape>
    </item>

    <!-- 波形パターン (上部) -->
    <item android:top="-50dp" android:right="-50dp">
        <shape>
            <corners android:radius="300dp" />
            <solid android:color="#0f3460" />
        </shape>
    </item>

    <!-- 波形パターン (下部) -->
    <item android:bottom="-250dp" android:left="-50dp">
        <shape>
            <corners android:radius="200dp" />
            <solid android:color="#0A1631" />
        </shape>
    </item>

    <!-- 薄い点線パターン (削除) -->
    <!--
    <item>
        <bitmap
            android:src="@drawable/pattern_dots"
            android:tileMode="repeat"
            android:alpha="0.05" />
    </item>
    -->
</layer-list>

================
File: app/src/main/res/drawable/rich_background_combined.xml
================
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- ベースのグラデーション背景 -->
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:type="linear"
                android:angle="135"
                android:startColor="#1E1635"
                android:centerColor="#2A254F"
                android:endColor="#1E2B4D"
                android:centerX="0.5"
                android:centerY="0.5" />
        </shape>
    </item>
    
    <!-- 微妙な光の効果 (左上) -->
    <item android:left="-150dp" android:top="-150dp">
        <shape android:shape="oval">
            <gradient
                android:type="radial"
                android:gradientRadius="180dp"
                android:startColor="#03FFFFFF"
                android:endColor="@android:color/transparent" />
            <size
                android:width="300dp"
                android:height="300dp" />
        </shape>
    </item>
    
    <!-- 微妙な光の効果 (右下) -->
    <item android:right="-100dp" android:bottom="-100dp">
        <shape android:shape="oval">
            <gradient
                android:type="radial"
                android:gradientRadius="150dp"
                android:startColor="#02FFFFFF"
                android:endColor="@android:color/transparent" />
            <size
                android:width="250dp"
                android:height="250dp" />
        </shape>
    </item>
    
    <!-- 微細なノイズ効果 -->
    <item>
        <shape android:shape="rectangle">
            <solid android:color="#02FFFFFF" />
        </shape>
    </item>
</layer-list>

================
File: app/src/main/res/drawable/rounded_button_bg.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android" 
    android:shape="rectangle">
    <solid android:color="#1A60A5FA" />
    <corners android:radius="12dp" />
</shape>

================
File: app/src/main/res/drawable/selection_state_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- 外側の光るエフェクト -->
    <item>
        <shape android:shape="rectangle">
            <solid android:color="#600096FF" />
            <corners android:radius="18dp" />
            <padding
                android:bottom="2dp"
                android:left="2dp"
                android:right="2dp"
                android:top="2dp" />
        </shape>
    </item>
    
    <!-- 下側の影 -->
    <item>
        <shape android:shape="rectangle">
            <solid android:color="#5000A0FF" />
            <corners android:radius="16dp" />
            <padding
                android:bottom="2dp"
                android:left="0dp"
                android:right="0dp"
                android:top="0dp" />
        </shape>
    </item>
    
    <!-- メインの背景 -->
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:startColor="#4886FC"
                android:centerColor="#536DFE"
                android:endColor="#304FFE"
                android:angle="270" />
            <corners android:radius="16dp" />
            <stroke android:color="#B0C8FF" android:width="1dp" />
        </shape>
    </item>
    
    <!-- 上部に光沢効果を追加 -->
    <item android:top="0dp" android:bottom="16dp">
        <shape android:shape="rectangle">
            <gradient
                android:startColor="#90FFFFFF"
                android:endColor="#00FFFFFF"
                android:angle="270" />
            <corners
                android:topLeftRadius="16dp"
                android:topRightRadius="16dp" />
        </shape>
    </item>
    
    <!-- 中央に輝き効果を追加 -->
    <item 
        android:top="8dp" 
        android:bottom="8dp"
        android:left="8dp"
        android:right="8dp">
        <shape android:shape="oval">
            <gradient
                android:type="radial"
                android:gradientRadius="60dp"
                android:startColor="#50FFFFFF"
                android:endColor="#00FFFFFF" />
        </shape>
    </item>
</layer-list>

================
File: app/src/main/res/drawable/selection_state_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/selection_state_background" android:state_selected="true" />
    <item android:drawable="@drawable/selection_state_background" android:state_pressed="true" />
    <item android:drawable="@drawable/selection_state_background" android:state_checked="true" />
    <item android:drawable="@drawable/selection_state_background" android:state_activated="true" />
    <item android:drawable="@drawable/toggle_default_background" />
</selector>

================
File: app/src/main/res/drawable/status_badge_completed.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <corners android:radius="4dp" />
    <solid android:color="#607D8B" />
    <size android:width="36dp" android:height="16dp" />
</shape>

================
File: app/src/main/res/drawable/status_badge_new.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <corners android:radius="4dp" />
    <solid android:color="#455A64" />
    <size android:width="36dp" android:height="16dp" />
</shape>

================
File: app/src/main/res/drawable/streak_badge_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    
    <solid android:color="#3F3F66" />
    <corners android:radius="20dp" />
    <stroke android:color="#5D5D8F" android:width="1dp" />
    
</shape>

================
File: app/src/main/res/drawable/toggle_background_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/toggle_selected_background" android:state_checked="true" />
    <item android:drawable="@drawable/toggle_unselected_background" android:state_checked="false" />
</selector>

================
File: app/src/main/res/drawable/toggle_button_background_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/toggle_selected_background" android:state_checked="true" />
    <item android:drawable="@drawable/toggle_unselected_background" android:state_checked="false" />
</selector>

================
File: app/src/main/res/drawable/toggle_button_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/toggle_selected_background" android:state_checked="true" />
    <item android:drawable="@drawable/toggle_default_background" android:state_checked="false" />
</selector>

================
File: app/src/main/res/drawable/toggle_button_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/toggle_selected_background" android:state_checked="true" />
    <item android:drawable="@drawable/toggle_default_background" android:state_checked="false" />
</selector>

================
File: app/src/main/res/drawable/toggle_default_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:startColor="#404050"
        android:endColor="#303040"
        android:angle="270" />
    <corners android:radius="16dp" />
    <stroke 
        android:color="#40FFFFFF" 
        android:width="1dp" />
</shape>

================
File: app/src/main/res/drawable/toggle_navigation_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/bottom_nav_background" android:state_selected="true" />
    <item android:drawable="@drawable/bottom_nav_background" android:state_checked="true" />
    <item android:drawable="@drawable/bottom_nav_background" />
</selector>

================
File: app/src/main/res/drawable/toggle_selected_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#3F51B5" />
    <corners android:radius="16dp" />
</shape>

================
File: app/src/main/res/drawable/toggle_unselected_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#EADDFF" />
    <corners android:radius="16dp" />
    <stroke android:color="#6750A4" android:width="1dp" />
</shape>

================
File: app/src/main/res/drawable/unit_button_bg.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- デフォルトの色 (例えばグレー) を指定。これは setColorFilter で上書きされる -->
    <solid android:color="#BBBBBB" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/layout-land/activity_main.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.drawerlayout.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    tools:context=".MainActivity"
    tools:openDrawer="start">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/main_content_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="#2A254F">

        <!-- Very Transparent Gradient Spots -->

        <View
            android:layout_width="300dp"
            android:layout_height="300dp"
            android:layout_marginStart="-10dp"
            android:layout_marginTop="150dp"
            android:background="@drawable/gradient_spot_blue"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <View
            android:layout_width="300dp"
            android:layout_height="300dp"
            android:background="@drawable/gradient_spot_orange"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            android:layout_marginTop="-60dp"
            android:layout_marginStart="-60dp" />

        <View
            android:layout_width="300dp"
            android:layout_height="300dp"
            android:layout_marginTop="0dp"
            android:layout_marginEnd="-10dp"
            android:background="@drawable/gradient_spot_pink"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <View
            android:layout_width="350dp"
            android:layout_height="350dp"
            android:layout_marginBottom="140dp"
            android:layout_marginEnd="-60dp"
            android:background="@drawable/gradient_spot_green"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.631"
            app:layout_constraintStart_toStartOf="parent" />

        <!-- End Gradient Spots -->

        <com.google.android.material.appbar.AppBarLayout
            android:id="@+id/appBarLayout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@android:color/transparent"
            app:elevation="0dp"
            app:layout_constraintTop_toTopOf="parent">

            <com.google.android.material.appbar.MaterialToolbar
                android:id="@+id/toolbar"

                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                style="@style/Widget.Material3.Toolbar.Surface"
                android:background="@android:color/transparent"
                app:navigationIconTint="@android:color/white">


                <TextView
                    android:id="@+id/toolbar_title_custom"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_gravity="start|center_vertical"
                    android:layout_marginStart="16dp"
                    android:text=""
                    android:textAppearance="@style/TextAppearance.Material3.TitleLarge"
                    android:textColor="@android:color/white" />

            </com.google.android.material.appbar.MaterialToolbar>

        </com.google.android.material.appbar.AppBarLayout>

        <androidx.fragment.app.FragmentContainerView
            android:id="@+id/nav_host_fragment"
            android:name="androidx.navigation.fragment.NavHostFragment"
            android:layout_width="0dp"
            android:layout_height="0dp"
            app:defaultNavHost="true"
            app:layout_constraintTop_toBottomOf="@id/appBarLayout"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:navGraph="@navigation/nav_graph" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/category_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="分野別"
            android:textColor="#00BFFF"
            app:icon="@drawable/ic_folder_24"
            app:iconTint="#00BFFF"
            app:iconPadding="8dp"
            app:backgroundTint="#8000BFFF"
            app:cornerRadius="28dp"
            app:strokeColor="#00BFFF"
            app:strokeWidth="2dp"
            android:paddingStart="24dp"
            android:paddingEnd="24dp"
            android:paddingTop="12dp"
            android:paddingBottom="12dp"
            android:textAllCaps="false"
            android:textSize="16sp"
            style="@style/Widget.Material3.Button.OutlinedButton"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginBottom="16dp" />

    </androidx.constraintlayout.widget.ConstraintLayout>

    <com.google.android.material.navigation.NavigationView
        android:id="@+id/navigation_view"
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        android:fitsSystemWindows="true"
        android:background="@color/drawer_background_dark_semi_transparent"
        app:itemTextColor="@color/md_theme_onSurface"
        app:itemIconTint="@color/md_theme_onSurface"
        app:itemTextAppearance="@style/TextAppearance.App.TitleMedium"
        app:menu="@menu/drawer_menu" />

</androidx.drawerlayout.widget.DrawerLayout>

================
File: app/src/main/res/layout/custom_preference_summary_white.xml
================
<?xml version="1.0" encoding="utf-8"?>
<!-- このレイアウトは androidx.preference:preference:1.2.0 の preference_material.xml をベースにしています -->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:minHeight="?android:attr/listPreferredItemHeightSmall"
    android:gravity="center_vertical"
    android:paddingStart="?android:attr/listPreferredItemPaddingStart"
    android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
    android:background="?android:attr/selectableItemBackground"
    android:clipToPadding="false">

    <LinearLayout
        android:id="@+id/icon_frame"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="-4dp"
        android:minWidth="60dp"
        android:gravity="start|center_vertical"
        android:orientation="horizontal"
        android:paddingTop="4dp"
        android:paddingBottom="4dp"
        android:paddingEnd="12dp"> <!-- Adjusted padding -->
        <androidx.preference.internal.PreferenceImageView
            android:id="@android:id/icon"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:maxWidth="48dp"
            app:maxHeight="48dp"/>
    </LinearLayout>

    <RelativeLayout
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:paddingTop="16dp"
        android:paddingBottom="16dp">

        <TextView
            android:id="@android:id/title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:singleLine="true"
            android:textAppearance="?android:attr/textAppearanceListItem"
            android:ellipsize="marquee" />

        <TextView
            android:id="@android:id/summary"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_below="@android:id/title"
            android:layout_alignStart="@android:id/title"
            android:textAppearance="?android:attr/textAppearanceListItemSecondary"
            android:textColor="#FFFFFFFF"
            android:alpha="1.0"
            android:maxLines="10"/> <!-- Material Design guideline recommendation -->

    </RelativeLayout>

    <!-- Preference widget frame -->
    <LinearLayout
        android:id="@android:id/widget_frame"
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:gravity="end|center_vertical"
        android:paddingStart="16dp"
        android:orientation="vertical"/>

</LinearLayout>

================
File: app/src/main/res/layout/dialog_explanation.xml
================
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="16dp">

    <TextView
        android:id="@+id/explanation_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textAppearance="?attr/textAppearanceBodyMedium" />

</ScrollView>

================
File: app/src/main/res/layout/item_chapter.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingHorizontal="16dp"
    android:paddingTop="20dp"
    android:paddingBottom="12dp">

    <!-- チャプター番号 (TextView, item_unit_headerのunit_buttonに相当) -->
    <TextView
        android:id="@+id/chapter_button"
        android:layout_width="wrap_content"
        android:layout_height="36dp"
        android:background="@drawable/unit_button_bg" 
        android:paddingHorizontal="12dp"
        android:gravity="center"
        android:textAllCaps="false"
        android:textColor="#FFFFFF"
        android:textSize="14sp"
        android:textStyle="bold"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:text="Unit 1" />

    <!-- カテゴリ進捗 (item_unit_headerのlessons_progressに相当) -->
    <TextView
        android:id="@+id/chapter_progress"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="12dp"
        android:textColor="#CCCCCC" 
        android:textSize="14sp"
        app:layout_constraintBottom_toBottomOf="@id/chapter_button"
        app:layout_constraintStart_toEndOf="@id/chapter_button"
        app:layout_constraintTop_toTopOf="@id/chapter_button"
        tools:text="2/5 Lessons" />

    <!-- チャプタータイトル (item_unit_headerのtopic_titleに相当) -->
    <TextView
        android:id="@+id/chapter_topic_title"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:textColor="#FFFFFF" 
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintTop_toBottomOf="@id/chapter_button"
        tools:text="Java の概要と簡単なJavaプログラムの作成" />

    <!-- チャプター説明 (item_unit_headerのtopic_descriptionに相当) -->
    <TextView
        android:id="@+id/chapter_topic_description"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:textColor="#DDDDDD" 
        android:textSize="16sp"
        app:layout_constraintTop_toBottomOf="@+id/chapter_topic_title"
        tools:text="Javaの基本的な概念とプログラム構造について学びます" />

    <!-- 区切り線 (item_unit_headerのunit_dividerに相当) -->
    <View
        android:id="@+id/chapter_divider"
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:layout_marginTop="16dp"
        android:alpha="0.2"
        android:background="#FFFFFF" 
        app:layout_constraintTop_toBottomOf="@+id/chapter_topic_description" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/nav_header_main.xml
================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="@dimen/nav_header_height"
    android:background="@drawable/nav_header_background_placeholder"
    android:gravity="bottom"
    android:orientation="vertical"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:theme="@style/ThemeOverlay.AppCompat.Dark">

    <ImageView
        android:id="@+id/imageView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:paddingTop="@dimen/nav_header_vertical_spacing"
        app:srcCompat="@mipmap/ic_launcher_round" />

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="@dimen/nav_header_vertical_spacing"
        android:text="@string/app_name"
        android:textAppearance="@style/TextAppearance.AppCompat.Body1" />

</LinearLayout>

================
File: app/src/main/res/menu/main_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/action_settings"
        android:icon="@drawable/ic_settings"
        android:title="設定"
        app:showAsAction="ifRoom" />
</menu>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/raw/animation_coffee.json
================
{"v":"5.7.8","fr":50,"ip":0,"op":51,"w":500,"h":500,"nm":"Coffee","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"RLEG","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":13,"s":[-30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":25,"s":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":38,"s":[-30]},{"t":51,"s":[30]}],"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[241.577,293.933,0],"to":[0,-0.5,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":6,"s":[241.577,290.933,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":13,"s":[241.577,293.933,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":19,"s":[241.577,290.933,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":25,"s":[241.577,293.933,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":32,"s":[241.577,290.933,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":38,"s":[241.577,293.933,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":45,"s":[241.577,290.933,0],"to":[0,0,0],"ti":[0,-0.5,0]},{"t":51,"s":[241.577,293.933,0]}],"ix":2,"l":2},"a":{"a":0,"k":[264.472,313.667,0],"ix":1,"l":2},"s":{"a":0,"k":[80,80,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":0,"s":[{"i":[[0,0],[-8.675,-17.236]],"o":[[0,0],[0,0]],"v":[[264.472,313.474],[264.472,370.735]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":7,"s":[{"i":[[0,0],[45.861,-48.881]],"o":[[0,0],[0,0]],"v":[[264.472,313.474],[270.937,342.222]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":13,"s":[{"i":[[0,0],[-8.675,-17.236]],"o":[[0,0],[0,0]],"v":[[264.472,313.474],[264.472,370.735]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":25,"s":[{"i":[[0,0],[-8.675,-17.236]],"o":[[0,0],[0,0]],"v":[[264.472,313.474],[264.472,370.735]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":32,"s":[{"i":[[0,0],[45.861,-48.881]],"o":[[0,0],[0,0]],"v":[[264.472,313.474],[270.937,342.222]],"c":false}]},{"t":38,"s":[{"i":[[0,0],[-8.675,-17.236]],"o":[[0,0],[0,0]],"v":[[264.472,313.474],[264.472,370.735]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"coffee Outlines - Group 3","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[303.569,260.514,0],"ix":2,"l":2},"a":{"a":0,"k":[303.569,260.514,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[4.971,0],[0,4.971],[0,0],[0,0]],"o":[[0,4.971],[-4.971,0],[0,0],[0,0],[0,0]],"v":[[9,-1.785],[0,7.215],[-9,-1.785],[-9,-7.214],[9,-7.214]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.944999964097,0.948999980852,0.948999980852,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[303.569,260.514],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"coffee Outlines - Group 4","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[318.189,244.299,0],"ix":2,"l":2},"a":{"a":0,"k":[318.189,244.299,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-2.761],[2.762,0],[0,2.762],[-2.762,0]],"o":[[0,2.762],[-2.762,0],[0,-2.761],[2.762,0]],"v":[[5,0],[0,5],[-5,0],[0,-5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[318.189,244.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"coffee Outlines - Group 5","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[288.232,244.299,0],"ix":2,"l":2},"a":{"a":0,"k":[288.232,244.299,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-2.761],[2.761,0],[0,2.762],[-2.762,0]],"o":[[0,2.762],[-2.762,0],[0,-2.761],[2.761,0]],"v":[[5,0],[0,5],[-5,0],[0,-5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[288.232,244.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"coffee Outlines - Group 6","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[183.855,250.933,0],"ix":2,"l":2},"a":{"a":0,"k":[183.855,250.933,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.816,0],[0,0],[0,12.539],[-12.539,0],[0,0],[0,5.224],[3.816,0],[0,0],[0,-22.986],[-22.987,0],[0,0],[0,5.225]],"o":[[0,0],[-12.539,0],[0,-12.538],[0,0],[3.816,0],[0,-5.224],[0,0],[-22.987,0],[0,22.987],[0,0],[3.816,0],[0,-5.224]],"v":[[23.59,22.702],[11.121,22.702],[-11.582,-0.001],[11.121,-22.703],[23.59,-22.703],[30.5,-32.162],[23.59,-41.621],[11.121,-41.621],[-30.5,-0.001],[11.121,41.621],[23.59,41.621],[30.5,32.161]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0.84313731474,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[183.855,250.933],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"BODY","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[249.09,312.474,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":6,"s":[249.09,299.974,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":13,"s":[249.09,312.474,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":19,"s":[249.09,299.974,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":25,"s":[249.09,312.474,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":32,"s":[249.09,299.974,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":38,"s":[249.09,312.474,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":45,"s":[249.09,299.974,0],"to":[0,0,0],"ti":[0,0,0]},{"t":51,"s":[249.09,312.474,0]}],"ix":2,"l":2},"a":{"a":0,"k":[273.862,326.843,0],"ix":1,"l":2},"s":{"a":0,"k":[80,80,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[40.197,0],[0,12.517],[0,0],[-40.196,0],[0,12.517],[0,0]],"o":[[-40.196,0],[0,0],[0,12.517],[40.197,0],[0,0],[0,12.517]],"v":[[0,-51.364],[-72.782,-74.027],[-72.782,51.364],[0,74.027],[72.783,51.364],[72.783,-74.027]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":3,"k":{"a":0,"k":[0.237,0,1,0.988,0.545,0,0.912,0.994,1,0,0.824,1],"ix":9}},"s":{"a":0,"k":[56.25,-14.375],"ix":5},"e":{"a":0,"k":[-67.5,56.25],"ix":6},"t":2,"h":{"a":0,"k":0,"ix":7},"a":{"a":0,"k":0,"ix":8},"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[273.863,252.816],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"coffee Outlines - Group 8","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":1,"s":[300.884,205.012,0],"to":[0,-2.083,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":7,"s":[300.884,192.512,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":14,"s":[300.884,205.012,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":20,"s":[300.884,192.512,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":26,"s":[300.884,205.012,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":33,"s":[300.884,192.512,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":39,"s":[300.884,205.012,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":46,"s":[300.884,192.512,0],"to":[0,0,0],"ti":[0,-2.083,0]},{"t":51,"s":[300.884,205.012,0]}],"ix":2,"l":2},"a":{"a":0,"k":[300.884,192.512,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":1,"s":[{"i":[[5.596,0],[0,0],[0,-5.596],[0,0],[5.596,0],[0.439,-5.199],[0,0],[5.595,0],[0,-5.596],[0,0],[-5.596,0],[-0.439,5.199],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.595],[0,0]],"o":[[0,0],[-5.596,0],[0,0],[0,-5.596],[-5.307,0],[0,0],[0,-5.596],[-5.596,0],[0,0],[0,5.595],[5.306,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.595],[5.596,0],[0,0],[0,-5.596]],"v":[[20.326,-50.536],[20.326,-50.536],[10.152,-40.361],[10.152,-22.497],[-0.022,-32.671],[-10.152,-23.351],[-10.152,-34.104],[-20.325,-44.277],[-30.5,-34.104],[-30.5,28.756],[-20.325,38.929],[-10.195,29.61],[-10.195,40.361],[-0.022,50.536],[10.152,40.361],[10.152,22.498],[20.326,32.671],[30.5,22.498],[30.5,-40.361]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":9,"s":[{"i":[[5.596,0],[0,0],[0,-5.596],[0,0],[5.596,0],[0.439,-5.199],[0,0],[5.595,0],[0,-5.596],[0,0],[-5.596,0],[-0.439,5.199],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.595],[0,0]],"o":[[0,0],[-5.596,0],[0,0],[0,-5.596],[-5.307,0],[0,0],[0,-5.596],[-5.596,0],[0,0],[0,5.595],[5.306,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.595],[5.596,0],[0,0],[0,-5.596]],"v":[[20.326,-74.286],[20.326,-74.286],[10.152,-64.111],[10.152,-22.497],[-0.022,-32.671],[-10.152,-23.351],[-10.152,-51.604],[-20.325,-61.777],[-30.5,-51.604],[-30.5,28.756],[-20.325,38.929],[-10.195,29.61],[-10.195,40.361],[-0.022,50.536],[10.152,40.361],[10.152,22.498],[20.326,32.671],[30.5,22.498],[30.5,-64.111]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":17,"s":[{"i":[[5.596,0],[0,0],[0,-5.596],[0,0],[5.596,0],[0.439,-5.199],[0,0],[5.595,0],[0,-5.596],[0,0],[-5.596,0],[-0.439,5.199],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.595],[0,0]],"o":[[0,0],[-5.596,0],[0,0],[0,-5.596],[-5.307,0],[0,0],[0,-5.596],[-5.596,0],[0,0],[0,5.595],[5.306,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.595],[5.596,0],[0,0],[0,-5.596]],"v":[[20.326,-50.536],[20.326,-50.536],[10.152,-40.361],[10.152,-22.497],[-0.022,-32.671],[-10.152,-23.351],[-10.152,-34.104],[-20.325,-44.277],[-30.5,-34.104],[-30.5,28.756],[-20.325,38.929],[-10.195,29.61],[-10.195,40.361],[-0.022,50.536],[10.152,40.361],[10.152,22.498],[20.326,32.671],[30.5,22.498],[30.5,-40.361]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":28,"s":[{"i":[[5.596,0],[0,0],[0,-5.596],[0,0],[5.596,0],[0.439,-5.199],[0,0],[5.595,0],[0,-5.596],[0,0],[-5.596,0],[-0.439,5.199],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.595],[0,0]],"o":[[0,0],[-5.596,0],[0,0],[0,-5.596],[-5.307,0],[0,0],[0,-5.596],[-5.596,0],[0,0],[0,5.595],[5.306,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.595],[5.596,0],[0,0],[0,-5.596]],"v":[[20.326,-50.536],[20.326,-50.536],[10.152,-40.361],[10.152,-22.497],[-0.022,-32.671],[-10.152,-23.351],[-10.152,-34.104],[-20.325,-44.277],[-30.5,-34.104],[-30.5,28.756],[-20.325,38.929],[-10.195,29.61],[-10.195,40.361],[-0.022,50.536],[10.152,40.361],[10.152,22.498],[20.326,32.671],[30.5,22.498],[30.5,-40.361]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":35,"s":[{"i":[[5.596,0],[0,0],[0,-5.596],[0,0],[5.596,0],[0.439,-5.199],[0,0],[5.595,0],[0,-5.596],[0,0],[-5.596,0],[-0.439,5.199],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.595],[0,0]],"o":[[0,0],[-5.596,0],[0,0],[0,-5.596],[-5.307,0],[0,0],[0,-5.596],[-5.596,0],[0,0],[0,5.595],[5.306,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.595],[5.596,0],[0,0],[0,-5.596]],"v":[[20.326,-74.286],[20.326,-74.286],[10.152,-64.111],[10.152,-22.497],[-0.022,-32.671],[-10.152,-23.351],[-10.152,-51.604],[-20.325,-61.777],[-30.5,-51.604],[-30.5,28.756],[-20.325,38.929],[-10.195,29.61],[-10.195,40.361],[-0.022,50.536],[10.152,40.361],[10.152,22.498],[20.326,32.671],[30.5,22.498],[30.5,-64.111]],"c":true}]},{"t":41,"s":[{"i":[[5.596,0],[0,0],[0,-5.596],[0,0],[5.596,0],[0.439,-5.199],[0,0],[5.595,0],[0,-5.596],[0,0],[-5.596,0],[-0.439,5.199],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.595],[0,0]],"o":[[0,0],[-5.596,0],[0,0],[0,-5.596],[-5.307,0],[0,0],[0,-5.596],[-5.596,0],[0,0],[0,5.595],[5.306,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.595],[5.596,0],[0,0],[0,-5.596]],"v":[[20.326,-50.536],[20.326,-50.536],[10.152,-40.361],[10.152,-22.497],[-0.022,-32.671],[-10.152,-23.351],[-10.152,-34.104],[-20.325,-44.277],[-30.5,-34.104],[-30.5,28.756],[-20.325,38.929],[-10.195,29.61],[-10.195,40.361],[-0.022,50.536],[10.152,40.361],[10.152,22.498],[20.326,32.671],[30.5,22.498],[30.5,-40.361]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.556862745098,0.351573240991,0.176885806813,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[300.884,192.512],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"coffee Outlines - Group 9","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":1,"s":[238.08,219.666,0],"to":[0,-2.083,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":7,"s":[238.08,207.166,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":14,"s":[238.08,219.666,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":20,"s":[238.08,207.166,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":26,"s":[238.08,219.666,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":33,"s":[238.08,207.166,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":39,"s":[238.08,219.666,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":46,"s":[238.08,207.166,0],"to":[0,0,0],"ti":[0,-2.083,0]},{"t":51,"s":[238.08,219.666,0]}],"ix":2,"l":2},"a":{"a":0,"k":[238.08,207.166,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":0,"s":[{"i":[[5.596,0],[0,-5.596],[0,0],[5.596,0],[0,-5.596],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.596],[0,0]],"o":[[-5.596,0],[0,0],[0,-5.596],[-5.595,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,-5.596]],"v":[[10.174,-35.88],[0,-25.706],[0,-37.152],[-10.174,-47.326],[-20.348,-37.152],[-20.348,25.707],[-10.174,35.881],[0,25.707],[0,37.152],[10.174,47.326],[20.348,37.152],[20.348,-25.706]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":9,"s":[{"i":[[5.596,0],[0,-5.596],[0,0],[5.596,0],[0,-5.596],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.596],[0,0]],"o":[[-5.596,0],[0,0],[0,-5.596],[-5.595,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,-5.596]],"v":[[10.174,-35.88],[0,-25.706],[0,-68.402],[-10.174,-78.576],[-20.348,-68.402],[-20.348,25.707],[-10.174,35.881],[0,25.707],[0,37.152],[10.174,47.326],[20.348,37.152],[20.348,-25.706]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":17,"s":[{"i":[[5.596,0],[0,-5.596],[0,0],[5.596,0],[0,-5.596],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.596],[0,0]],"o":[[-5.596,0],[0,0],[0,-5.596],[-5.595,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,-5.596]],"v":[[10.174,-35.88],[0,-25.706],[0,-37.152],[-10.174,-47.326],[-20.348,-37.152],[-20.348,25.707],[-10.174,35.881],[0,25.707],[0,37.152],[10.174,47.326],[20.348,37.152],[20.348,-25.706]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":34,"s":[{"i":[[5.596,0],[0,-5.596],[0,0],[5.596,0],[0,-5.596],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.596],[0,0]],"o":[[-5.596,0],[0,0],[0,-5.596],[-5.595,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,-5.596]],"v":[[10.174,-35.88],[0,-25.706],[0,-37.152],[-10.174,-47.326],[-20.348,-37.152],[-20.348,25.707],[-10.174,35.881],[0,25.707],[0,37.152],[10.174,47.326],[20.348,37.152],[20.348,-25.706]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":41,"s":[{"i":[[5.596,0],[0,-5.596],[0,0],[5.596,0],[0,-5.596],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.596],[0,0]],"o":[[-5.596,0],[0,0],[0,-5.596],[-5.595,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,-5.596]],"v":[[10.174,-35.88],[0,-25.706],[0,-68.402],[-10.174,-78.576],[-20.348,-68.402],[-20.348,25.707],[-10.174,35.881],[0,25.707],[0,37.152],[10.174,47.326],[20.348,37.152],[20.348,-25.706]],"c":true}]},{"t":48,"s":[{"i":[[5.596,0],[0,-5.596],[0,0],[5.596,0],[0,-5.596],[0,0],[-5.595,0],[0,5.596],[0,0],[-5.596,0],[0,5.596],[0,0]],"o":[[-5.596,0],[0,0],[0,-5.596],[-5.595,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,5.596],[5.596,0],[0,0],[0,-5.596]],"v":[[10.174,-35.88],[0,-25.706],[0,-37.152],[-10.174,-47.326],[-20.348,-37.152],[-20.348,25.707],[-10.174,35.881],[0,25.707],[0,37.152],[10.174,47.326],[20.348,37.152],[20.348,-25.706]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.556862745098,0.351573240991,0.176885806813,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[238.08,207.166],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 9","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"coffee Outlines - Group 1","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[227.232,182.516,0],"to":[0,-12.5,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":14,"s":[227.232,107.516,0],"to":[0,0,0],"ti":[0,-12.5,0]},{"t":28,"s":[227.232,182.516,0]}],"ix":2,"l":2},"a":{"a":0,"k":[227.232,138.766,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-5.247],[5.247,0],[0,5.247],[-5.247,0]],"o":[[0,5.247],[-5.247,0],[0,-5.247],[5.247,0]],"v":[[9.5,0],[0,9.5],[-9.5,0],[0,-9.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.556862745098,0.351573240991,0.176885806813,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[227.232,138.766],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":4,"nm":"coffee Outlines - Group 10","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[273.863,178.789,0],"ix":2,"l":2},"a":{"a":0,"k":[273.863,178.789,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-12.517],[40.197,0],[0,12.517],[-40.196,0]],"o":[[0,12.517],[-40.196,0],[0,-12.517],[40.197,0]],"v":[[72.783,0],[-0.001,22.663],[-72.783,0],[-0.001,-22.663]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0.71418690401,0.847058823529,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[273.863,178.789],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 10","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"LLEG","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[-30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":13,"s":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":25,"s":[-30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":38,"s":[30]},{"t":51,"s":[-30]}],"ix":10},"p":{"a":0,"k":[268.395,293.683,0],"ix":2,"l":2},"a":{"a":0,"k":[297.993,313.354,0],"ix":1,"l":2},"s":{"a":0,"k":[80,80,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":0,"s":[{"i":[[0,0],[-14.9,-20.06]],"o":[[0,0],[0,0]],"v":[[297.993,313.474],[297.993,370.735]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":13,"s":[{"i":[[0,0],[-14.9,-20.06]],"o":[[0,0],[0,0]],"v":[[297.993,313.474],[297.993,370.735]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":19,"s":[{"i":[[0,0],[47.944,-42.922]],"o":[[0,0],[0,0]],"v":[[297.993,313.474],[307.681,344.172]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":25,"s":[{"i":[[0,0],[-14.9,-20.06]],"o":[[0,0],[0,0]],"v":[[297.993,313.474],[297.993,370.735]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":39,"s":[{"i":[[0,0],[-14.9,-20.06]],"o":[[0,0],[0,0]],"v":[[297.993,313.474],[297.993,370.735]],"c":false}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[{"i":[[0,0],[47.944,-42.922]],"o":[[0,0],[0,0]],"v":[[297.993,313.474],[307.681,344.172]],"c":false}]},{"t":51,"s":[{"i":[[0,0],[-14.9,-20.06]],"o":[[0,0],[0,0]],"v":[[297.993,313.474],[297.993,370.735]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0,0,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":6,"ix":5},"lc":2,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 11","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[250,339.29,0],"ix":2,"l":2},"a":{"a":0,"k":[10.5,134.5,0],"ix":1,"l":2},"s":{"a":0,"k":[84.362,113.238,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[149,21],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[0.960784313725,0.960784313725,0.960784313725,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[10.5,134.5],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0}],"markers":[]}

================
File: app/src/main/res/raw/loading_anime.json
================
{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"å½¢ç¶å¾å± 5","ks":{"o":{"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":8,"s":[100],"e":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":24,"s":[30],"e":[100]},{"t":40}]},"r":{"k":0},"p":{"k":[187.875,77.125,0]},"a":{"k":[-76.375,-2.875,0]},"s":{"k":[{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":8,"s":[100,100,100],"e":[200,200,100]},{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":24,"s":[200,200,100],"e":[100,100,100]},{"t":40}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"k":[18,18]},"p":{"k":[0,0]},"nm":"æ¤­åè·¯å¾ 1","mn":"ADBE Vector Shape - Ellipse"},{"ty":"st","c":{"k":[1,1,1,1]},"o":{"k":100},"w":{"k":0},"lc":1,"lj":1,"ml":4,"nm":"æè¾¹ 1","mn":"ADBE Vector Graphic - Stroke"},{"ty":"fl","c":{"k":[0.87,0.42,0.56,1]},"o":{"k":100},"nm":"å¡«å 1","mn":"ADBE Vector Graphic - Fill"},{"ty":"tr","p":{"k":[-76.482,-3.482],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"åæ¢"}],"nm":"æ¤­å 1","np":3,"mn":"ADBE Vector Group"}],"ip":0,"op":40,"st":0,"bm":0,"sr":1},{"ddd":0,"ind":1,"ty":4,"nm":"å½¢ç¶å¾å± 4","ks":{"o":{"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":6,"s":[100],"e":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":22,"s":[30],"e":[100]},{"t":36}]},"r":{"k":0},"p":{"k":[162.125,76.625,0]},"a":{"k":[-76.375,-2.875,0]},"s":{"k":[{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":6,"s":[100,100,100],"e":[200,200,100]},{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":22,"s":[200,200,100],"e":[100,100,100]},{"t":36}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"k":[18,18]},"p":{"k":[0,0]},"nm":"æ¤­åè·¯å¾ 1","mn":"ADBE Vector Shape - Ellipse"},{"ty":"st","c":{"k":[1,1,1,1]},"o":{"k":100},"w":{"k":0},"lc":1,"lj":1,"ml":4,"nm":"æè¾¹ 1","mn":"ADBE Vector Graphic - Stroke"},{"ty":"fl","c":{"k":[0.81,0.55,0.82,1]},"o":{"k":100},"nm":"å¡«å 1","mn":"ADBE Vector Graphic - Fill"},{"ty":"tr","p":{"k":[-76.482,-3.482],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"åæ¢"}],"nm":"æ¤­å 1","np":3,"mn":"ADBE Vector Group"}],"ip":0,"op":40,"st":0,"bm":0,"sr":1},{"ddd":0,"ind":2,"ty":4,"nm":"å½¢ç¶å¾å± 3","ks":{"o":{"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":4,"s":[100],"e":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":20,"s":[30],"e":[100]},{"t":32}]},"r":{"k":0},"p":{"k":[135.625,76.625,0]},"a":{"k":[-76.375,-2.875,0]},"s":{"k":[{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":4,"s":[100,100,100],"e":[200,200,100]},{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":20,"s":[200,200,100],"e":[100,100,100]},{"t":32}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"k":[18,18]},"p":{"k":[0,0]},"nm":"æ¤­åè·¯å¾ 1","mn":"ADBE Vector Shape - Ellipse"},{"ty":"st","c":{"k":[1,1,1,1]},"o":{"k":100},"w":{"k":0},"lc":1,"lj":1,"ml":4,"nm":"æè¾¹ 1","mn":"ADBE Vector Graphic - Stroke"},{"ty":"fl","c":{"k":[0.47,0.31,0.62,1]},"o":{"k":100},"nm":"å¡«å 1","mn":"ADBE Vector Graphic - Fill"},{"ty":"tr","p":{"k":[-76.482,-3.482],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"åæ¢"}],"nm":"æ¤­å 1","np":3,"mn":"ADBE Vector Group"}],"ip":0,"op":40,"st":0,"bm":0,"sr":1},{"ddd":0,"ind":3,"ty":4,"nm":"å½¢ç¶å¾å± 2","ks":{"o":{"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":2,"s":[100],"e":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":16,"s":[30],"e":[100]},{"t":28}]},"r":{"k":0},"p":{"k":[109.375,76.625,0]},"a":{"k":[-76.625,-3.125,0]},"s":{"k":[{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":2,"s":[100,100,100],"e":[200,200,100]},{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":16,"s":[200,200,100],"e":[100,100,100]},{"t":28}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"k":[18,18]},"p":{"k":[0,0]},"nm":"æ¤­åè·¯å¾ 1","mn":"ADBE Vector Shape - Ellipse"},{"ty":"st","c":{"k":[1,1,1,1]},"o":{"k":100},"w":{"k":0},"lc":1,"lj":1,"ml":4,"nm":"æè¾¹ 1","mn":"ADBE Vector Graphic - Stroke"},{"ty":"fl","c":{"k":[0.54,0.81,0.89,1]},"o":{"k":100},"nm":"å¡«å 1","mn":"ADBE Vector Graphic - Fill"},{"ty":"tr","p":{"k":[-76.482,-3.482],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"åæ¢"}],"nm":"æ¤­å 1","np":3,"mn":"ADBE Vector Group"}],"ip":0,"op":40,"st":0,"bm":0,"sr":1},{"ddd":0,"ind":4,"ty":4,"nm":"å½¢ç¶å¾å± 1","ks":{"o":{"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":0,"s":[100],"e":[30]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.333],"y":[0]},"n":["0p833_0p833_0p333_0"],"t":12,"s":[30],"e":[100]},{"t":24}]},"r":{"k":0},"p":{"k":[82.625,76.625,0]},"a":{"k":[-76.625,-3.375,0]},"s":{"k":[{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":0,"s":[100,100,100],"e":[200,200,100]},{"i":{"x":[0.833,0.833,0.833],"y":[0.833,0.833,0.833]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0.333]},"n":["0p833_0p833_0p333_0","0p833_0p833_0p333_0","0p833_0p833_0p333_0p333"],"t":12,"s":[200,200,100],"e":[100,100,100]},{"t":24}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"k":[18,18]},"p":{"k":[0,0]},"nm":"æ¤­åè·¯å¾ 1","mn":"ADBE Vector Shape - Ellipse"},{"ty":"st","c":{"k":[1,1,1,1]},"o":{"k":100},"w":{"k":0},"lc":1,"lj":1,"ml":4,"nm":"æè¾¹ 1","mn":"ADBE Vector Graphic - Stroke"},{"ty":"fl","c":{"k":[0.34,0.45,0.78,1]},"o":{"k":100},"nm":"å¡«å 1","mn":"ADBE Vector Graphic - Fill"},{"ty":"tr","p":{"k":[-76.482,-3.482],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"åæ¢"}],"nm":"æ¤­å 1","np":3,"mn":"ADBE Vector Group"}],"ip":0,"op":40,"st":0,"bm":0,"sr":1}],"v":"4.5.4","ddd":0,"ip":0,"op":40,"fr":24,"w":280,"h":160}

================
File: app/src/main/res/values/arrays.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="theme_entries">
        <item>@string/theme_default</item>
        <item>@string/theme_ocean_blue</item>
        <item>@string/theme_mint_green</item>
        <item>@string/theme_terracotta</item>
        <item>@string/theme_forest_green</item>
        <item>@string/theme_indigo</item>
        <item>@string/theme_slate</item>
    </string-array>

    <string-array name="theme_values">
        <item>default</item>
        <item>ocean_blue</item>
        <item>mint_green</item>
        <item>terracotta</item>
        <item>forest_green</item>
        <item>indigo</item>
        <item>slate</item>
    </string-array>
</resources>

================
File: app/src/main/res/values/attrs.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="QuizChoiceState">
        <attr name="state_correct" format="boolean" />
        <attr name="state_incorrect" format="boolean" />
        <attr name="state_missed" format="boolean" />
    </declare-styleable>
</resources>

================
File: app/src/main/res/values/ids.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <item name="root_layout" type="id" />
    <item name="content_container" type="id" />
</resources>

================
File: app/src/main/res/values/type.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Define base Text Appearances inheriting from Material 3 defaults -->
    <style name="TextAppearance.App.DisplayLarge" parent="TextAppearance.Material3.DisplayLarge" />
    <style name="TextAppearance.App.DisplayMedium" parent="TextAppearance.Material3.DisplayMedium" />
    <style name="TextAppearance.App.DisplaySmall" parent="TextAppearance.Material3.DisplaySmall" />

    <style name="TextAppearance.App.HeadlineLarge" parent="TextAppearance.Material3.HeadlineLarge" />
    <style name="TextAppearance.App.HeadlineMedium" parent="TextAppearance.Material3.HeadlineMedium" />
    <style name="TextAppearance.App.HeadlineSmall" parent="TextAppearance.Material3.HeadlineSmall" />

    <style name="TextAppearance.App.TitleLarge" parent="TextAppearance.Material3.TitleLarge" />
    <style name="TextAppearance.App.TitleMedium" parent="TextAppearance.Material3.TitleMedium" />
    <style name="TextAppearance.App.TitleSmall" parent="TextAppearance.Material3.TitleSmall" />

    <style name="TextAppearance.App.BodyLarge" parent="TextAppearance.Material3.BodyLarge" />
    <style name="TextAppearance.App.BodyMedium" parent="TextAppearance.Material3.BodyMedium" />
    <style name="TextAppearance.App.BodySmall" parent="TextAppearance.Material3.BodySmall" />

    <style name="TextAppearance.App.LabelLarge" parent="TextAppearance.Material3.LabelLarge" />
    <style name="TextAppearance.App.LabelMedium" parent="TextAppearance.Material3.LabelMedium" />
    <style name="TextAppearance.App.LabelSmall" parent="TextAppearance.Material3.LabelSmall" />

</resources>

================
File: app/src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: app/src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: app/src/test/java/com/example/contentful_javasilver/ExampleUnitTest.java
================
package com.example.contentful_javasilver;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}

================
File: res/values-night/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- ダークモード用 -->
    <color name="md_theme_dark_primary">#90CAF9</color>
    <color name="md_theme_dark_onPrimary">#003A8C</color>
    <color name="md_theme_dark_primaryContainer">#004D40</color>
    <color name="md_theme_dark_onPrimaryContainer">#B2DFDB</color>
    <color name="md_theme_dark_secondary">#C5CAE9</color>
    <color name="md_theme_dark_onSecondary">#1A237E</color>
    <color name="md_theme_dark_surface">#303030</color>
    <color name="md_theme_dark_onSurface">#F5F5F5</color>
</resources>

================
File: res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- ライトモード用 -->
    <color name="md_theme_light_primary">#1976D2</color>
    <color name="md_theme_light_onPrimary">#FFFFFF</color>
    <color name="md_theme_light_primaryContainer">#E3F2FD</color>
    <color name="md_theme_light_onPrimaryContainer">#002171</color>
    <color name="md_theme_light_secondary">#5C6BC0</color>
    <color name="md_theme_light_onSecondary">#FFFFFF</color>
    <color name="md_theme_light_surface">#FFFFFF</color>
    <color name="md_theme_light_onSurface">#212121</color>
</resources>

================
File: settings.gradle
================
pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
    versionCatalogs {
        libs {
            version('room', '2.6.1')
            version('appcompat', '1.7.0')
            version('material', '1.12.0')
            version('constraintlayout', '2.2.1')
            version('junit-ext', '1.1.5')
            version('espresso', '3.6.1')
            
            library('room-runtime', 'androidx.room', 'room-runtime').versionRef('room')
            library('room-compiler', 'androidx.room', 'room-compiler').versionRef('room')
            library('room-ktx', 'androidx.room', 'room-ktx').versionRef('room')
            library('appcompat', 'androidx.appcompat', 'appcompat').versionRef('appcompat')
            library('material', 'com.google.android.material', 'material').versionRef('material')
            library('constraintlayout', 'androidx.constraintlayout', 'constraintlayout').versionRef('constraintlayout')
            library('junit-ext', 'androidx.test.ext', 'junit').versionRef('junit-ext')
            library('espresso-core', 'androidx.test.espresso', 'espresso-core').versionRef('espresso')
        }
    }
}

rootProject.name = "ContentfulJavasilver"
include ':app'

================
File: .gitignore
================
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties
.cursor/
app/google-services.json

================
File: app/schemas/com.example.contentful_javasilver.data.QuizDatabase/5.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 5,
    "identityHash": "8151e2ce2cfd9a732e35b801b6c0301b",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [
          {
            "name": "index_quizzes_category",
            "unique": false,
            "columnNames": [
              "category"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_quizzes_category` ON `${TABLE_NAME}` (`category`)"
          },
          {
            "name": "index_quizzes_chapter",
            "unique": false,
            "columnNames": [
              "chapter"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_quizzes_chapter` ON `${TABLE_NAME}` (`chapter`)"
          },
          {
            "name": "index_quizzes_questionCategory",
            "unique": false,
            "columnNames": [
              "questionCategory"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_quizzes_questionCategory` ON `${TABLE_NAME}` (`questionCategory`)"
          }
        ],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '8151e2ce2cfd9a732e35b801b6c0301b')"
    ]
  }
}

================
File: app/src/main/java/com/example/contentful_javasilver/adapter/ProblemListAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.view.LayoutInflater;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.ListAdapter;
import androidx.recyclerview.widget.RecyclerView;
import android.view.View;
import com.example.contentful_javasilver.R;
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.ItemChapterHeaderBinding;
import com.example.contentful_javasilver.databinding.ItemProblemBinding;

public class ProblemListAdapter extends ListAdapter<Object, RecyclerView.ViewHolder> {

    // Interface for click events
    public interface OnItemClickListener {
        void onItemClick(QuizEntity quiz);
    }

    private OnItemClickListener listener;
    private final QuizDao quizDao;

    private static final int VIEW_TYPE_HEADER = 0;
    private static final int VIEW_TYPE_PROBLEM = 1;

    public ProblemListAdapter(OnItemClickListener listener, QuizDao quizDao) {
        super(DIFF_CALLBACK);
        this.listener = listener;
        this.quizDao = quizDao;
    }

    // Setter for the listener (optional, if not using constructor injection)
    public void setOnItemClickListener(OnItemClickListener listener) {
        this.listener = listener;
    }


    @Override
    public int getItemViewType(int position) {
        Object item = getItem(position);
        if (item instanceof String) {
            return VIEW_TYPE_HEADER;
        } else if (item instanceof QuizEntity) {
            return VIEW_TYPE_PROBLEM;
        }
        // Should not happen with proper data preparation
        throw new IllegalArgumentException("Invalid view type at position " + position);
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
        if (viewType == VIEW_TYPE_HEADER) {
            ItemChapterHeaderBinding binding = ItemChapterHeaderBinding.inflate(inflater, parent, false);
            return new ChapterHeaderViewHolder(binding);
        } else { // VIEW_TYPE_PROBLEM
            ItemProblemBinding binding = ItemProblemBinding.inflate(inflater, parent, false);
            // Pass the listener to the ViewHolder
            return new ProblemViewHolder(binding, listener, quizDao);
        }
    }

    @Override
    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
        Object item = getItem(position);
        if (holder instanceof ChapterHeaderViewHolder) {
            ((ChapterHeaderViewHolder) holder).bind((String) item);
        } else if (holder instanceof ProblemViewHolder) {
            ((ProblemViewHolder) holder).bind((QuizEntity) item);
        }
    }

    // ViewHolder for Chapter Headers
    static class ChapterHeaderViewHolder extends RecyclerView.ViewHolder {
        private final ItemChapterHeaderBinding binding;

        ChapterHeaderViewHolder(ItemChapterHeaderBinding binding) {
            super(binding.getRoot());
            this.binding = binding;
        }

        void bind(String chapterTitle) {
            binding.textViewChapterHeader.setText(chapterTitle);
        }
    }

    // ViewHolder for Problems
    static class ProblemViewHolder extends RecyclerView.ViewHolder {
        private final ItemProblemBinding binding;
        private final OnItemClickListener listener;
        private final QuizDao quizDao;

        ProblemViewHolder(ItemProblemBinding binding, OnItemClickListener listener, QuizDao quizDao) {
            super(binding.getRoot());
            this.binding = binding;
            this.listener = listener;
            this.quizDao = quizDao;
        }

        void bind(QuizEntity quiz) {
            binding.textViewQid.setText(quiz.getQid());
            binding.textViewQuestionCategory.setText(quiz.getQuestionCategory());

            new Thread(() -> {
                boolean isAnswered = quizDao.isProblemAnswered(quiz.getQid());

                itemView.post(() -> {
                    if (isAnswered) {
                        binding.problemIconContainer.setBackground(
                                ContextCompat.getDrawable(itemView.getContext(),
                                        R.drawable.problem_icon_background_solved));
                        binding.problemIcon.setImageResource(R.drawable.ic_status_completed);
                        binding.statusBadge.setBackground(
                                ContextCompat.getDrawable(itemView.getContext(),
                                        R.drawable.status_badge_completed));
                        binding.statusBadge.setText(R.string.status_completed);
                    } else {
                        binding.problemIconContainer.setBackground(
                                ContextCompat.getDrawable(itemView.getContext(),
                                        R.drawable.problem_icon_background_unsolved));
                        binding.problemIcon.setImageResource(R.drawable.ic_shield);
                        binding.statusBadge.setBackground(
                                ContextCompat.getDrawable(itemView.getContext(),
                                        R.drawable.status_badge_new));
                        binding.statusBadge.setText(R.string.status_new);
                    }
                });
            }).start();

            itemView.setOnClickListener(v -> {
                if (listener != null) {
                    listener.onItemClick(quiz);
                }
            });
        }
    }

    private static final DiffUtil.ItemCallback<Object> DIFF_CALLBACK = new DiffUtil.ItemCallback<Object>() {
        @Override
        public boolean areItemsTheSame(@NonNull Object oldItem, @NonNull Object newItem) {
            if (oldItem instanceof String && newItem instanceof String) {
                return oldItem.equals(newItem);
            } else if (oldItem instanceof QuizEntity && newItem instanceof QuizEntity) {
                return ((QuizEntity) oldItem).getQid().equals(((QuizEntity) newItem).getQid());
            }
            return false; // Different types or null
        }

        @Override
        public boolean areContentsTheSame(@NonNull Object oldItem, @NonNull Object newItem) {
             if (oldItem instanceof String && newItem instanceof String) {
                return oldItem.equals(newItem); // Strings are immutable
            } else if (oldItem instanceof QuizEntity && newItem instanceof QuizEntity) {
                // Compare relevant fields if needed, for now, assume if items are same, contents are same
                 return ((QuizEntity) oldItem).equals(newItem); // Requires equals() implementation in QuizEntity
            }
            return false;
        }
    };
}

================
File: app/src/main/java/com/example/contentful_javasilver/adapter/UnitLessonAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.content.Context;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.R;
import com.example.contentful_javasilver.model.UnitLessonItem;

import java.util.ArrayList;
import java.util.List;

public class UnitLessonAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

    private static final int VIEW_TYPE_UNIT = 0;
    private static final int VIEW_TYPE_LESSON = 1;

    private final List<UnitLessonItem> items;
    private final OnLessonClickListener lessonClickListener;

    public UnitLessonAdapter(List<UnitLessonItem> items, OnLessonClickListener lessonClickListener) {
        this.items = items;
        this.lessonClickListener = lessonClickListener;
    }

    @Override
    public int getItemViewType(int position) {
        return items.get(position).isUnitHeader() ? VIEW_TYPE_UNIT : VIEW_TYPE_LESSON;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
        if (viewType == VIEW_TYPE_UNIT) {
            View view = inflater.inflate(R.layout.item_unit_header, parent, false);
            return new UnitViewHolder(view);
        } else {
            View view = inflater.inflate(R.layout.item_lesson, parent, false);
            return new LessonViewHolder(view, lessonClickListener);
        }
    }

    @Override
    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
        UnitLessonItem item = items.get(position);
        if (holder instanceof UnitViewHolder) {
            ((UnitViewHolder) holder).bind(item);
        } else if (holder instanceof LessonViewHolder) {
            ((LessonViewHolder) holder).bind(item);
        }
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public void updateItems(List<UnitLessonItem> newItems) {
        this.items.clear();
        this.items.addAll(newItems);
        notifyDataSetChanged();
    }

    /**
     * 現在のアイテムリストを取得します
     * @return 現在のアイテムリスト
     */
    public List<UnitLessonItem> getItems() {
        return new ArrayList<>(items); // 防御的コピーを返す
    }

    static class UnitViewHolder extends RecyclerView.ViewHolder {
        private final TextView unitButton;
        private final TextView lessonsProgress;
        private final TextView topicTitle;
        private final TextView topicDescription;
        private final View unitDivider;

        public UnitViewHolder(@NonNull View itemView) {
            super(itemView);
            unitButton = itemView.findViewById(R.id.unit_button);
            lessonsProgress = itemView.findViewById(R.id.lessons_progress);
            topicTitle = itemView.findViewById(R.id.topic_title);
            topicDescription = itemView.findViewById(R.id.topic_description);
            unitDivider = itemView.findViewById(R.id.unit_divider);
        }

        public void bind(UnitLessonItem item) {
            Context context = itemView.getContext();
            unitButton.setText(context.getString(R.string.unit_number_format, item.getUnitNumber()));
            lessonsProgress.setText(context.getString(
                    R.string.lessons_progress_format,
                    item.getCompletedLessons(),
                    item.getTotalLessons())
            );
            topicTitle.setText(item.getTitle());
            topicDescription.setText(item.getDescription());

            // ユニット番号に応じた色とDrawableリソースIDを取得
            int unitColor;
            int unitButtonBgResId;
            switch (item.getUnitNumber()) {
                case 1:
                    unitColor = ContextCompat.getColor(context, R.color.unit_1_color);
                    unitButtonBgResId = R.drawable.unit_button_bg_1; // Get drawable ID
                    break;
                case 2:
                    unitColor = ContextCompat.getColor(context, R.color.unit_2_color);
                    unitButtonBgResId = R.drawable.unit_button_bg_2;
                    break;
                case 3:
                    unitColor = ContextCompat.getColor(context, R.color.unit_3_color);
                    unitButtonBgResId = R.drawable.unit_button_bg_3;
                    break;
                case 4:
                    unitColor = ContextCompat.getColor(context, R.color.unit_4_color);
                    unitButtonBgResId = R.drawable.unit_button_bg_4;
                    break;
                case 5:
                    unitColor = ContextCompat.getColor(context, R.color.unit_5_color);
                    unitButtonBgResId = R.drawable.unit_button_bg_5;
                    break;
                case 6:
                    unitColor = ContextCompat.getColor(context, R.color.unit_6_color);
                    unitButtonBgResId = R.drawable.unit_button_bg_6;
                    break;
                default:
                    unitColor = ContextCompat.getColor(context, R.color.unit_default_color);
                    unitButtonBgResId = R.drawable.unit_button_bg; // Default drawable ID
                    break;
            }

            // 背景Drawableを取得し、色を設定 (テーマの影響を避ける)
            Drawable buttonBackground = ContextCompat.getDrawable(context, R.drawable.unit_button_bg); // Use the base drawable
            if (buttonBackground != null) {
                Drawable mutableBackground = buttonBackground.mutate(); // Create a mutable copy
                // Apply the specific unit color using SRC_IN to color the shape
                mutableBackground.setColorFilter(unitColor, PorterDuff.Mode.SRC_IN);
                unitButton.setBackground(mutableBackground);
            } else {
                 // Fallback: Set background color directly if drawable is null (less ideal)
                 unitButton.setBackgroundColor(unitColor);
            }

            // 最後のユニットの場合は区切り線を非表示にする
            if (item.isLastUnit()) {
                unitDivider.setVisibility(View.GONE);
            } else {
                unitDivider.setVisibility(View.VISIBLE);
            }
        }
    }

    static class LessonViewHolder extends RecyclerView.ViewHolder {
        private final ImageView lessonIcon;
        private final TextView lessonNumber;
        private final TextView lessonTitle;
        private final TextView lessonCategory;
        private final ImageView completionCheckmark;
        private final OnLessonClickListener listener;

        public LessonViewHolder(@NonNull View itemView, OnLessonClickListener listener) {
            super(itemView);
            lessonIcon = itemView.findViewById(R.id.lesson_icon);
            lessonNumber = itemView.findViewById(R.id.lesson_number);
            lessonTitle = itemView.findViewById(R.id.lesson_title);
            lessonCategory = itemView.findViewById(R.id.lesson_category);
            completionCheckmark = itemView.findViewById(R.id.completion_checkmark);
            this.listener = listener;
        }

        public void bind(UnitLessonItem item) {
            Context context = itemView.getContext();
            lessonIcon.setImageResource(item.getIconResId());
            lessonNumber.setText(context.getString(
                    R.string.lesson_number_format,
                    item.getLessonNumber())
            );
            lessonTitle.setText(item.getTitle());
            lessonCategory.setText(item.getCategory());

            // ユニット番号に応じたアイコン色を設定
            int iconTintColor;
            switch (item.getUnitNumber()) {
                case 1:
                    iconTintColor = ContextCompat.getColor(context, R.color.unit_1_color);
                    break;
                case 2:
                    iconTintColor = ContextCompat.getColor(context, R.color.unit_2_color);
                    break;
                case 3:
                    iconTintColor = ContextCompat.getColor(context, R.color.unit_3_color);
                    break;
                case 4:
                    iconTintColor = ContextCompat.getColor(context, R.color.unit_4_color);
                    break;
                case 5:
                    iconTintColor = ContextCompat.getColor(context, R.color.unit_5_color);
                    break;
                case 6:
                    iconTintColor = ContextCompat.getColor(context, R.color.unit_6_color);
                    break;
                default:
                    iconTintColor = ContextCompat.getColor(context, R.color.unit_default_color);
                    break;
            }
            // PorterDuff.Mode.SRC_IN ensures the icon shape is filled with the tint color
            lessonIcon.setColorFilter(iconTintColor, PorterDuff.Mode.SRC_IN);

            if (item.isCompleted()) {
                completionCheckmark.setVisibility(View.VISIBLE);
            } else {
                completionCheckmark.setVisibility(View.GONE);
            }

            itemView.setOnClickListener(v -> {
                if (listener != null) {
                    listener.onLessonClick(item);
                }
            });
        }
    }

    public interface OnLessonClickListener {
        void onLessonClick(UnitLessonItem item);
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/HistoryFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log; // Import Log
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton; // Added import

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;

public class HistoryFragment extends Fragment {

    private static final String TAG = "HistoryFragment"; // TAG for logging

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(TAG, "onCreate");
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        Log.d(TAG, "onCreateView");
        // Inflate the updated layout for this fragment
        return inflater.inflate(R.layout.fragment_history, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Log.d(TAG, "onViewCreated");

        NavController navController = Navigation.findNavController(view);

        // Removed Back Button setup code as it's handled by MainActivity's Toolbar

        // Setup Navigation Buttons
        Button buttonStatistics = view.findViewById(R.id.button_statistics);
        Button buttonLearningLog = view.findViewById(R.id.button_learning_log);
        Button buttonBookmark = view.findViewById(R.id.button_bookmark);

        buttonStatistics.setOnClickListener(v -> {
            // Navigate to StatisticsFragment
            navController.navigate(R.id.action_historyFragment_to_statisticsFragment);
        });

        buttonLearningLog.setOnClickListener(v -> {
            // Navigate to LearningLogFragment
            navController.navigate(R.id.action_historyFragment_to_learningLogFragment);
        });

        buttonBookmark.setOnClickListener(v -> {
            // Navigate to BookmarkFragment
            navController.navigate(R.id.action_historyFragment_to_navigation_bookmark);
        });
    }

    @Override
    public void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
    }

    @Override
    public void onPause() {
        super.onPause();
        Log.d(TAG, "onPause");
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.d(TAG, "onDestroyView");
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/ui/theme/Theme.kt
================
package com.example.contentful_javasilver.ui.theme

import android.app.Activity
import android.content.Context
import android.content.ContextWrapper
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.Color // Import Compose Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

// Define colors using Color() composable for type safety
private val md_theme_light_primary = Color(0xFF7C5EAA)
private val md_theme_light_onPrimary = Color(0xFFFFFFFF)
private val md_theme_light_primaryContainer = Color(0xFFF1DEFF)
private val md_theme_light_onPrimaryContainer = Color(0xFF311962)
private val md_theme_light_secondary = Color(0xFF645A70)
private val md_theme_light_onSecondary = Color(0xFFFFFFFF)
private val md_theme_light_secondaryContainer = Color(0xFFEBDDF7)
private val md_theme_light_onSecondaryContainer = Color(0xFF1F182A)
private val md_theme_light_tertiary = Color(0xFF7E525D)
private val md_theme_light_onTertiary = Color(0xFFFFFFFF)
private val md_theme_light_tertiaryContainer = Color(0xFFFFD9E1)
private val md_theme_light_onTertiaryContainer = Color(0xFF31101B)
private val md_theme_light_error = Color(0xFFBA1A1A)
private val md_theme_light_errorContainer = Color(0xFFFFDAD6)
private val md_theme_light_onError = Color(0xFFFFFFFF)
private val md_theme_light_onErrorContainer = Color(0xFF410002)
private val md_theme_light_background = Color(0xFFFFFBFF)
private val md_theme_light_onBackground = Color(0xFF1D1B1E)
private val md_theme_light_surface = Color(0xFFFFFBFF)
private val md_theme_light_onSurface = Color(0xFF1D1B1E)
private val md_theme_light_surfaceVariant = Color(0xFFE8E0EB)
private val md_theme_light_onSurfaceVariant = Color(0xFF4A454E)
private val md_theme_light_outline = Color(0xFF7B757F)
private val md_theme_light_inverseOnSurface = Color(0xFFF5EFF4)
private val md_theme_light_inverseSurface = Color(0xFF323033)
private val md_theme_light_inversePrimary = Color(0xFFDEC1FF)
private val md_theme_light_surfaceTint = Color(0xFF7C5EAA)
private val md_theme_light_outlineVariant = Color(0xFFCCC4CF)
private val md_theme_light_scrim = Color(0xFF000000)
// Added Surface Container Colors for Light theme
private val md_theme_light_surfaceContainer = Color(0xFFF5EFF4) // Example, adjust as needed
private val md_theme_light_surfaceContainerHigh = Color(0xFFF1EFF4)
private val md_theme_light_surfaceContainerHighest = Color(0xFFE8E0EB)


private val md_theme_dark_primary = Color(0xFFDEC1FF)
private val md_theme_dark_onPrimary = Color(0xFF4A2A78)
private val md_theme_dark_primaryContainer = Color(0xFF61428F)
private val md_theme_dark_onPrimaryContainer = Color(0xFFF1DEFF)
private val md_theme_dark_secondary = Color(0xFFCEC1DA)
private val md_theme_dark_onSecondary = Color(0xFF352D40)
private val md_theme_dark_secondaryContainer = Color(0xFF4C4357)
private val md_theme_dark_onSecondaryContainer = Color(0xFFEBDDF7)
private val md_theme_dark_tertiary = Color(0xFFF0B8C5)
private val md_theme_dark_onTertiary = Color(0xFF4A2530)
private val md_theme_dark_tertiaryContainer = Color(0xFF633B46)
private val md_theme_dark_onTertiaryContainer = Color(0xFFFFD9E1)
private val md_theme_dark_error = Color(0xFFFFB4AB)
private val md_theme_dark_onError = Color(0xFF690005)
private val md_theme_dark_errorContainer = Color(0xFF93000A)
private val md_theme_dark_onErrorContainer = Color(0xFFFFDAD6)
private val md_theme_dark_background = Color(0xFF141218) // Adjusted slightly from surface for potential difference
private val md_theme_dark_onBackground = Color(0xFFE7E0E8)
private val md_theme_dark_surface = Color(0xFF141218)
private val md_theme_dark_onSurface = Color(0xFFE7E0E8)
private val md_theme_dark_surfaceVariant = Color(0xFF4A454E)
private val md_theme_dark_onSurfaceVariant = Color(0xFFCCC4CF)
private val md_theme_dark_outline = Color(0xFF958E99)
private val md_theme_dark_inverseOnSurface = Color(0xFF1D1B1E) // Matches light onBackground
private val md_theme_dark_inverseSurface = Color(0xFFE7E0E8) // Matches light onSurface
private val md_theme_dark_inversePrimary = Color(0xFF7C5EAA)
private val md_theme_dark_surfaceTint = Color(0xFFDEC1FF)
private val md_theme_dark_outlineVariant = Color(0xFF4A454E)
private val md_theme_dark_scrim = Color(0xFF000000)
// Added Surface Container Colors for Dark theme
private val md_theme_dark_surfaceContainer = Color(0xFF211F26)
private val md_theme_dark_surfaceContainerHigh = Color(0xFF2C2930)
private val md_theme_dark_surfaceContainerHighest = Color(0xFF37343B)


private val LightColorScheme = lightColorScheme(
    primary = md_theme_light_primary,
    onPrimary = md_theme_light_onPrimary,
    primaryContainer = md_theme_light_primaryContainer,
    onPrimaryContainer = md_theme_light_onPrimaryContainer,
    secondary = md_theme_light_secondary,
    onSecondary = md_theme_light_onSecondary,
    secondaryContainer = md_theme_light_secondaryContainer,
    onSecondaryContainer = md_theme_light_onSecondaryContainer,
    tertiary = md_theme_light_tertiary,
    onTertiary = md_theme_light_onTertiary,
    tertiaryContainer = md_theme_light_tertiaryContainer,
    onTertiaryContainer = md_theme_light_onTertiaryContainer,
    error = md_theme_light_error,
    errorContainer = md_theme_light_errorContainer,
    onError = md_theme_light_onError,
    onErrorContainer = md_theme_light_onErrorContainer,
    background = md_theme_light_background,
    onBackground = md_theme_light_onBackground,
    surface = md_theme_light_surface,
    onSurface = md_theme_light_onSurface,
    surfaceVariant = md_theme_light_surfaceVariant,
    onSurfaceVariant = md_theme_light_onSurfaceVariant,
    outline = md_theme_light_outline,
    inverseOnSurface = md_theme_light_inverseOnSurface,
    inverseSurface = md_theme_light_inverseSurface,
    inversePrimary = md_theme_light_inversePrimary,
    surfaceTint = md_theme_light_surfaceTint,
    outlineVariant = md_theme_light_outlineVariant,
    scrim = md_theme_light_scrim,
    // Add surface container colors
    surfaceContainerLowest = Color(0xFFFFFFFF), // Example value
    surfaceContainerLow = Color(0xFFF5EFF4),    // Example value (match High?)
    surfaceContainer = md_theme_light_surfaceContainer, // Example value
    surfaceContainerHigh = md_theme_light_surfaceContainerHigh,
    surfaceContainerHighest = md_theme_light_surfaceContainerHighest,
)


private val DarkColorScheme = darkColorScheme(
    primary = md_theme_dark_primary,
    onPrimary = md_theme_dark_onPrimary,
    primaryContainer = md_theme_dark_primaryContainer,
    onPrimaryContainer = md_theme_dark_onPrimaryContainer,
    secondary = md_theme_dark_secondary,
    onSecondary = md_theme_dark_onSecondary,
    secondaryContainer = md_theme_dark_secondaryContainer,
    onSecondaryContainer = md_theme_dark_onSecondaryContainer,
    tertiary = md_theme_dark_tertiary,
    onTertiary = md_theme_dark_onTertiary,
    tertiaryContainer = md_theme_dark_tertiaryContainer,
    onTertiaryContainer = md_theme_dark_onTertiaryContainer,
    error = md_theme_dark_error,
    errorContainer = md_theme_dark_errorContainer,
    onError = md_theme_dark_onError,
    onErrorContainer = md_theme_dark_onErrorContainer,
    background = md_theme_dark_background,
    onBackground = md_theme_dark_onBackground,
    surface = md_theme_dark_surface,
    onSurface = md_theme_dark_onSurface,
    surfaceVariant = md_theme_dark_surfaceVariant,
    onSurfaceVariant = md_theme_dark_onSurfaceVariant,
    outline = md_theme_dark_outline,
    inverseOnSurface = md_theme_dark_inverseOnSurface,
    inverseSurface = md_theme_dark_inverseSurface,
    inversePrimary = md_theme_dark_inversePrimary,
    surfaceTint = md_theme_dark_surfaceTint,
    outlineVariant = md_theme_dark_outlineVariant,
    scrim = md_theme_dark_scrim,
    // Add surface container colors
    surfaceContainerLowest = Color(0xFF0F0D13), // Example value
    surfaceContainerLow = Color(0xFF1D1B1E),    // Example value
    surfaceContainer = md_theme_dark_surfaceContainer,
    surfaceContainerHigh = md_theme_dark_surfaceContainerHigh,
    surfaceContainerHighest = md_theme_dark_surfaceContainerHighest,
)

// Helper function to find the Activity from a Context
fun Context.findActivity(): Activity? = when (this) {
    is Activity -> this
    is ContextWrapper -> baseContext.findActivity()
    else -> null
}

@Composable
fun ContentfulJavasilverTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    // We don't have the user selection logic here yet, so disable it for now
    dynamicColor: Boolean = false, // Set to false to use defined colors
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            // Find activity safely using the helper function
            val activity = view.context.findActivity()
            if (activity != null) { // Check if activity is found
                val window = activity.window
                // Make status bar transparent for edge-to-edge
                window.statusBarColor = Color.Transparent.toArgb()
                // Set status bar icon colors based on theme
                WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme
            }
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        // typography = Typography, // Define Typography later if needed
        // shapes = Shapes, // Define Shapes later if needed
        content = content
    )
}

================
File: app/src/main/res/color/drawer_item_color_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- 選択状態 (checked) の色 -->
    <item android:color="?attr/colorPrimary" android:state_checked="true"/>
    <!-- 通常状態の色 -->
    <item android:color="@android:color/white"/>
</selector>

================
File: app/src/main/res/color/quiz_choice_text_color_selector.xml
================
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <!-- Order matters: More specific states first -->

    <!-- Incorrect state (custom state_incorrect=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_incorrect="true" android:color="?attr/colorError" />
    <!-- Correct state (custom state_correct=true, selected, disabled) -->
    <item android:state_selected="true" android:state_enabled="false" app:state_correct="true" android:color="?attr/colorPrimary" />
    <!-- Missed state (correct answer shown when incorrect answer was selected, disabled) -->
    <item android:state_enabled="false" app:state_missed="true" android:color="?attr/colorPrimary"/>
    <!-- Disabled state (after answering, other non-correct/incorrect options) -->
    <item android:state_enabled="false" android:color="?attr/colorOnSurfaceVariant" />
    <!-- Pressed state (Button) -->
    <item android:state_pressed="true" android:color="?attr/colorPrimary" />
    <!-- Checked state (CheckBox) -->
    <item android:state_checked="true" android:color="?attr/colorPrimary" />
    <!-- Selected state (General, e.g., for Button focus) -->
    <item android:state_selected="true" android:color="?attr/colorPrimary" />
    <!-- Default state (enabled, not selected/checked/pressed) -->
    <item android:color="@android:color/white"/>

</selector>

================
File: app/src/main/res/drawable/bar_background_active.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="?attr/colorPrimary"/> <!-- Use theme attribute -->
    <corners android:radius="4dp"/>
</shape>

================
File: app/src/main/res/drawable/bar_track_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="?attr/colorSurfaceVariant"/> <!-- Use theme attribute -->
    <corners android:radius="4dp"/>
</shape>

================
File: app/src/main/res/drawable/button_background_small.xml
================
<?xml version="1.0" encoding="utf-8"?>
<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="?attr/colorControlHighlight">
    <item>
        <shape android:shape="rectangle">
            <corners android:radius="4dp" />
            <solid android:color="?attr/colorSurface" />
            <stroke
                android:width="1dp"
                android:color="?attr/colorPrimary" />
        </shape>
    </item>
</ripple>

================
File: app/src/main/res/drawable/button_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="?attr/colorControlHighlight">
    <item>
        <shape android:shape="rectangle">
            <corners android:radius="8dp" />
            <solid android:color="?attr/colorPrimary" />
        </shape>
    </item>
</ripple>

================
File: app/src/main/res/drawable/circular_progress_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <!--
    This drawable might not be needed if the ProgressBar background is handled
    by the theme (e.g., using colorSurfaceVariant for the track).
    Keeping it for now, but consider if it's redundant.
    -->
    <solid android:color="?attr/colorPrimaryVariant" /> <!-- Use theme attribute -->
    <size
        android:width="48dp"
        android:height="48dp" />
</shape>

================
File: app/src/main/res/drawable/circular_progress_bar.xml
================
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Background circle -->
    <item android:id="@android:id/background">
        <shape
            android:innerRadiusRatio="3"
            android:shape="ring"
            android:thicknessRatio="18.0"
            android:useLevel="false">
            <solid android:color="?attr/colorSurfaceVariant"/> <!-- Use theme attribute -->
        </shape>
    </item>

    <!-- Progress circle -->
    <item android:id="@android:id/progress">
        <rotate
            android:fromDegrees="270"
            android:toDegrees="270">
            <shape
                android:innerRadiusRatio="3"
                android:shape="ring"
                android:thicknessRatio="18.0"
                android:useLevel="true">
                <solid android:color="?attr/colorPrimary"/> <!-- Use theme attribute (colorPrimary instead of secondary for main progress) -->
            </shape>
        </rotate>
    </item>
</layer-list>

================
File: app/src/main/res/drawable/ic_book.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M18,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V4A2,2 0 0,0 18,2M9,4H11V9L10,8.25L9,9V4M18,20H6V4H7V12L10,9.75L13,12V4H18V20Z" />
</vector>

================
File: app/src/main/res/drawable/ic_home.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
</vector>

================
File: app/src/main/res/drawable/jcv_logo.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="?attr/colorPrimary" />
    <corners android:radius="8dp" />
    <size
        android:width="200dp"
        android:height="100dp" />
    <stroke
        android:width="2dp"
        android:color="?attr/colorOutline" />
</shape>

================
File: app/src/main/res/drawable/progress_drawable.xml
================
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:id="@android:id/background">
        <shape>
            <solid android:color="?attr/colorSurfaceVariant" />
            <corners android:radius="4dp" />
        </shape>
    </item>
    <item android:id="@android:id/progress">
        <clip>
            <shape>
                <gradient
                    android:endColor="?attr/colorPrimary"
                    android:startColor="?attr/colorPrimaryContainer"
                    android:angle="0" />
                <corners android:radius="4dp" />
            </shape>
        </clip>
    </item>
</layer-list>

================
File: app/src/main/res/drawable/rounded_background_primary_dark.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <corners android:radius="8dp"/>
    <solid android:color="?attr/colorPrimaryVariant"/>
</shape>

================
File: app/src/main/res/drawable/rounded_button_bg_light.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <corners android:radius="8dp"/>
    <solid android:color="?attr/colorPrimary"/>
</shape>

================
File: app/src/main/res/drawable/start_button_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="?attr/colorPrimary" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/drawable/unit_button_bg_1.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- ユニット1の色 -->
    <solid android:color="@color/unit_color_1" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/drawable/unit_button_bg_2.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- ユニット2の色 -->
    <solid android:color="@color/unit_color_2" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/drawable/unit_button_bg_3.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- ユニット3の色 -->
    <solid android:color="@color/unit_color_3" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/drawable/unit_button_bg_4.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- ユニット4の色 -->
    <solid android:color="@color/unit_color_4" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/drawable/unit_button_bg_5.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- ユニット5の色 -->
    <solid android:color="@color/unit_color_5" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/drawable/unit_button_bg_6.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!-- ユニット6の色 -->
    <solid android:color="@color/unit_color_6" />
    <corners android:radius="8dp" />
</shape>

================
File: app/src/main/res/layout/fragment_bookmark.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".BookmarkFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/bookmark_recycler_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_problem" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_privacy_policy.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".PrivacyPolicyFragment">

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        android:paddingBottom="?attr/actionBarSize"
        android:clipToPadding="false">

        <TextView
            android:id="@+id/privacy_policy_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="16dp"
            android:text="@string/privacy_policy_content"
            android:textAppearance="?attr/textAppearanceBodyMedium" />

    </androidx.core.widget.NestedScrollView>

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        app:menu="@menu/bottom_navigation_menu" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>

================
File: app/src/main/res/layout/item_chapter_header.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingTop="24dp"
    android:paddingBottom="12dp"
    android:background="?attr/colorSurfaceContainerLowest">

    <View
        android:id="@+id/chapter_indicator"
        android:layout_width="4dp"
        android:layout_height="0dp"
        android:background="?attr/colorPrimary"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="@id/textViewChapterHeader"
        app:layout_constraintBottom_toBottomOf="@id/textViewChapterHeader" />

    <TextView
        android:id="@+id/textViewChapterHeader"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:paddingStart="16dp"
        android:paddingEnd="16dp"
        android:textSize="20sp"
        android:textStyle="bold"
        android:textColor="?attr/colorPrimary"
        android:letterSpacing="0.02"
        app:layout_constraintStart_toEndOf="@id/chapter_indicator"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        tools:text="第1章 Javaプログラムの基礎" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/item_lesson.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingVertical="16dp"
    android:paddingHorizontal="16dp"
    android:background="@android:color/transparent"
    android:clickable="true"
    android:focusable="true"
    android:foreground="?attr/selectableItemBackground">

    <!-- レッスンアイコンコンテナ -->
    <FrameLayout
        android:id="@+id/lesson_icon_container"
        android:layout_width="56dp"
        android:layout_height="56dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent">

        <ImageView
            android:id="@+id/lesson_icon"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:padding="8dp"
            tools:src="@drawable/ic_lesson_package"
            android:contentDescription="@string/lesson_icon_description" />

        <ImageView
            android:id="@+id/completion_checkmark"
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:layout_gravity="bottom|end"
            android:src="@drawable/ic_lesson_complete"
            android:visibility="gone"
            android:contentDescription="@string/lesson_completed_description" />
    </FrameLayout>

    <!-- レッスン情報 -->
    <LinearLayout
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginStart="16dp"
        app:layout_constraintStart_toEndOf="@id/lesson_icon_container"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent">

        <TextView
            android:id="@+id/lesson_number"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="14sp"
            android:textColor="#AAAAAA"
            android:textStyle="bold"
            android:letterSpacing="0.05"
            tools:text="Lesson 1" />

        <TextView
            android:id="@+id/lesson_title"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:textStyle="bold"
            android:textColor="@android:color/white"
            android:layout_marginTop="4dp"
            android:lineSpacingExtra="2sp"
            android:ellipsize="end"
            android:maxLines="2"
            tools:text="mainメソッドを持つ実行可能なJavaプログラムの作成" />

        <TextView
            android:id="@+id/lesson_category"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="14sp"
            android:textColor="#CCCCCC"
            android:layout_marginTop="4dp"
            android:background="@drawable/category_badge_background"
            android:paddingHorizontal="8dp"
            android:paddingVertical="2dp"
            tools:text="概念" />
    </LinearLayout>
</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/item_unit_header.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingHorizontal="16dp"
    android:paddingTop="24dp"
    android:paddingBottom="16dp">

    <!-- ユニット情報コンテナ -->
    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/unit_header_container"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent">

        <!-- Unit番号 -->
        <TextView
            android:id="@+id/unit_button"
            android:layout_width="wrap_content"
            android:layout_height="36dp"
            android:background="@drawable/unit_button_bg"
            android:paddingHorizontal="12dp"
            android:gravity="center"
            android:textAllCaps="false"
            android:textColor="#FFFFFF"
            android:textSize="14sp"
            android:textStyle="bold"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            tools:text="Unit 1" />

        <!-- レッスン進捗 -->
        <TextView
            android:id="@+id/lessons_progress"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="12dp"
            android:textColor="#CCCCCC"
            android:textSize="14sp"
            android:textStyle="bold"
            app:layout_constraintBottom_toBottomOf="@id/unit_button"
            app:layout_constraintStart_toEndOf="@id/unit_button"
            app:layout_constraintTop_toTopOf="@id/unit_button"
            tools:text="1/6 Lessons" />

    </androidx.constraintlayout.widget.ConstraintLayout>

    <!-- トピックタイトル -->
    <TextView
        android:id="@+id/topic_title"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:textColor="#FFFFFF"
        android:textSize="22sp"
        android:textStyle="bold"
        android:lineSpacingExtra="2sp"
        app:layout_constraintTop_toBottomOf="@id/unit_header_container"
        tools:text="Java の概要と簡単なJavaプログラムの作成" />

    <!-- トピック説明 -->
    <TextView
        android:id="@+id/topic_description"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:textColor="#DDDDDD"
        android:textSize="16sp"
        android:lineSpacingExtra="4sp"
        android:alpha="0.9"
        app:layout_constraintTop_toBottomOf="@id/topic_title"
        tools:text="Javaプログラムの基本構造とコンパイル・実行方法を学びます" />

    <!-- ユニット区切り線 -->
    <View
        android:id="@+id/unit_divider"
        android:layout_width="match_parent"
        android:layout_height="1.5dp"
        android:layout_marginTop="20dp"
        android:alpha="0.15"
        android:background="#FFFFFF"
        app:layout_constraintTop_toBottomOf="@id/topic_description" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/layout_achievements_banner.xml
================
<?xml version="1.0" encoding="utf-8"?>
<!-- 共通のアチーブメントバナーレイアウト -->
<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools" 
    android:id="@+id/achievements_banner_card"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginHorizontal="16dp"
    android:layout_marginTop="12dp"
    android:layout_marginBottom="4dp"
    app:cardCornerRadius="14dp"
    app:cardElevation="4dp"
    app:cardBackgroundColor="#1F1F38">

    <androidx.constraintlayout.widget.ConstraintLayout 
        android:id="@+id/achievements_banner_container" 
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingHorizontal="20dp"
        android:paddingVertical="14dp">

        <!-- 今日の学習時間 -->
        <LinearLayout
            android:id="@+id/study_time_container"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center_vertical"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent">
            
            <ImageView
                android:layout_width="20dp"
                android:layout_height="20dp"
                android:src="@drawable/ic_clock"
                android:contentDescription="Clock icon"
                app:tint="#BBDDFF" />
                
            <TextView
                android:id="@+id/today_learning_time_text" 
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="今日の学習時間: 0分" 
                android:textColor="#EEEEEE"
                android:textSize="15sp"
                android:fontFamily="sans-serif-medium"
                android:layout_marginStart="8dp"/>
        </LinearLayout>

    <!-- 連続学習日数 -->
    <LinearLayout
        android:id="@+id/fire_achievement"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center_vertical"
            android:background="@drawable/streak_badge_background"
            android:paddingHorizontal="12dp"
            android:paddingVertical="6dp"
        app:layout_constraintEnd_toEndOf="parent" 
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        android:visibility="visible"> 

        <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
            android:src="@drawable/ic_fire_achievement"
            android:contentDescription="Fire streak" />

        <TextView
            android:id="@+id/fire_count"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="0" 
            android:textColor="#FFFFFF"
                android:textSize="15sp"
                android:textStyle="bold"
                android:layout_marginStart="6dp" />
                
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="日連続" 
                android:textColor="#DDDDDD"
                android:textSize="13sp"
                android:layout_marginStart="2dp" />
    </LinearLayout>
</androidx.constraintlayout.widget.ConstraintLayout> 
</androidx.cardview.widget.CardView>

================
File: app/src/main/res/menu/drawer_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    tools:showIn="navigation_view">

    <group android:checkableBehavior="single">
        <item
            android:id="@+id/nav_home"
            android:icon="@drawable/ic_home_24dp"
            android:title="ホーム" />
        <item
            android:id="@+id/nav_problem_list"
            android:icon="@drawable/ic_view_list_24dp"
            android:title="問題一覧" />
        <item
            android:id="@+id/nav_history"
            android:icon="@drawable/ic_history_24dp"
            android:title="履歴" />
        <item
            android:id="@+id/navigation_bookmark"
            android:icon="@drawable/ic_bookmark_border_24dp"
            android:title="ブックマーク" />
    </group>

    <item android:title="その他">
        <menu>
            <item
                android:id="@+id/nav_settings"
                android:icon="@drawable/ic_settings_24dp"
                android:title="設定" />
            <!-- Add other items like Privacy Policy if needed -->
        </menu>
    </item>

</menu>

================
File: app/src/main/res/menu/problem_list_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <!-- Use custom search icon -->
    <item
        android:id="@+id/action_search"
        android:icon="@drawable/ic_search"
        android:title="検索"
        app:actionViewClass="androidx.appcompat.widget.SearchView"
        app:showAsAction="ifRoom|collapseActionView" />
</menu>

================
File: app/src/main/res/menu/quiz_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <!-- Default state icon -->
    <item
        android:id="@+id/action_bookmark"
        android:icon="@drawable/ic_bookmark_default_color"
        android:title="ブックマーク"
        app:showAsAction="always" />
</menu>

================
File: gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradlew
================
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: settings.gradle.kts
================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "My Applicationss"
include(":app")

================
File: app/src/main/java/com/example/contentful_javasilver/adapter/CategoryAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.ListAdapter;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.R;
import com.example.contentful_javasilver.model.CategoryItem;

public class CategoryAdapter extends ListAdapter<CategoryItem, CategoryAdapter.CategoryViewHolder> {
    private final CategoryClickListener listener;

    public interface CategoryClickListener {
        void onCategoryClick(CategoryItem category);
    }

    public CategoryAdapter(CategoryClickListener listener) {
        super(new DiffUtil.ItemCallback<CategoryItem>() {
            @Override
            public boolean areItemsTheSame(@NonNull CategoryItem oldItem, @NonNull CategoryItem newItem) {
                // カテゴリ名と章番号で一意性を判断 (より厳密なIDがあればそれが望ましい)
                return oldItem.getCategoryName().equals(newItem.getCategoryName()) && 
                       oldItem.getChapterNumber() == newItem.getChapterNumber();
            }

            @Override
            public boolean areContentsTheSame(@NonNull CategoryItem oldItem, @NonNull CategoryItem newItem) {
                // オブジェクトの内容が変更されたか比較
                return oldItem.equals(newItem); // CategoryItemにequals()の実装が必要
            }
        });
        this.listener = listener;
    }

    @NonNull
    @Override
    public CategoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        // ItemCategoryBindingではなく、通常のLayoutInflaterを使用
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_category, parent, false);
        return new CategoryViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull CategoryViewHolder holder, int position) {
        CategoryItem category = getItem(position);
        // 最後のアイテムかどうかを判定し、区切り線の表示を制御
        boolean isLastItem = (position == getItemCount() - 1);
        holder.bind(category, listener, isLastItem);
    }

    static class CategoryViewHolder extends RecyclerView.ViewHolder {
        // ビューへの参照を item_category.xml に合わせる
        private final ImageView categoryIcon;
        private final TextView categoryTitle;
        private final TextView categoryProgress;
        private final View categoryDivider;

        CategoryViewHolder(@NonNull View itemView) {
            super(itemView);
            // 新しいIDでビューを検索
            categoryIcon = itemView.findViewById(R.id.category_icon);
            categoryTitle = itemView.findViewById(R.id.category_title);
            categoryProgress = itemView.findViewById(R.id.category_progress);
            categoryDivider = itemView.findViewById(R.id.category_divider);
        }

        void bind(CategoryItem category, CategoryClickListener listener, boolean isLastItem) {
            Context context = itemView.getContext();
            
            // アイコンを outline_folder_24 に設定
            categoryIcon.setImageResource(R.drawable.outline_folder_24);
            
            // タイトルを設定
            categoryTitle.setText(category.getCategoryName());

            // categoryDescription を常に非表示にする
            // categoryDescription.setVisibility(View.GONE); // ここで非表示に設定
            
            // 進捗テキストを設定
            categoryProgress.setText(context.getString(
                R.string.questions_progress_format, 
                category.getCompletedQuestions(),
                category.getTotalQuestions()
            ));

            // 区切り線の表示/非表示を設定
            categoryDivider.setVisibility(isLastItem ? View.GONE : View.VISIBLE);

            // クリックリスナーを設定
            itemView.setOnClickListener(v -> {
                if (listener != null) {
                    listener.onCategoryClick(category);
                }
            });
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/adapter/HistoryAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.ListAdapter;
import androidx.core.content.ContextCompat; // Keep for potential future use, but remove specific calls
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.R;
// import com.example.contentful_javasilver.data.ProblemStats; // No longer needed
import com.example.contentful_javasilver.data.QuizHistory; // Import QuizHistory
import com.google.android.material.color.MaterialColors; // Add import
import android.graphics.Color; // Add import for fallback colors

import java.text.SimpleDateFormat; // For date formatting
import java.util.Date; // For date formatting
import java.util.Locale; // For date formatting

public class HistoryAdapter extends ListAdapter<QuizHistory, HistoryAdapter.HistoryViewHolder> { // Changed type parameter

    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm", Locale.getDefault());

    public HistoryAdapter() {
        super(DIFF_CALLBACK);
    }

    private static final DiffUtil.ItemCallback<QuizHistory> DIFF_CALLBACK = new DiffUtil.ItemCallback<QuizHistory>() { // Changed type parameter
        @Override
        public boolean areItemsTheSame(@NonNull QuizHistory oldItem, @NonNull QuizHistory newItem) {
            // Assuming timestamp uniquely identifies a history item
            return oldItem.timestamp == newItem.timestamp;
        }

        @Override
        public boolean areContentsTheSame(@NonNull QuizHistory oldItem, @NonNull QuizHistory newItem) {
            // Check if content has changed
            return oldItem.problemId.equals(newItem.problemId) &&
                   oldItem.isCorrect == newItem.isCorrect;
        }
    };

    @NonNull
    @Override
    public HistoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        // Create a new view, which defines the UI of the list item
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_history, parent, false); // Use the updated item_history.xml
        return new HistoryViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull HistoryViewHolder holder, int position) {
        // Get the data model based on position
        QuizHistory currentHistory = getItem(position); // Changed type
        // Set item views based on your views and data model
        holder.problemIdTextView.setText(currentHistory.problemId); // Display problem ID directly

        // Set result text and color using defined resources
        if (currentHistory.isCorrect) {
            holder.resultTextView.setText("正解");
            // Use ContextCompat to get defined green color
            int correctColor = ContextCompat.getColor(holder.itemView.getContext(), R.color.correct_green);
            holder.resultTextView.setTextColor(correctColor);
        } else {
            holder.resultTextView.setText("不正解");
            // Use ContextCompat to get defined red color
            int incorrectColor = ContextCompat.getColor(holder.itemView.getContext(), R.color.incorrect_red);
            holder.resultTextView.setTextColor(incorrectColor);
        }

        // Format and set timestamp
        try {
            holder.timestampTextView.setText(dateFormat.format(new Date(currentHistory.timestamp)));
        } catch (Exception e) {
            holder.timestampTextView.setText("----/--/-- --:--"); // Fallback for invalid timestamp
        }
    }

    // Provide a reference to the views for each data item
    public static class HistoryViewHolder extends RecyclerView.ViewHolder {
        public TextView problemIdTextView;
        public TextView resultTextView; // Changed from correct/incorrect/accuracy
        public TextView timestampTextView; // Added for timestamp

        public HistoryViewHolder(View itemView) {
            super(itemView);
            // Update IDs based on the new item_history.xml layout
            problemIdTextView = itemView.findViewById(R.id.text_history_problem_id);
            resultTextView = itemView.findViewById(R.id.text_history_result);
            timestampTextView = itemView.findViewById(R.id.text_history_timestamp);
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/LearningLogFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.adapter.HistoryAdapter;
import com.example.contentful_javasilver.data.QuizHistory;
import com.example.contentful_javasilver.viewmodels.HistoryViewModel;
import java.util.ArrayList;
import java.util.List;

public class LearningLogFragment extends Fragment {

    private static final String TAG = "LearningLogFragment";
    private RecyclerView recyclerView;
    private HistoryAdapter adapter;
    private HistoryViewModel historyViewModel;
    private LinearLayout emptyStateContainer;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(TAG, "onCreate");
        historyViewModel = new ViewModelProvider(this).get(HistoryViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        Log.d(TAG, "onCreateView");
        View view = inflater.inflate(R.layout.fragment_learning_log, container, false);
        recyclerView = view.findViewById(R.id.recycler_view_learning_log);
        emptyStateContainer = view.findViewById(R.id.empty_state_container);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        adapter = new HistoryAdapter();
        recyclerView.setAdapter(adapter);

        return view;
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Log.d(TAG, "onViewCreated");

        historyViewModel.getAllHistory().observe(getViewLifecycleOwner(), new Observer<List<QuizHistory>>() {
            @Override
            public void onChanged(List<QuizHistory> quizHistories) {
                if (quizHistories != null && !quizHistories.isEmpty()) {
                    Log.d(TAG, "History updated with " + quizHistories.size() + " entries.");
                    recyclerView.setVisibility(View.VISIBLE);
                    emptyStateContainer.setVisibility(View.GONE);
                    adapter.submitList(quizHistories);
                } else {
                    Log.d(TAG, "History is null or empty.");
                    recyclerView.setVisibility(View.GONE);
                    emptyStateContainer.setVisibility(View.VISIBLE);
                    adapter.submitList(new ArrayList<>());
                }
            }
        });
    }

    @Override
    public void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
    }

    @Override
    public void onPause() {
        super.onPause();
        Log.d(TAG, "onPause");
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.d(TAG, "onDestroyView");
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/StatisticsFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton; // Added import
import android.widget.LinearLayout; // Import LinearLayout

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.NavController; // Added import
import androidx.navigation.Navigation; // Added import
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.adapter.StatisticsAdapter;
import com.example.contentful_javasilver.viewmodels.StatisticsViewModel;
import com.example.contentful_javasilver.data.ProblemStats; // Import ProblemStats

public class StatisticsFragment extends Fragment {

    private StatisticsViewModel statisticsViewModel;
    private RecyclerView recyclerView;
    private StatisticsAdapter adapter;
    private LinearLayout emptyStateContainer; // Add reference for empty state

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Initialize ViewModel
        statisticsViewModel = new ViewModelProvider(this).get(StatisticsViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_statistics, container, false);

        // Setup RecyclerView
        recyclerView = view.findViewById(R.id.recycler_view_statistics);
        emptyStateContainer = view.findViewById(R.id.empty_state_statistics_container); // Get reference
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        recyclerView.setHasFixedSize(true); // Optional optimization

        // Setup Adapter
        adapter = new StatisticsAdapter();
        recyclerView.setAdapter(adapter);

        return view;
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // Removed Back Button setup code as it's handled by MainActivity's Toolbar

        // Observe the LiveData from the ViewModel
        statisticsViewModel.getProblemStatistics().observe(getViewLifecycleOwner(), problemStats -> {
            // Implement empty state logic
            if (problemStats != null && !problemStats.isEmpty()) {
                // Data exists: Show RecyclerView, hide empty state
                recyclerView.setVisibility(View.VISIBLE);
                emptyStateContainer.setVisibility(View.GONE);
                adapter.submitList(problemStats);
            } else {
                // No data: Hide RecyclerView, show empty state
                recyclerView.setVisibility(View.GONE);
                emptyStateContainer.setVisibility(View.VISIBLE);
                adapter.submitList(null); // Submit null or empty list to clear adapter
            }
        });
    }
}

================
File: app/src/main/res/drawable/bar_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="?attr/colorPrimary"/> <!-- Changed from colorOutline -->
    <corners android:radius="4dp"/>
</shape>

================
File: app/src/main/res/drawable/ic_bookmark_default_color.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="28dp"
    android:height="28dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:strokeColor="?attr/colorPrimary"
        android:strokeWidth="1.5"
        android:pathData="M17,3H7c-1.1,0 -2,0.9 -2,2v16l7,-3 7,3V5c0,-1.1 -0.9,-2 -2,-2z" />
</vector>

================
File: app/src/main/res/layout/fragment_loading.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface">

    <com.airbnb.lottie.LottieAnimationView
        android:id="@+id/lottieAnimationView"
        android:layout_width="200dp"
        android:layout_height="200dp"
        app:layout_constraintBottom_toTopOf="@+id/loadingStatusText"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_chainStyle="packed"
        app:lottie_rawRes="@raw/loading_anime"
        app:lottie_autoPlay="true"
        app:lottie_loop="true" />

    <TextView
        android:id="@+id/loadingStatusText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textColor="?attr/colorOnSurfaceVariant"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="@+id/lottieAnimationView"
        app:layout_constraintStart_toStartOf="@+id/lottieAnimationView"
        app:layout_constraintTop_toBottomOf="@+id/lottieAnimationView"
        tools:text="データを準備中..." />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/item_history.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingStart="16dp"
    android:paddingEnd="16dp"
    android:paddingTop="8dp"
    android:paddingBottom="8dp"
    android:background="@android:color/transparent">

    <TextView
        android:id="@+id/text_history_problem_id"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginEnd="8dp"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textColor="@color/md_theme_onPrimary"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toStartOf="@+id/guideline_result"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:text="1-1" />

    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_percent="0.35" />

    <TextView
        android:id="@+id/text_history_result"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:layout_marginEnd="8dp"
        android:gravity="center"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textColor="@color/md_theme_onPrimary"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toStartOf="@+id/guideline_timestamp"
        app:layout_constraintStart_toEndOf="@+id/guideline_result"
        app:layout_constraintTop_toTopOf="parent"
        tools:text="正解"
        tools:textColor="?attr/colorPrimary" />

    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline_timestamp"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_percent="0.6" />

    <TextView
        android:id="@+id/text_history_timestamp"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:gravity="end"
        android:textAppearance="?attr/textAppearanceBodySmall"
        android:textColor="@color/md_theme_onPrimary"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toEndOf="@+id/guideline_timestamp"
        app:layout_constraintTop_toTopOf="parent"
        tools:text="2025/03/31 11:40" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/item_statistics.xml
================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    android:paddingStart="16dp"
    android:paddingEnd="16dp"
    android:paddingTop="12dp"
    android:paddingBottom="12dp"
    android:background="@android:color/transparent">

    <TextView
        android:id="@+id/text_stats_problem_id"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="0.3"
        android:text="Problem ID"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textColor="@color/md_theme_onPrimary" />

    <TextView
        android:id="@+id/text_stats_correct"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="0.2"
        android:gravity="center"
        android:text="正: 0"
        android:textColor="@color/correct_green"
        android:textAppearance="?attr/textAppearanceBodyMedium" />

    <TextView
        android:id="@+id/text_stats_incorrect"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="0.2"
        android:gravity="center"
        android:text="誤: 0"
        android:textColor="@color/incorrect_red"
        android:textAppearance="?attr/textAppearanceBodyMedium" />

    <TextView
        android:id="@+id/text_stats_accuracy"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="0.3"
        android:gravity="end"
        android:text="率: 0.0%"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textColor="@color/md_theme_onPrimary" />

</LinearLayout>

================
File: app/src/main/res/layout/list_item_chapter_progress.xml
================
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginHorizontal="4dp"
    android:layout_marginVertical="4dp"
    app:cardElevation="2dp"
    app:cardCornerRadius="8dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp">

        <TextView
            android:id="@+id/chapterNameTextView"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:textAppearance="?attr/textAppearanceTitleMedium"
            android:textColor="?attr/colorOnSurface"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintEnd_toStartOf="@+id/accuracyPercentageTextView"
            android:layout_marginEnd="8dp"
            tools:text="第1章 Javaの基本" />

        <TextView
            android:id="@+id/accuracyPercentageTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAppearance="?attr/textAppearanceTitleMedium"
            android:textColor="?attr/colorPrimary" 
            android:textStyle="bold"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="@+id/chapterNameTextView"
            app:layout_constraintBottom_toBottomOf="@+id/chapterNameTextView"
            tools:text="85%" />

        <ProgressBar
            android:id="@+id/chapterProgressBar"
            style="?android:attr/progressBarStyleHorizontal"
            android:layout_width="0dp"
            android:layout_height="8dp"
            android:layout_marginTop="8dp"
            android:max="100"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/chapterNameTextView"
            tools:progress="85" />

         <TextView
            android:id="@+id/progressCountTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBodySmall"
            android:textColor="@color/text_secondary"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/chapterProgressBar"
            tools:text="17/20問" />

        <TextView
            android:id="@+id/progress_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:layout_marginEnd="8dp"
            android:text="0 / 0 (0%)"
            android:textColor="?attr/colorOnSurfaceVariant" 
            android:textAppearance="?attr/textAppearanceBodyMedium"
            app:layout_constraintTop_toBottomOf="@id/progressCountTextView"
            app:layout_constraintEnd_toEndOf="parent" />

    </androidx.constraintlayout.widget.ConstraintLayout>

</com.google.android.material.card.MaterialCardView>

================
File: app/src/main/res/values-night/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- **** Generated Color Scheme (Lavender Based - Primary: #7C5EAA) - Dark **** -->
    <color name="md_theme_primary">#DEC1FF</color>
    <color name="md_theme_onPrimary">#4A2A78</color>
    <color name="md_theme_primaryContainer">#61428F</color>
    <color name="md_theme_onPrimaryContainer">#F1DEFF</color>
    <color name="md_theme_secondary">#CEC1DA</color>
    <color name="md_theme_onSecondary">#352D40</color>
    <color name="md_theme_secondaryContainer">#4C4357</color>
    <color name="md_theme_onSecondaryContainer">#EBDDF7</color>
    <color name="md_theme_tertiary">#F0B8C5</color>
    <color name="md_theme_onTertiary">#4A2530</color>
    <color name="md_theme_tertiaryContainer">#633B46</color>
    <color name="md_theme_onTertiaryContainer">#FFD9E1</color>
    <color name="md_theme_error">#FFB4AB</color>
    <color name="md_theme_onError">#690005</color>
    <color name="md_theme_errorContainer">#93000A</color>
    <color name="md_theme_onErrorContainer">#FFDAD6</color>
    <color name="md_theme_background">#141218</color>
    <color name="md_theme_onBackground">#E7E0E8</color>
    <color name="md_theme_surface">#141218</color>
    <color name="md_theme_onSurface">#E7E0E8</color>
    <color name="md_theme_surfaceVariant">#4A454E</color>
    <color name="md_theme_onSurfaceVariant">#CCC4CF</color>
    <color name="md_theme_outline">#958E99</color>
    <color name="md_theme_inverseOnSurface">#1D1B1E</color>
    <color name="md_theme_inverseSurface">#E7E0E8</color>
    <color name="md_theme_inversePrimary">#7C5EAA</color>
    <color name="md_theme_surfaceTint">#DEC1FF</color>
    <color name="md_theme_outlineVariant">#4A454E</color>
    <color name="md_theme_scrim">#000000</color>

    <!-- 追加: Surface Containers for Dark Theme -->
    <color name="md_theme_dark_surfaceContainer">#211F26</color>      <!-- Surface + 4dp elevation -->
    <color name="md_theme_dark_surfaceContainerHigh">#2C2930</color>     <!-- Surface + 8dp elevation -->
    <color name="md_theme_dark_surfaceContainerHighest">#37343B</color>  <!-- Surface + 12dp elevation -->

    <!-- **** Theme: Terracotta (M3 Updated) - Dark **** -->
    <color name="terracotta_theme_primary">#FFB68A</color>
    <color name="terracotta_theme_onPrimary">#622800</color>
    <color name="terracotta_theme_primaryContainer">#8A3B00</color>
    <color name="terracotta_theme_onPrimaryContainer">#FFDBC8</color>
    <color name="terracotta_theme_secondary">#E7BDB0</color>
    <color name="terracotta_theme_onSecondary">#442A1E</color>
    <color name="terracotta_theme_secondaryContainer">#5D4034</color>
    <color name="terracotta_theme_onSecondaryContainer">#FFDBC8</color>
    <color name="terracotta_theme_tertiary">#D4C78E</color>
    <color name="terracotta_theme_onTertiary">#383105</color>
    <color name="terracotta_theme_tertiaryContainer">#4F471A</color>
    <color name="terracotta_theme_onTertiaryContainer">#F0E3A8</color>
    <color name="terracotta_theme_error">#FFB4AB</color>
    <color name="terracotta_theme_onError">#690005</color>
    <color name="terracotta_theme_errorContainer">#93000A</color>
    <color name="terracotta_theme_onErrorContainer">#FFDAD6</color>
    <color name="terracotta_theme_background">#201A17</color>
    <color name="terracotta_theme_onBackground">#EDE0DA</color>
    <color name="terracotta_theme_surface">#201A17</color>
    <color name="terracotta_theme_onSurface">#EDE0DA</color>
    <color name="terracotta_theme_surfaceVariant">#53433C</color>
    <color name="terracotta_theme_onSurfaceVariant">#D8C2B9</color>
    <color name="terracotta_theme_outline">#A08C83</color>
    <color name="terracotta_theme_inverseOnSurface">#201A17</color>
    <color name="terracotta_theme_inverseSurface">#EDE0DA</color>
    <color name="terracotta_theme_inversePrimary">#B55100</color>
    <color name="terracotta_theme_surfaceTint">#FFB68A</color>
    <color name="terracotta_theme_outlineVariant">#53433C</color>
    <color name="terracotta_theme_scrim">#000000</color>

    <!-- **** Theme: Forest Green (M3 Updated) - Dark **** -->
    <color name="forest_theme_primary">#7ADC71</color>
    <color name="forest_theme_onPrimary">#003A05</color>
    <color name="forest_theme_primaryContainer">#00530A</color>
    <color name="forest_theme_onPrimaryContainer">#96FA8B</color>
    <color name="forest_theme_secondary">#BACBAD</color>
    <color name="forest_theme_onSecondary">#263422</color>
    <color name="forest_theme_secondaryContainer">#3C4B38</color>
    <color name="forest_theme_onSecondaryContainer">#D6E8CD</color>
    <color name="forest_theme_tertiary">#A0CFD1</color>
    <color name="forest_theme_onTertiary">#00373A</color>
    <color name="forest_theme_tertiaryContainer">#1E4D51</color>
    <color name="forest_theme_onTertiaryContainer">#BCEBED</color>
    <color name="forest_theme_error">#FFB4AB</color>
    <color name="forest_theme_onError">#690005</color>
    <color name="forest_theme_errorContainer">#93000A</color>
    <color name="forest_theme_onErrorContainer">#FFDAD6</color>
    <color name="forest_theme_background">#1A1C19</color>
    <color name="forest_theme_onBackground">#E2E3DD</color>
    <color name="forest_theme_surface">#1A1C19</color>
    <color name="forest_theme_onSurface">#E2E3DD</color>
    <color name="forest_theme_surfaceVariant">#434840</color>
    <color name="forest_theme_onSurfaceVariant">#C3C8BD</color>
    <color name="forest_theme_outline">#8D9388</color>
    <color name="forest_theme_inverseOnSurface">#1A1C19</color>
    <color name="forest_theme_inverseSurface">#E2E3DD</color>
    <color name="forest_theme_inversePrimary">#006E10</color>
    <color name="forest_theme_surfaceTint">#7ADC71</color>
    <color name="forest_theme_outlineVariant">#434840</color>
    <color name="forest_theme_scrim">#000000</color>

    <!-- **** Theme: Indigo (M3 Updated) - Dark **** -->
    <color name="indigo_theme_primary">#BAC3FF</color>
    <color name="indigo_theme_onPrimary">#00218C</color>
    <color name="indigo_theme_primaryContainer">#213AAA</color>
    <color name="indigo_theme_onPrimaryContainer">#DEE0FF</color>
    <color name="indigo_theme_secondary">#C4C5DD</color>
    <color name="indigo_theme_onSecondary">#2D2F42</color>
    <color name="indigo_theme_secondaryContainer">#444559</color>
    <color name="indigo_theme_onSecondaryContainer">#E0E0F9</color>
    <color name="indigo_theme_tertiary">#EBB8D6</color>
    <color name="indigo_theme_onTertiary">#45263C</color>
    <color name="indigo_theme_tertiaryContainer">#5E3C53</color>
    <color name="indigo_theme_onTertiaryContainer">#FFD8EB</color>
    <color name="indigo_theme_error">#FFB4AB</color>
    <color name="indigo_theme_onError">#690005</color>
    <color name="indigo_theme_errorContainer">#93000A</color>
    <color name="indigo_theme_onErrorContainer">#FFDAD6</color>
    <color name="indigo_theme_background">#1B1B1F</color>
    <color name="indigo_theme_onBackground">#E5E1E6</color>
    <color name="indigo_theme_surface">#1B1B1F</color>
    <color name="indigo_theme_onSurface">#E5E1E6</color>
    <color name="indigo_theme_surfaceVariant">#46464F</color>
    <color name="indigo_theme_onSurfaceVariant">#C7C5D0</color>
    <color name="indigo_theme_outline">#91909A</color>
    <color name="indigo_theme_inverseOnSurface">#1B1B1F</color>
    <color name="indigo_theme_inverseSurface">#E5E1E6</color>
    <color name="indigo_theme_inversePrimary">#3D55CC</color>
    <color name="indigo_theme_surfaceTint">#BAC3FF</color>
    <color name="indigo_theme_outlineVariant">#46464F</color>
    <color name="indigo_theme_scrim">#000000</color>

    <!-- **** Theme: Slate (M3 Updated) - Dark **** -->
    <color name="slate_theme_primary">#B3CAD6</color>
    <color name="slate_theme_onPrimary">#1A3541</color>
    <color name="slate_theme_primaryContainer">#324C58</color>
    <color name="slate_theme_onPrimaryContainer">#CFE6F3</color>
    <color name="slate_theme_secondary">#B5C9D7</color>
    <color name="slate_theme_onSecondary">#20333E</color>
    <color name="slate_theme_secondaryContainer">#374955</color>
    <color name="slate_theme_onSecondaryContainer">#D1E5F4</color>
    <color name="slate_theme_tertiary">#C8C3E9</color>
    <color name="slate_theme_onTertiary">#302E4D</color>
    <color name="slate_theme_tertiaryContainer">#474465</color>
    <color name="slate_theme_onTertiaryContainer">#E5DFFF</color>
    <color name="slate_theme_error">#FFB4AB</color>
    <color name="slate_theme_onError">#690005</color>
    <color name="slate_theme_errorContainer">#93000A</color>
    <color name="slate_theme_onErrorContainer">#FFDAD6</color>
    <color name="slate_theme_background">#191C1E</color>
    <color name="slate_theme_onBackground">#E1E3E5</color>
    <color name="slate_theme_surface">#191C1E</color>
    <color name="slate_theme_onSurface">#E1E3E5</color>
    <color name="slate_theme_surfaceVariant">#40484C</color>
    <color name="slate_theme_onSurfaceVariant">#C0C8CD</color>
    <color name="slate_theme_outline">#8A9297</color>
    <color name="slate_theme_inverseOnSurface">#191C1E</color>
    <color name="slate_theme_inverseSurface">#E1E3E5</color>
    <color name="slate_theme_inversePrimary">#4A6472</color>
    <color name="slate_theme_surfaceTint">#B3CAD6</color>
    <color name="slate_theme_outlineVariant">#40484C</color>
    <color name="slate_theme_scrim">#000000</color>

    <!-- **** Theme: Ocean Blue (M3 Updated) - Dark **** -->
    <color name="ocean_theme_primary">#7DD4E5</color>
    <color name="ocean_theme_onPrimary">#00363E</color>
    <color name="ocean_theme_primaryContainer">#004F5A</color>
    <color name="ocean_theme_onPrimaryContainer">#99F0FF</color>
    <color name="ocean_theme_secondary">#B0CBD0</color>
    <color name="ocean_theme_onSecondary">#1C3438</color>
    <color name="ocean_theme_secondaryContainer">#334A50</color>
    <color name="ocean_theme_onSecondaryContainer">#CCE7EC</color>
    <color name="ocean_theme_tertiary">#B9C6EA</color>
    <color name="ocean_theme_onTertiary">#25304B</color>
    <color name="ocean_theme_tertiaryContainer">#3B4763</color>
    <color name="ocean_theme_onTertiaryContainer">#DAE2FF</color>
    <color name="ocean_theme_error">#FFB4AB</color>
    <color name="ocean_theme_onError">#690005</color>
    <color name="ocean_theme_errorContainer">#93000A</color>
    <color name="ocean_theme_onErrorContainer">#FFDAD6</color>
    <color name="ocean_theme_background">#191C1D</color>
    <color name="ocean_theme_onBackground">#E0E3E3</color>
    <color name="ocean_theme_surface">#191C1D</color>
    <color name="ocean_theme_onSurface">#E0E3E3</color>
    <color name="ocean_theme_surfaceVariant">#3F484A</color>
    <color name="ocean_theme_onSurfaceVariant">#BFC8CA</color>
    <color name="ocean_theme_outline">#899295</color>
    <color name="ocean_theme_inverseOnSurface">#191C1D</color>
    <color name="ocean_theme_inverseSurface">#E0E3E3</color>
    <color name="ocean_theme_inversePrimary">#006978</color>
    <color name="ocean_theme_surfaceTint">#7DD4E5</color>
    <color name="ocean_theme_outlineVariant">#3F484A</color>
    <color name="ocean_theme_scrim">#000000</color>

    <!-- **** Theme: Mint Green (M3 Updated) - Dark **** -->
    <color name="mint_theme_primary">#84D7CC</color>
    <color name="mint_theme_onPrimary">#003732</color>
    <color name="mint_theme_primaryContainer">#005048</color>
    <color name="mint_theme_onPrimaryContainer">#A0F4E8</color>
    <color name="mint_theme_secondary">#B1CCC6</color>
    <color name="mint_theme_onSecondary">#1C3531</color>
    <color name="mint_theme_secondaryContainer">#324B47</color>
    <color name="mint_theme_onSecondaryContainer">#CCE8E3</color>
    <color name="mint_theme_tertiary">#AFC6E0</color>
    <color name="mint_theme_onTertiary">#163248</color>
    <color name="mint_theme_tertiaryContainer">#2E4961</color>
    <color name="mint_theme_onTertiaryContainer">#CCE5FF</color>
    <color name="mint_theme_error">#FFB4AB</color>
    <color name="mint_theme_onError">#690005</color>
    <color name="mint_theme_errorContainer">#93000A</color>
    <color name="mint_theme_onErrorContainer">#FFDAD6</color>
    <color name="mint_theme_background">#191C1B</color>
    <color name="mint_theme_onBackground">#E0E3E2</color>
    <color name="mint_theme_surface">#191C1B</color>
    <color name="mint_theme_onSurface">#E0E3E2</color>
    <color name="mint_theme_surfaceVariant">#3F4947</color>
    <color name="mint_theme_onSurfaceVariant">#BFC9C6</color>
    <color name="mint_theme_outline">#899390</color>
    <color name="mint_theme_inverseOnSurface">#191C1B</color>
    <color name="mint_theme_inverseSurface">#E0E3E2</color>
    <color name="mint_theme_inversePrimary">#00897B</color>
    <color name="mint_theme_surfaceTint">#84D7CC</color>
    <color name="mint_theme_outlineVariant">#3F4947</color>
    <color name="mint_theme_scrim">#000000</color>

    <!-- **** Theme: Deep Purple (Placeholder - Dark) **** -->
    <color name="deep_purple_theme_primary">#B39DDB</color> <!-- Example Dark Primary -->
    <color name="deep_purple_theme_onPrimary">#311B92</color> <!-- Example Dark OnPrimary -->
    <color name="deep_purple_theme_surface">#2C1D3C</color> <!-- Example Dark Surface -->
    <!-- 他の Deep Purple ダーク色定義も必要に応じて追加 -->

    <!-- **** Theme: Orange (Placeholder - Dark) **** -->
    <color name="orange_theme_primary">#FFCC80</color> <!-- Example Dark Primary -->
    <color name="orange_theme_onPrimary">#5F3E00</color> <!-- Example Dark OnPrimary -->
    <color name="orange_theme_surface">#3E2723</color> <!-- Example Dark Surface -->
    <!-- 他の Orange ダーク色定義も必要に応じて追加 -->

    <!-- **** Theme: Pink (Placeholder - Dark) **** -->
    <color name="pink_theme_primary">#F48FB1</color> <!-- Example Dark Primary -->
    <color name="pink_theme_onPrimary">#880E4F</color> <!-- Example Dark OnPrimary -->
    <color name="pink_theme_surface">#3D1428</color> <!-- Example Dark Surface -->
    <!-- 他の Pink ダーク色定義も必要に応じて追加 -->

    <!-- **** Theme: Teal (Placeholder - Dark) **** -->
    <color name="teal_theme_primary">#80CBC4</color> <!-- Example Dark Primary -->
    <color name="teal_theme_onPrimary">#004D40</color> <!-- Example Dark OnPrimary -->
    <color name="teal_theme_surface">#173130</color> <!-- Example Dark Surface -->
    <!-- 他の Teal ダーク色定義も必要に応じて追加 -->

    <!-- Custom Dark Colors (Ensure consistency) -->
    <color name="drawer_background_dark_semi_transparent">#CC141218</color>
    <color name="card_background_dark_semi_transparent">#B332303E</color>
    <color name="card_background_dark_desaturated">#B332303E</color>

    <!-- Quiz Choice Dark Colors (Removed - handled by selectors and theme attributes) -->

</resources>

================
File: app/src/main/res/values/dimens.xml
================
<resources>
    <dimen name="weekly_goal_bar_max_height">80dp</dimen>

    <!-- Default screen margins, per the Android Design guidelines. -->
    <dimen name="activity_horizontal_margin">16dp</dimen>
    <dimen name="activity_vertical_margin">16dp</dimen>

    <!-- Nav Drawer dimensions -->
    <dimen name="nav_header_vertical_spacing">8dp</dimen>
    <dimen name="nav_header_height">176dp</dimen>

    <dimen name="category_item_vertical_spacing">16dp</dimen>
</resources>

================
File: app/src/main/res/xml/preferences.xml
================
<?xml version="1.0" encoding="utf-8"?>
<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <PreferenceCategory
        app:title="@string/pref_category_appearance">

        <ListPreference
            app:key="theme_preference"
            app:title="@string/pref_title_theme"
            app:summary="%s"
            app:entries="@array/theme_entries"
            app:entryValues="@array/theme_values"
            app:defaultValue="default"
            app:layout="@layout/custom_preference_summary_white" />

    </PreferenceCategory>

    <PreferenceCategory
        app:title="@string/pref_category_general">

        <SwitchPreferenceCompat
            app:key="notification_preference"
            app:title="@string/pref_title_notification"
            app:summaryOn="@string/pref_summary_notification_on"
            app:summaryOff="@string/pref_summary_notification_off"
            app:defaultValue="true"
            app:layout="@layout/custom_preference_summary_white"/>

        <Preference
            app:key="privacy_policy_preference"
            app:title="@string/pref_title_privacy_policy"
            app:summary="@string/pref_summary_privacy_policy"
            app:layout="@layout/custom_preference_summary_white"/>

        <Preference
            app:key="version_preference"
            app:title="@string/pref_title_version"
            app:summary="@string/version_format"
            app:layout="@layout/custom_preference_summary_white"/>

    </PreferenceCategory>

    <PreferenceCategory
        app:key="account_category"
        app:title="アカウント">

        <Preference
            app:key="logout_preference"
            app:title="ログアウト"
            app:summary="現在のアカウントからログアウトします"
            app:iconSpaceReserved="false"
            app:layout="@layout/custom_preference_summary_white"/>

    </PreferenceCategory>

</PreferenceScreen>

================
File: gradle.properties
================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 --add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

# SDKのバージョン警告を抑制
android.suppressUnsupportedCompileSdk=34

# JDKの設定 (IDEの設定を優先するためコメントアウト)
# org.gradle.java.home=C:\\Program Files\\Android\\Android Studio\\jbr

# Build features
android.nonFinalResIds=false

# Gradle version
org.gradle.version=8.1

# Room
android.room.incremental=true
android.room.expandProjection=true

================
File: gradle/libs.versions.toml
================
[versions]
agp = "8.7.2"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
appcompat = "1.7.0"
material = "1.12.0"
activity = "1.10.1"
constraintlayout = "2.2.1"
coreKtx = "1.15.0"
kotlin = "1.9.24"
navigationFragmentKtx = "2.8.9"
navigationUiKtx = "2.8.9"

[libraries]
junit = { group = "junit", name = "junit", version.ref = "junit" }
ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }
activity = { group = "androidx.activity", name = "activity", version.ref = "activity" }
constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
navigation-fragment-ktx = { group = "androidx.navigation", name = "navigation-fragment-ktx", version.ref = "navigationFragmentKtx" }
navigation-ui-ktx = { group = "androidx.navigation", name = "navigation-ui-ktx", version.ref = "navigationUiKtx" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

================
File: app/src/main/java/com/example/contentful_javasilver/AsyncHelperCoroutines.kt
================
package com.example.contentful_javasilver

import com.contentful.java.cda.CDAEntry
import com.contentful.java.cda.CDAClient
import kotlinx.coroutines.*
import java.util.concurrent.CompletableFuture
import java.io.IOException
import java.net.SocketTimeoutException
import java.net.UnknownHostException
import com.example.contentful_javasilver.data.QuizDatabase
import com.example.contentful_javasilver.data.QuizEntity
import com.example.contentful_javasilver.data.QuizDao
import kotlin.Unit
import android.util.Log

class AsyncHelperCoroutines(private val api: ContentfulGetApi?) {

    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    // エラーメッセージの定数
    companion object {
        private const val ERROR_NETWORK = "ネットワークエラーが発生しました。インターネット接続を確認してください。"
        private const val ERROR_TIMEOUT = "通信がタイムアウトしました。もう一度お試しください。"
        private const val ERROR_SERVER = "サーバーエラーが発生しました。しばらく時間をおいて再度お試しください。"
        private const val ERROR_UNKNOWN = "予期せぬエラーが発生しました。"
    }

    // エラーハンドリング用の関数
    private fun handleError(e: Exception): String {
        return when (e) {
            is IOException -> ERROR_NETWORK
            is SocketTimeoutException -> ERROR_TIMEOUT
            is UnknownHostException -> ERROR_NETWORK
            else -> ERROR_UNKNOWN
        }
    }

    // 🔹 コールバック方式（Java から簡単に呼び出せる）
    fun fetchEntriesAsync(contentType: String, callback: (List<CDAEntry>) -> Unit, errorCallback: (String) -> Unit) {
        requireNotNull(api) { "API instance is required for this operation" }
        scope.launch {
            try {
                val result = api?.fetchEntries(contentType)?.items()?.map { it as CDAEntry } ?: emptyList()
                withContext(Dispatchers.Main) {
                    callback(result)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    errorCallback(handleError(e))
                }
            }
        }
    }

    // 🔹 CompletableFuture 方式（Java からも扱いやすい）
    fun fetchEntriesFuture(contentType: String): CompletableFuture<List<CDAEntry>> {
        requireNotNull(api) { "API instance is required for this operation" }
        val future = CompletableFuture<List<CDAEntry>>()
        scope.launch {
            try {
                val result = api?.fetchEntries(contentType)?.items()?.map { it as CDAEntry } ?: emptyList()
                future.complete(result)
            } catch (e: Exception) {
                e.printStackTrace()
                future.completeExceptionally(e)
            }
        }
        return future
    }

    // 🔹 特定のエントリを非同期取得（コールバック）
    fun fetchEntryByIdAsync(entryId: String, callback: (CDAEntry?) -> Unit, errorCallback: (String) -> Unit) {
        requireNotNull(api) { "API instance is required for this operation" }
        scope.launch {
            try {
                val result = api?.fetchEntryById(entryId)
                withContext(Dispatchers.Main) {
                    callback(result)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    errorCallback(handleError(e))
                    callback(null)
                }
            }
        }
    }

    // 🔹 CompletableFuture 方式で特定のエントリを取得
    fun fetchEntryByIdFuture(entryId: String): CompletableFuture<CDAEntry?> {
        requireNotNull(api) { "API instance is required for this operation" }
        val future = CompletableFuture<CDAEntry?>()
        scope.launch {
            try {
                val result = api?.fetchEntryById(entryId)
                future.complete(result)
            } catch (e: Exception) {
                e.printStackTrace()
                future.completeExceptionally(e)
            }
        }
        return future
    }

    // 🔹 データベース操作用のメソッド
    fun insertQuizEntitiesAsync(db: QuizDatabase, entities: List<QuizEntity>, onSuccess: Function0<Unit>, onError: Function1<String, Unit>) {
        scope.launch {
            try {
                db.quizDao().insertAll(entities)
                withContext(Dispatchers.Main) {
                    onSuccess.invoke()
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("データベースの更新に失敗しました")
                }
            }
        }
    }

    fun getRandomQuizzesAsync(db: QuizDatabase, count: Int, onSuccess: Function1<List<QuizEntity>, Unit>, onError: Function1<String, Unit>) {
        scope.launch {
            try {
                val quizzes = db.quizDao().getRandomQuizzesSync(count)
                withContext(Dispatchers.Main) {
                    onSuccess.invoke(quizzes)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("クイズの取得に失敗しました")
                }
            }
        }
    }

    fun cleanup() {
        scope.cancel()
    }

    fun loadCategoriesAsync(
        chapterNumber: Int,
        quizDao: QuizDao,
        onSuccess: Function1<List<String>, Unit>,
        onError: Function1<String, Unit>
    ) {
        scope.launch {
            try {
                val quizzes = quizDao.getAllQuizzes()
                val categories = mutableListOf<String>()
                for (quiz in quizzes) {
                    if (quiz.chapter == chapterNumber.toString() && !categories.contains(quiz.category)) {
                        categories.add(quiz.category)
                    }
                }
                withContext(Dispatchers.Main) {
                    onSuccess.invoke(categories)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("カテゴリーの読み込みに失敗しました")
                }
            }
        }
    }

    fun getQuizCountForCategoryAsync(
        category: String,
        quizDao: QuizDao,
        onSuccess: Function1<Int, Unit>,
        onError: Function1<String, Unit>
    ) {
        scope.launch {
            try {
                val quizzes = quizDao.getAllQuizzes()
                val count = quizzes.count { quiz -> quiz.category == category }
                withContext(Dispatchers.Main) {
                    onSuccess.invoke(count)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("問題数の取得に失敗しました")
                }
            }
        }
    }

    /**
     * ContentfulからすべてのデータをFetchするメソッド
     * 進捗状況をレポートする機能付き
     */
    fun fetchAllEntriesAsync(
        contentType: String,
        onProgress: (Int, String) -> Unit,
        onSuccess: (List<CDAEntry>) -> Unit,
        onError: (String) -> Unit
    ) {
        requireNotNull(api) { "API instance is required for this operation" }
        scope.launch {
            try {
                withContext(Dispatchers.Main) {
                    onProgress(0, "Contentfulに接続中...")
                }
                
                // 一度に大量のデータを取得（最大1000件）
                val client = api.getClient() ?: throw IllegalStateException("Contentful Client is null")
                
                withContext(Dispatchers.Main) {
                    onProgress(20, "データをダウンロード中...")
                }
                
                // クエリを構築して実行
                val query = client.fetch(CDAEntry::class.java)
                    .withContentType(contentType)
                    .where("limit", "1000")  // limitをパラメータとして設定
                
                val response = query.all()
                val entries = response.items().filterIsInstance<CDAEntry>()
                
                withContext(Dispatchers.Main) {
                    onProgress(80, "ダウンロード完了: ${entries.size}件のデータ")
                    onSuccess(entries)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                val errorMsg = handleError(e)
                Log.e("AsyncHelper", "Fetch all entries error: $errorMsg", e)
                withContext(Dispatchers.Main) {
                    onError(errorMsg)
                }
            }
        }
    }

}

================
File: app/src/main/java/com/example/contentful_javasilver/data/QuizDatabase.java
================
package com.example.contentful_javasilver.data;

import android.content.Context;

import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import androidx.room.TypeConverters;
import androidx.room.migration.Migration; // Add import
import androidx.sqlite.db.SupportSQLiteDatabase; // Add import
import androidx.annotation.NonNull; // Add import

/**
 * QuizデータベースのRoomデータベースクラス
 */
@Database(entities = {QuizEntity.class, QuizHistory.class}, version = 14, exportSchema = false) // Increment version to 14
@TypeConverters({QuizEntity.Converters.class})
public abstract class QuizDatabase extends RoomDatabase {
    private static volatile QuizDatabase INSTANCE;

    // Migration from version 13 to 14: Add isBookmarked column
    static final Migration MIGRATION_13_14 = new Migration(13, 14) {
        @Override
        public void migrate(@NonNull SupportSQLiteDatabase database) {
            database.execSQL("ALTER TABLE quizzes ADD COLUMN isBookmarked INTEGER NOT NULL DEFAULT 0");
        }
    };

    /**
     * QuizDaoを取得するための抽象メソッド
     * @return QuizDaoインスタンス
     */
    public abstract QuizDao quizDao();

    /**
     * データベースインスタンスを取得（シングルトンパターン）
     * @param context アプリケーションコンテキスト
     * @return QuizDatabaseインスタンス
     */
    public static QuizDatabase getDatabase(Context context) {
        if (INSTANCE == null) {
            synchronized (QuizDatabase.class) {
                if (INSTANCE == null) {
                    // データベースインスタンスを作成
                    INSTANCE = Room.databaseBuilder(
                            context.getApplicationContext(),
                            QuizDatabase.class,
                            "quiz_database")
                            // Add migration from 13 to 14
                            .addMigrations(MIGRATION_13_14)
                            .build();
                }
            }
        }
        return INSTANCE;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/QuizFragment.kt
================
package com.example.contentful_javasilver

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuInflater
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.activity.OnBackPressedCallback
import androidx.compose.ui.platform.ComposeView
import androidx.compose.ui.platform.ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed
import androidx.core.content.ContextCompat
import androidx.core.graphics.drawable.DrawableCompat
import androidx.core.view.MenuHost
import androidx.core.view.MenuProvider
import androidx.fragment.app.Fragment
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import com.example.contentful_javasilver.data.QuizEntity
import com.example.contentful_javasilver.ui.QuizScreen
import com.example.contentful_javasilver.ui.theme.ContentfulJavasilverTheme
import com.example.contentful_javasilver.viewmodels.QuizViewModel

class QuizFragment : Fragment() {
    private lateinit var viewModel: QuizViewModel
    private var initialQid: String? = null
    private var isRandomMode = false
    private lateinit var menuHost: MenuHost

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d(TAG, "onCreate: Start")
        viewModel = ViewModelProvider(requireActivity())[QuizViewModel::class.java]
        Log.d(TAG, "onCreate: ViewModelProvider finished")
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        Log.d(TAG, "onCreateView: Start")
        return ComposeView(requireContext()).apply {
            setViewCompositionStrategy(DisposeOnViewTreeLifecycleDestroyed)
            Log.d(TAG, "onCreateView: Setting content...")
            setContent {
                ContentfulJavasilverTheme {
                    QuizScreen(viewModel, isRandomMode)
                        }
            }
            Log.d(TAG, "onCreateView: Set content finished")
        }
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Log.d(TAG, "onViewCreated: Start")

        menuHost = requireActivity()
        setupMenu()
        setupObservers()
        Log.d(TAG, "onViewCreated: Basic setup finished")

        Log.d(TAG, "onViewCreated: Checking arguments...")
        arguments?.let { bundle ->
            Log.d(TAG, "onViewCreated: arguments bundle is NOT null, processing...")
            try {
                Log.d(TAG, "onViewCreated: Calling QuizFragmentArgs.fromBundle()")
                val args = QuizFragmentArgs.fromBundle(bundle)
                Log.d(TAG, "onViewCreated: QuizFragmentArgs.fromBundle() successful")
                initialQid = args.qid
                isRandomMode = args.isRandomMode
                Log.d(TAG, "Arguments received - qid: $initialQid, isRandomMode: $isRandomMode")
            } catch (e: Exception) {
                 Log.e(TAG, "onViewCreated: Error parsing arguments from bundle", e)
            }
        } ?: run {
            Log.w(TAG, "onViewCreated: arguments bundle IS null")
        }

        Log.d(TAG, "onViewCreated: Arguments processed. InitialQid: $initialQid, isRandomMode: $isRandomMode")

        // Refined loading logic: Prioritize isRandomMode
        if (isRandomMode) {
            Log.d(TAG, "Random mode is ON, loading initial random quiz regardless of qid ($initialQid).")
            viewModel.loadRandomQuizId()
        } else if (initialQid?.isNotEmpty() == true) {
            Log.d(TAG, "Loading quiz by initial QID: $initialQid")
            viewModel.loadQuizByQid(initialQid)
        } else {
            Log.w(TAG, "Non-random mode and no initial QID. Loading first quiz (or handle error?).")
            // Decide default behavior: load random, load first, or show error?
            // For now, loading random as a fallback.
            viewModel.loadRandomQuizId() // Or show an error message
        }
        Log.d(TAG, "onViewCreated: Finished loading logic.")
        
        // 戻るボタンのカスタム処理を追加
        requireActivity().onBackPressedDispatcher.addCallback(viewLifecycleOwner, object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                // 解いた問題IDを取得
                val lastSolvedId = viewModel.lastSolvedQuizId.value
                
                // 問題一覧へのナビゲーション引数を設定
                val bundle = Bundle().apply {
                    putString("lastSolvedQuizId", lastSolvedId)
                }
                
                // 問題一覧画面に戻る
                findNavController().navigate(R.id.action_quizFragment_to_problemListFragment, bundle)
                
                // 必要に応じて、このコールバックを無効化することもできます
                // isEnabled = false
            }
        })
    }

    private fun setupObservers() {
        viewModel.currentQuiz.observe(viewLifecycleOwner) { quiz: QuizEntity? ->
            Log.d(TAG, "Observer received quiz update for menu invalidation: ${quiz?.qid}, Bookmarked: ${quiz?.isBookmarked}")
            menuHost.invalidateMenu()
        }

        viewModel.errorMessage.observe(viewLifecycleOwner) { error: String? ->
            if (error?.isNotEmpty() == true) {
                Log.e(TAG, "Error message observed: $error")
                Toast.makeText(requireContext(), error, Toast.LENGTH_LONG).show()
            }
        }

        viewModel.isLoading.observe(viewLifecycleOwner) { isLoading: Boolean ->
            Log.d(TAG, "Loading state changed: $isLoading")
        }
    }

    private fun setupMenu() {
        menuHost.addMenuProvider(object : MenuProvider {
            override fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) {
                menuInflater.inflate(R.menu.quiz_menu, menu)
                Log.d(TAG, "MenuProvider: onCreateMenu called")
    }

            override fun onPrepareMenu(menu: Menu) {
        val bookmarkItem = menu.findItem(R.id.action_bookmark)
                val currentQuiz = viewModel.currentQuiz.value
                Log.d(TAG, "MenuProvider: onPrepareMenu called, currentQuiz: ${currentQuiz?.qid}, bookmarked: ${currentQuiz?.isBookmarked}")

        bookmarkItem?.let { item ->
            if (currentQuiz != null) {
                item.isVisible = true
                        val isBookmarked = currentQuiz.isBookmarked
                        val iconDrawableId = if (isBookmarked) {
                            R.drawable.ic_bookmark_filled
                } else {
                            R.drawable.ic_bookmark_border_24dp
                }
                val rawDrawable = ContextCompat.getDrawable(requireContext(), iconDrawableId)
                if (rawDrawable != null) {
                    val wrappedDrawable = DrawableCompat.wrap(rawDrawable).mutate()
                    DrawableCompat.setTint(wrappedDrawable, ContextCompat.getColor(requireContext(), android.R.color.white))
                    item.icon = wrappedDrawable
                }
                        item.title = if (isBookmarked) "ブックマーク解除" else "ブックマーク追加"
            } else {
                item.isVisible = false
            }
                } ?: Log.w(TAG, "MenuProvider: Bookmark menu item not found in onPrepareMenu")
    }

            override fun onMenuItemSelected(menuItem: MenuItem): Boolean {
                return when (menuItem.itemId) {
            R.id.action_bookmark -> {
                viewModel.currentQuiz.value?.let { currentQuiz ->
                            Log.d(TAG, "MenuProvider: Bookmark menu item clicked for QID: ${currentQuiz.qid}")
                    viewModel.toggleBookmarkStatus(currentQuiz)
                    true
                } ?: run {
                            Log.w(TAG, "MenuProvider: Bookmark clicked but current quiz is null.")
                    Toast.makeText(requireContext(), "クイズを読み込めません", Toast.LENGTH_SHORT).show()
                    false
            }
        }
                    else -> false
                }
        }
        }, viewLifecycleOwner, Lifecycle.State.RESUMED)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        Log.d(TAG, "onDestroyView called")
    }

    companion object {
        private const val TAG = "QuizFragment"
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/SettingsFragment.java
================
package com.example.contentful_javasilver;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.util.Log;

import androidx.annotation.Nullable;
import androidx.navigation.NavController;
import androidx.navigation.fragment.NavHostFragment;
import androidx.preference.ListPreference;
import androidx.preference.Preference;
import androidx.preference.PreferenceFragmentCompat;
import androidx.preference.PreferenceManager;
import androidx.preference.SwitchPreferenceCompat;

import com.google.firebase.auth.FirebaseAuth;

public class SettingsFragment extends PreferenceFragmentCompat implements SharedPreferences.OnSharedPreferenceChangeListener {

    private static final String TAG = "SettingsFragment";
    public static final String KEY_PREF_THEME = "theme_preference";
    public static final String KEY_PREF_NOTIFICATION = "notification_preference";
    public static final String KEY_PREF_PRIVACY_POLICY = "privacy_policy_preference";
    public static final String KEY_PREF_VERSION = "version_preference";
    public static final String KEY_PREF_LOGOUT = "logout_preference";

    private SharedPreferences sharedPreferences;
    private FirebaseAuth mAuth;

    @Override
    public void onCreatePreferences(@Nullable Bundle savedInstanceState, @Nullable String rootKey) {
        setPreferencesFromResource(R.xml.preferences, rootKey);
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(requireContext());
        mAuth = FirebaseAuth.getInstance();

        // Initialize summaries and listeners
        updateVersionSummary();
        setupPrivacyPolicyLink();
        setupLogoutPreference();
        updateThemeSummary(sharedPreferences.getString(KEY_PREF_THEME, "default"));

        // TODO: Add listener for notification switch if specific action is needed on change
        // SwitchPreferenceCompat notificationPref = findPreference(KEY_PREF_NOTIFICATION);
        // if (notificationPref != null) {
        //     // Add listener logic here
        // }
    }

    private void updateVersionSummary() {
        Preference versionPref = findPreference(KEY_PREF_VERSION);
        if (versionPref != null) {
            try {
                Context context = requireContext();
                PackageManager pm = context.getPackageManager();
                PackageInfo pInfo = pm.getPackageInfo(context.getPackageName(), 0);
                String version = pInfo.versionName;
                versionPref.setSummary(version); // Update summary directly
            } catch (PackageManager.NameNotFoundException e) {
                Log.e(TAG, "Could not get package version", e);
                versionPref.setSummary("N/A");
            }
        }
    }

    private void setupPrivacyPolicyLink() {
        Preference privacyPolicyPref = findPreference(KEY_PREF_PRIVACY_POLICY);
        if (privacyPolicyPref != null) {
            privacyPolicyPref.setOnPreferenceClickListener(preference -> {
                try {
                    NavController navController = NavHostFragment.findNavController(SettingsFragment.this);
                    // Ensure this action ID exists in your nav_graph.xml
                    navController.navigate(R.id.action_settingsFragment_to_privacyPolicyFragment);
                    return true;
                } catch (Exception e) {
                    Log.e(TAG, "Navigation to Privacy Policy failed", e);
                    // Optionally show a toast or message to the user
                    return false;
                }
            });
        }
    }

    private void setupLogoutPreference() {
        Preference logoutPref = findPreference(KEY_PREF_LOGOUT);
        if (logoutPref != null) {
            logoutPref.setOnPreferenceClickListener(preference -> {
                // Perform logout
                mAuth.signOut();

                // Navigate to Login screen
                try {
                    NavController navController = NavHostFragment.findNavController(SettingsFragment.this);
                    // Use the correct action ID from your nav_graph.xml
                    navController.navigate(R.id.action_settingsFragment_to_loginFragment);
                    return true;
                } catch (Exception e) {
                    Log.e(TAG, "Navigation to Login failed after logout", e);
                    // Optionally show a toast or message to the user
                    return false;
                }
            });
        }
    }

    private void updateThemeSummary(String themeValue) {
        ListPreference themePref = findPreference(KEY_PREF_THEME);
        if (themePref != null) {
            // Update the summary to show the currently selected theme name
            themePref.setSummary(themePref.getEntry());
        }
    }

    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, @Nullable String key) {
        if (key != null && key.equals(KEY_PREF_THEME)) {
            String themeValue = sharedPreferences.getString(KEY_PREF_THEME, "default");
            Log.d(TAG, "Theme preference changed to: " + themeValue);
            updateThemeSummary(themeValue);
            // Recreate the activity to apply the new theme
            requireActivity().recreate();
        }
        // Handle other preference changes if needed
        // else if (key.equals(KEY_PREF_NOTIFICATION)) { ... }
    }

    @Override
    public void onResume() {
        super.onResume();
        sharedPreferences.registerOnSharedPreferenceChangeListener(this);
        // Update summary in case the value was changed externally (less likely but good practice)
        updateThemeSummary(sharedPreferences.getString(KEY_PREF_THEME, "default"));
    }

    @Override
    public void onPause() {
        super.onPause();
        sharedPreferences.unregisterOnSharedPreferenceChangeListener(this);
    }

    // Remove onCreateView and onViewCreated as PreferenceFragmentCompat handles the view creation
}

================
File: app/src/main/java/com/example/contentful_javasilver/StartFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class StartFragment extends Fragment {

    private FirebaseAuth mAuth;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mAuth = FirebaseAuth.getInstance();
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_start, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        NavController navController = Navigation.findNavController(view);
        FirebaseUser currentUser = mAuth.getCurrentUser();

        if (currentUser != null) {
            Log.d("StartFragment", "User already logged in. Navigating to HomeFragment.");
            try {
                navController.navigate(R.id.action_start_to_home);
            } catch (IllegalArgumentException e) {
                Log.e("StartFragment", "Navigation to home failed after checking login state.", e);
                setupButtons(view, navController);
            }
        } else {
            Log.d("StartFragment", "User not logged in. Setting up buttons.");
            setupButtons(view, navController);
        }
    }

    private void setupButtons(@NonNull View view, @NonNull NavController navController) {
        Button loginButton = view.findViewById(R.id.loginButton);
        Button skipLoginButton = view.findViewById(R.id.skipLoginButton);

        loginButton.setOnClickListener(v -> {
            try {
                navController.navigate(R.id.action_start_to_login);
            } catch (IllegalArgumentException e) {
                Log.e("StartFragment", "Navigation to login failed", e);
            }
        });

        skipLoginButton.setOnClickListener(v -> {
            try {
                navController.navigate(R.id.action_start_to_loading);
            } catch (IllegalArgumentException e) {
                 Log.e("StartFragment", "Navigation to loading (skip login) failed", e);
            }
        });
    }
}

================
File: app/src/main/res/layout/fragment_start.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/start_fragment_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#2A254F"
    tools:context=".StartFragment">

    <TextView
        android:id="@+id/appTitle"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="32dp"
        android:gravity="center"
        android:text="@string/app_name"
        android:textColor="?attr/colorOnSurface"
        android:textSize="28sp"
        android:textStyle="bold"
        app:layout_constraintBottom_toTopOf="@+id/loginButton"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_chainStyle="packed" />

    <Button
        android:id="@+id/loginButton"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="32dp"
        android:layout_marginTop="64dp"
        android:text="@string/login"
        app:layout_constraintTop_toBottomOf="@id/appTitle"
        app:layout_constraintBottom_toTopOf="@id/skipLoginButton"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <Button
        android:id="@+id/skipLoginButton"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="32dp"
        android:layout_marginTop="16dp"
        android:text="@string/use_without_login"
        app:layout_constraintTop_toBottomOf="@id/loginButton"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/item_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingHorizontal="16dp"
    android:clickable="true"
    android:focusable="true"
    android:foreground="?attr/selectableItemBackground">

    <!-- カテゴリアイコン (lesson_icon_container に相当) -->
    <FrameLayout
        android:id="@+id/category_icon_container"
        android:layout_width="56dp"
        android:layout_height="56dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent">

        <ImageView
            android:id="@+id/category_icon"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:padding="6dp"
            android:src="@drawable/ic_folder_24"
            android:contentDescription="@string/category_icon_description" />

         <!-- 完了チェックマーク (lesson_icon_container の中) - 必要なら追加 -->
         <!-- <ImageView ... /> -->

    </FrameLayout>

    <!-- カテゴリ情報 (lesson_info に相当) -->
    <LinearLayout
        android:id="@+id/category_info_layout"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginStart="16dp"
        android:layout_marginBottom="12dp"
        app:layout_constraintStart_toEndOf="@id/category_icon_container"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@id/category_icon_container"
        app:layout_constraintBottom_toTopOf="@id/category_divider">

        <TextView
            android:id="@+id/category_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:textStyle="bold"
            android:textColor="#FFFFFF"
            tools:text="データ型" />

        <!-- category_description TextView をコメントアウト -->
        <!-- 
        <TextView
            android:id="@+id/category_description"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="14sp"
            android:textColor="#CCCCCC"
            android:layout_marginTop="4dp"
            tools:text="基本データ型と参照型" />
         -->

        <TextView
            android:id="@+id/category_progress"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="12sp"
            android:textColor="#AAAAAA"
            android:layout_marginTop="8dp"
            tools:text="3/10 Questions" />

    </LinearLayout>

    <!-- 区切り線 (chapter_divider に相当) -->
    <View
        android:id="@+id/category_divider"
        android:layout_width="0dp"
        android:layout_height="1dp"
        android:layout_marginTop="0dp"
        android:alpha="0.2"
        android:background="#FFFFFF"
        app:layout_constraintTop_toBottomOf="@id/category_info_layout"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toEndOf="@id/category_icon_container"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/menu/bottom_navigation_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/homeFragment"
        android:icon="@drawable/ic_home"
        android:title="ホーム" />
    <item
        android:id="@+id/chapterFragment"
        android:icon="@drawable/ic_chapter"
        android:title="チャプター" />

    <item
        android:id="@+id/navigation_history"
        android:icon="@drawable/ic_history"
        android:title="@string/title_history" />

    <item
        android:id="@+id/navigation_bookmark"
        android:icon="@drawable/ic_bookmark"
        android:title="@string/title_bookmark" />
</menu>

================
File: app/src/main/java/com/example/contentful_javasilver/BookmarkFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.NavController;
import androidx.navigation.NavOptions;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;
import com.example.contentful_javasilver.adapter.ProblemListAdapter;
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.viewmodels.BookmarkViewModel;

import java.util.ArrayList;
import java.util.List;

public class BookmarkFragment extends Fragment {

    private static final String TAG = "BookmarkFragment";
    private BookmarkViewModel bookmarkViewModel;
    private ProblemListAdapter adapter;
    private RecyclerView recyclerView;
    private NavController navController;
    private QuizDao quizDao;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        QuizDatabase db = QuizDatabase.getDatabase(requireActivity().getApplication());
        quizDao = db.quizDao();
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_bookmark, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        recyclerView = view.findViewById(R.id.bookmark_recycler_view);
        navController = Navigation.findNavController(view);

        adapter = new ProblemListAdapter(quiz -> {
            String qid = quiz.getQid();

            if (qid == null || qid.isEmpty()) {
                Log.e(TAG, "Invalid QID for navigation from bookmark: " + qid);
                Toast.makeText(getContext(), "問題IDが無効なため遷移できません", Toast.LENGTH_SHORT).show();
                return;
            }

            Log.d(TAG, "Navigating to QuizFragment with qid: " + qid);
            BookmarkFragmentDirections.ActionBookmarkFragmentToQuizFragment action =
                    BookmarkFragmentDirections.actionBookmarkFragmentToQuizFragment();
            
            Bundle args = new Bundle();
            args.putString("qid", qid);
            args.putBoolean("isRandomMode", false);
            
            try {
                 navController.navigate(action.getActionId(), args);
            } catch (Exception e) {
                Log.e(TAG, "Navigation to QuizFragment from Bookmark failed", e);
                Toast.makeText(getContext(), "画面遷移に失敗しました", Toast.LENGTH_SHORT).show();
            }
        }, quizDao);

        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        recyclerView.setAdapter(adapter);

        bookmarkViewModel = new ViewModelProvider(this).get(BookmarkViewModel.class);

        bookmarkViewModel.getBookmarkedQuizzes().observe(getViewLifecycleOwner(), quizzes -> {
            if (quizzes != null) {
                Log.d(TAG, "Observer received " + quizzes.size() + " bookmarked quizzes.");
            } else {
                Log.d(TAG, "Observer received null list.");
            }

            if (quizzes != null) {
                adapter.submitList(new ArrayList<>(quizzes));
                Log.d(TAG, "Submitted list to adapter.");
            } else {
                adapter.submitList(new ArrayList<>());
                Log.d(TAG, "Submitted empty list to adapter.");
            }
        });
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/ContentfulGetApi.java
================
package com.example.contentful_javasilver;

import com.contentful.java.cda.CDAArray;
import com.contentful.java.cda.CDAClient;
import com.contentful.java.cda.CDAEntry;


public class ContentfulGetApi {
    private static final String ACCESS_TOKEN = BuildConfig.CONTENTFUL_ACCESS_TOKEN;
    private static final String SPACE_ID = BuildConfig.CONTENTFUL_SPACE_ID;
    private CDAClient client;
    // コンストラクタでスペースIDとアクセストークンを受け取る
    public ContentfulGetApi(String spaceId, String accessToken) {
        this.client = CDAClient.builder()
                .setSpace(spaceId)
                .setToken(accessToken)
                .build();
    }
    // 特定のコンテンツタイプの全エントリを取得
    public CDAArray fetchEntries(String contentType) {
        return client
                .fetch(CDAEntry.class)
                .withContentType(contentType)
                .limit(1000)
                .all();
    }
    // 特定のエントリを取得するメソッド
    public CDAEntry fetchEntryById(String entryId) {
        return client.fetch(CDAEntry.class).one(entryId);
    }
    
    // CDAClientインスタンスを取得するメソッド
    public CDAClient getClient() {
        return this.client;
    }

    /**
     * "appData" コンテントタイプから "dataVersion" フィールドを取得します。
     * @return dataVersion の数値、取得できない場合は -1 を返します。
     */
    public int fetchDataVersion() {
        try {
            // "appData" というIDのエントリを取得
            CDAEntry appDataEntry = client.fetch(CDAEntry.class).one("appData");
            if (appDataEntry != null) {
                // "dataVersion" フィールドの値を取得
                // Contentfulでは数値はDoubleとして返ってくることが多いので、Doubleで受け取ってからIntに変換
                Double versionDouble = appDataEntry.getField("dataVersion");
                if (versionDouble != null) {
                    return versionDouble.intValue();
                }
            }
        } catch (Exception e) {
            // エラーログなどをここに追加することも検討
            e.printStackTrace();
        }
        // エントリが見つからない、フィールドがない、またはエラーが発生した場合
        return -1;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/ui/QuizScreen.kt
================
// app/src/main/java/com/example/contentful_javasilver/ui/QuizScreen.kt
package com.example.contentful_javasilver.ui

import android.util.Log
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.CheckBox
import androidx.compose.material.icons.filled.CheckBoxOutlineBlank
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.Cancel
import androidx.compose.material.icons.filled.RadioButtonChecked
import androidx.compose.material.icons.filled.RadioButtonUnchecked
import androidx.compose.material.ripple.rememberRipple
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.example.contentful_javasilver.data.QuizEntity
import com.example.contentful_javasilver.viewmodels.QuizViewModel
import androidx.compose.foundation.isSystemInDarkTheme // Import for theme check

@Composable
fun QuizScreen(
    quizViewModel: QuizViewModel,
    isRandomMode: Boolean // Receive isRandomMode flag
) {
    // Observe ViewModel LiveData using observeAsState
    val currentQuizFromState: QuizEntity? by quizViewModel.currentQuiz.observeAsState(initial = null)
    val isLoading: Boolean by quizViewModel.isLoading.observeAsState(initial = true) // Restore loading state observation
    val errorMessage: String? by quizViewModel.errorMessage.observeAsState(initial = null) // Restore error state observation

    // Observe ViewModel StateFlows using collectAsStateWithLifecycle
    val isAnswered: Boolean by quizViewModel.isAnswered.collectAsStateWithLifecycle()
    val userSelections: Set<Int> by quizViewModel.userSelections.collectAsStateWithLifecycle()
    val answerResult: QuizViewModel.AnswerResult? by quizViewModel.answerResult.collectAsStateWithLifecycle()

    // Define callbacks for actions
    val loadNext = { quizViewModel.loadNextQuiz(isRandomMode) }

    // Capture LiveData state value into a local stable variable for smart casting
    val currentQuiz = currentQuizFromState

    // --- Restore Original Code with when statement ---
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center // Center content like loading indicator
    ) {
        when {
            // Corrected: Only show loading indicator when isLoading is true
            isLoading -> {
                CircularProgressIndicator()
            }
            errorMessage != null -> {
                // Show error message
                Text(
                    text = "エラーが発生しました: $errorMessage",
                    color = MaterialTheme.colorScheme.error,
                    modifier = Modifier.padding(16.dp)
                )
            }
            // Ensure currentQuiz is not null before calling QuizContent
            currentQuiz != null -> {
                // Only show content when quiz is actually loaded
                QuizContent(
                    quiz = currentQuiz,
                    isAnswered = isAnswered,
                    userSelections = userSelections,
                    answerResult = answerResult,
                    onSubmitAnswer = { index -> quizViewModel.submitAnswer(index) },
                    onSubmitMultipleAnswer = { selections -> quizViewModel.submitAnswer(selections) },
                    onNextClicked = loadNext,
                    onSkipClicked = loadNext
                )
            }
            // Modified else block to show a fallback message
            else -> {
                 // isLoading=false, errorMessage=null, currentQuiz=null の場合
                 Text(
                     text = "問題データを取得できませんでした。再試行してください。", // More specific message
                     color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f), // Slightly dimmed color
                     modifier = Modifier.padding(16.dp)
                 )
                 Log.w("QuizScreen", "State displayed: Not loading, no error, but currentQuiz is null.") // Updated log
             }
        }
    }
    // --- END Restore Original Code ---

    /* // Temporarily removed loading/error handling code commented out
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center 
    ) {
        if (currentQuiz != null) {
             QuizContent(
                quiz = currentQuiz,
                isAnswered = isAnswered,
                userSelections = userSelections,
                answerResult = answerResult,
                onSubmitAnswer = { index -> quizViewModel.submitAnswer(index) },
                onSubmitMultipleAnswer = { selections -> quizViewModel.submitAnswer(selections) },
                onNextClicked = loadNext,
                onSkipClicked = loadNext
            )
        } else {
            // Display a simple message if quiz data is not yet available
            Text("クイズデータを準備中...", modifier = Modifier.padding(16.dp))
        }
    }
    */
}

@Composable
fun QuizContent(
    quiz: QuizEntity,
    isAnswered: Boolean, // Receive from ViewModel state
    userSelections: Set<Int>, // Receive from ViewModel state (used after answering)
    answerResult: QuizViewModel.AnswerResult?, // Receive from ViewModel state
    onSubmitAnswer: (Int) -> Unit, // Callback for single choice submission
    onSubmitMultipleAnswer: (Set<Int>) -> Unit, // Callback for multiple choice submission
    onNextClicked: () -> Unit, // Add callback for Next
    onSkipClicked: () -> Unit // Add callback for Skip
) {
    val isMultipleChoice = quiz.answer?.size ?: 0 > 1
    val scrollState = rememberScrollState() // Remember the scroll state

    // State for single choice selection *before* submitting
    val selectedSingleChoiceIndex = remember(quiz.qid) { mutableStateOf<Int?>(null) }
    // State for multiple choice selections *before* submitting (既存)
    val currentMultipleSelections = remember(quiz.qid) { mutableStateListOf<Int>() }

    // Reset selection states when quiz changes or when answer is submitted
    LaunchedEffect(quiz.qid, isAnswered) {
        if (!isAnswered) { // Only reset if moving to a new question (not answered yet)
           selectedSingleChoiceIndex.value = null
           currentMultipleSelections.clear()
           // Also scroll to top when loading a new question
           scrollState.scrollTo(0)
        }
    }

    // Scroll to the explanation card when the answer is submitted
    LaunchedEffect(isAnswered) {
        if (isAnswered) {
            // Animate scroll to the bottom (where explanation appears)
            // Ensure the scroll happens after the content size has potentially changed
            scrollState.animateScrollTo(scrollState.maxValue)
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(scrollState) // Use the remembered scroll state
            .padding(16.dp) // Add padding around the content
    ) {
        // Question Area in a Card
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp), // Space below the card
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp), // Subtle elevation
            colors = CardDefaults.cardColors(
                containerColor = if (isSystemInDarkTheme()) Color.Black else MaterialTheme.colorScheme.surfaceContainerHighest
            )
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                // QID Text (Optional, could be integrated elsewhere)
                Text(
                    text = "問題 ${quiz.qid}",
                    style = MaterialTheme.typography.labelMedium,
                    color = MaterialTheme.colorScheme.onSurface,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                // Question Text
                Text(
                    text = quiz.questionText ?: "質問を読み込めません。",
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onSurface
                )
            }
        }

        // Code Block Area in a Card (If code exists)
        if (!quiz.code.isNullOrBlank()) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                 elevation = CardDefaults.cardElevation(defaultElevation = 1.dp), // Less elevation than question
                 colors = CardDefaults.cardColors(
                     containerColor = if (isSystemInDarkTheme()) Color.Black else MaterialTheme.colorScheme.surfaceVariant
                 )
            ) {
                // Use horizontal scroll if code is long? For now, just wrap.
                Text(
                    text = quiz.code,
                    style = MaterialTheme.typography.bodyMedium,
                    fontFamily = FontFamily.Monospace, // Use monospace font
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                )
            }
        }

        Spacer(modifier = Modifier.height(16.dp)) // Add space before choices

        // Choices Area
        QuizChoices(
            choices = quiz.choices ?: emptyList(),
            isMultipleChoice = isMultipleChoice,
            isAnswered = isAnswered,
            // Pass the correct selection state based on whether it's answered or not
            currentSelections = if (isAnswered) userSelections else if (isMultipleChoice) currentMultipleSelections.toSet() else selectedSingleChoiceIndex.value?.let { setOf(it) } ?: emptySet(),
            answerResult = answerResult,
            // Callback to update the local selection state
            onSelectionChange = { index, isSelected ->
                if (!isAnswered) { // Only allow changes if not answered
                    if (isMultipleChoice) {
                        if (isSelected) {
                            currentMultipleSelections.add(index)
                        } else {
                            currentMultipleSelections.remove(index)
                        }
                    } else {
                        // For single choice, selecting one deselects others (handled by setting the state)
                        selectedSingleChoiceIndex.value = index
                    }
                }
            }
        )

        Spacer(modifier = Modifier.height(16.dp))

        // "回答する" Button (Always visible when not answered)
        if (!isAnswered) {
            val isSubmitEnabled = if (isMultipleChoice) {
                currentMultipleSelections.isNotEmpty()
            } else {
                selectedSingleChoiceIndex.value != null
            }
            ElevatedButton(
                onClick = {
                    if (isMultipleChoice) {
                        onSubmitMultipleAnswer(currentMultipleSelections.toSet())
                    } else {
                        // Submit the single selected index
                        selectedSingleChoiceIndex.value?.let { onSubmitAnswer(it) }
                    }
                },
                enabled = isSubmitEnabled, // Enable based on selection
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp), // Keep consistent height
                shape = MaterialTheme.shapes.medium, // Keep consistent shape
                colors = ButtonDefaults.elevatedButtonColors( // Keep consistent colors
                    containerColor = if (isSystemInDarkTheme()) Color.Black else MaterialTheme.colorScheme.primaryContainer,
                    contentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                    disabledContainerColor = MaterialTheme.colorScheme.surfaceVariant,
                    disabledContentColor = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.38f)
                ),
                elevation = ButtonDefaults.elevatedButtonElevation( // Keep consistent elevation
                    defaultElevation = 2.dp,
                    pressedElevation = 6.dp
                )
            ) {
                Row( // Keep consistent layout
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = Icons.Default.Check,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "回答する",
                        fontWeight = FontWeight.Bold,
                        style = MaterialTheme.typography.bodyLarge
                    )
                }
            }
            Spacer(modifier = Modifier.height(16.dp)) // Keep spacing
        }

        // Explanation display (conditional) - Use the extracted Composable
        AnimatedVisibility(visible = isAnswered) {
            QuizResultCard(quiz = quiz, answerResult = answerResult)
        }

        // Bottom Action Buttons (conditional)
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 8.dp),
            horizontalArrangement = if (isAnswered) Arrangement.End else Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            if (!isAnswered) {
                // Show Skip button only when not answered (改良版)
                OutlinedButton(
                    onClick = onSkipClicked,
                    colors = ButtonDefaults.outlinedButtonColors(
                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                    ),
                    border = BorderStroke(1.dp, MaterialTheme.colorScheme.outline),
                    modifier = Modifier.height(48.dp)
                ) {
                    Row(
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            imageVector = Icons.Default.Close,
                            contentDescription = null,
                            modifier = Modifier.size(16.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text("スキップ")
                    }
                }
            }

            if (isAnswered) {
                // Show Next button only when answered (改良版)
                ElevatedButton(
                    onClick = onNextClicked,
                    colors = ButtonDefaults.elevatedButtonColors(
                        containerColor = if (isSystemInDarkTheme()) Color.Black else MaterialTheme.colorScheme.primaryContainer,
                        contentColor = MaterialTheme.colorScheme.onPrimaryContainer
                    ),
                    elevation = ButtonDefaults.elevatedButtonElevation(
                        defaultElevation = 2.dp,
                        pressedElevation = 6.dp
                    ),
                    modifier = Modifier.height(48.dp)
                ) {
                    Row(
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            "次へ",
                            fontWeight = FontWeight.Bold,
                            style = MaterialTheme.typography.bodyLarge
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Icon(
                            imageVector = Icons.Default.Check,
                            contentDescription = null,
                            modifier = Modifier.size(16.dp)
                        )
                    }
                }
            }
        }
        Spacer(modifier = Modifier.height(16.dp))
    }
}

// --- Extracted Composable for Result/Explanation ---
@Composable
fun QuizResultCard(
    quiz: QuizEntity,
    answerResult: QuizViewModel.AnswerResult?
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (isSystemInDarkTheme()) Color.Black else MaterialTheme.colorScheme.surfaceContainer
        )
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
             // 定義済みの色を再利用
             val correctColor = Color(0xFF4CAF50) // Standard Green
             val incorrectColor = MaterialTheme.colorScheme.error // Use theme's error color for Red
            
             // --- Result and Selections Row ---
             Row(
                 modifier = Modifier
                     .fillMaxWidth()
                     .padding(bottom = 12.dp), // Space below this row
                 verticalAlignment = Alignment.Top // Align items to the top
             ) {
                 // "正解！" or "不正解" Text
                 Text(
                     text = if (answerResult?.isCorrect == true) "正解！" else "不正解",
                     style = MaterialTheme.typography.titleMedium,
                     color = if (answerResult?.isCorrect == true) correctColor else MaterialTheme.colorScheme.error,
                     modifier = Modifier.padding(end = 16.dp) // Space between result and selections
                 )
                 
                 // --- Selections Column ---
                 Column {
                     // 正解の選択肢
                     if (answerResult?.correctAnswers?.isNotEmpty() == true) {
                         Text(
                             text = "正解: " + answerResult.correctAnswers.sorted().joinToString(", ") { 
                                 val index = it
                                 val letter = ('A' + index).toChar()
                                 "$letter" // 選択肢の内容を表示しない
                             },
                             style = MaterialTheme.typography.bodyMedium,
                             color = correctColor, // 緑色
                             modifier = Modifier.padding(bottom = 4.dp)
                         )
                     }
                     
                     // ユーザーの選択
                     if (answerResult?.userSelections?.isNotEmpty() == true) {
                         val userSelectionsText = answerResult.userSelections.sorted().joinToString(", ") { 
                             val index = it
                             val letter = ('A' + index).toChar()
                             "$letter" // 選択肢の内容を表示しない
                         }
                         val isCorrect = answerResult.isCorrect
                         Text(
                             text = "あなたの選択: $userSelectionsText",
                             style = MaterialTheme.typography.bodyMedium,
                             color = if (isCorrect) correctColor else incorrectColor, // 正解なら緑、不正解なら赤
                             //modifier = Modifier.padding(bottom = 8.dp) // Removed bottom padding here
                         )
                     }
                 }
             }
             
             // --- Divider ---
             Divider(
                 modifier = Modifier
                     .fillMaxWidth()
                     .padding(vertical = 8.dp),
                 color = MaterialTheme.colorScheme.outlineVariant
             )
            
            // 解説文ヘッダー
            Text(
                text = "解説:",
                style = MaterialTheme.typography.bodyMedium,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 4.dp),
                // Apply theme-appropriate color to header
                color = MaterialTheme.colorScheme.onSurface 
            )
            // 解説文本文
            Text(
                text = quiz.explanation ?: "解説はありません。",
                style = MaterialTheme.typography.bodyMedium,
                // Apply white color in dark mode, default otherwise
                color = if (isSystemInDarkTheme()) Color.White else MaterialTheme.colorScheme.onSurface
            )
        }
    }
}

// --- End of Extracted Composable ---

@Composable
fun QuizChoices(
    choices: List<String>,
    isMultipleChoice: Boolean,
    isAnswered: Boolean,
    currentSelections: Set<Int>, // Combined state for current selections (before or after answer)
    answerResult: QuizViewModel.AnswerResult?, // From ViewModel
    onSelectionChange: (Int, Boolean) -> Unit // Unified callback for selection changes
) {
    Column(Modifier.padding(vertical = 4.dp)) {
        choices.forEachIndexed { index, choiceText ->
            // Determine the visual state based on answered status and results
            val selectionState: SelectionState = when {
                !isAnswered -> if (currentSelections.contains(index)) SelectionState.SELECTED_UNANSWERED else SelectionState.UNANSWERED
                answerResult == null -> SelectionState.DEFAULT // Should not happen if answered, but default case
                answerResult.correctAnswers.contains(index) && currentSelections.contains(index) -> SelectionState.CORRECT_SELECTED
                answerResult.correctAnswers.contains(index) && !currentSelections.contains(index) -> SelectionState.CORRECT_NOT_SELECTED
                !answerResult.correctAnswers.contains(index) && currentSelections.contains(index) -> SelectionState.INCORRECT_SELECTED
                else -> SelectionState.DEFAULT // Other choices after answer
            }
            val isCurrentlySelected = currentSelections.contains(index)

            ChoiceRow(
                text = choiceText,
                isSelected = isCurrentlySelected, // Pass current selection status for UI state
                selectionState = selectionState, // Pass detailed state for styling
                isMultipleChoice = isMultipleChoice,
                enabled = !isAnswered, // Choices are only enabled before answering
                onClick = {
                    // Call the unified callback, passing the index and the *new* selected state
                    onSelectionChange(index, !isCurrentlySelected)
                }
            )
            Spacer(modifier = Modifier.height(8.dp)) // Spacing between choices
        }
    }
}

// Updated enum for more granular state
enum class SelectionState {
    UNANSWERED,             // Not selected, not answered
    SELECTED_UNANSWERED,    // Selected, not answered
    CORRECT_SELECTED,       // Was correct, was selected by user
    CORRECT_NOT_SELECTED,   // Was correct, but not selected by user (missed)
    INCORRECT_SELECTED,     // Was incorrect, but selected by user
    DEFAULT                 // Default state after answer (incorrect, not selected)
}

@Composable
fun ChoiceRow(
    text: String,
    isSelected: Boolean, // Is this specific row currently considered "selected" (visually)?
    selectionState: SelectionState, // Detailed state for styling
    isMultipleChoice: Boolean,
    enabled: Boolean, // Is interaction allowed?
    onClick: () -> Unit
) {
    val interactionSource = remember { MutableInteractionSource() }
    val shape = MaterialTheme.shapes.medium // Consistent shape

    // --- Define Colors based on state ---
    val correctColor = Color(0xFF4CAF50) // Consistent Green
    val incorrectColor = MaterialTheme.colorScheme.error // Consistent Red from theme

    // --- Modified Colors based on User Request (with subtle border) ---
    // Background: Always transparent
    val backgroundColor = Color.Transparent

    // Border: Subtle border based on state
    val targetBorderColor = when (selectionState) {
        SelectionState.UNANSWERED -> MaterialTheme.colorScheme.outlineVariant // Subtle border for unanswered
        SelectionState.SELECTED_UNANSWERED -> MaterialTheme.colorScheme.primary // Primary color when selected
        SelectionState.CORRECT_SELECTED -> correctColor
        SelectionState.CORRECT_NOT_SELECTED -> correctColor // Highlight border even if not selected
        SelectionState.INCORRECT_SELECTED -> incorrectColor
        SelectionState.DEFAULT -> MaterialTheme.colorScheme.outlineVariant // Subtle border for others after answer
    }
    val borderColor by animateColorAsState(targetBorderColor, animationSpec = tween(300))

    // Content (Text): Always White
    val targetContentColor = Color.White

    // --- Icon Determination (Keep existing logic) ---
    val iconVector = when (selectionState) {
        SelectionState.SELECTED_UNANSWERED,
        SelectionState.CORRECT_SELECTED,
        SelectionState.INCORRECT_SELECTED -> if (isMultipleChoice) Icons.Filled.CheckBox else Icons.Filled.RadioButtonChecked
        SelectionState.UNANSWERED,
        SelectionState.CORRECT_NOT_SELECTED,
        SelectionState.DEFAULT -> if (isMultipleChoice) Icons.Filled.CheckBoxOutlineBlank else Icons.Filled.RadioButtonUnchecked
    }
    val iconContentDescription = if (isSelected) "Selected" else "Not Selected"
    // Adjust Icon Tint (Keep previous adjustment)
    val iconTintColor = when (selectionState) {
         SelectionState.CORRECT_SELECTED,
         SelectionState.CORRECT_NOT_SELECTED -> correctColor // Keep Green for correct
         SelectionState.INCORRECT_SELECTED -> incorrectColor // Keep Red for incorrect
         SelectionState.SELECTED_UNANSWERED -> MaterialTheme.colorScheme.primary // Theme primary for selected but unanswered
         else -> Color.White // Default icon color (Unanswered/Default)
    }

    // --- Row Layout ---
    Row(
        modifier = Modifier
            .fillMaxWidth()
            // Re-add the border modifier with dynamic color
            .border(BorderStroke(1.dp, borderColor), shape = shape)
            // Set background to transparent
            .background(backgroundColor, shape = shape) // backgroundColor is still Color.Transparent
            .clip(shape) // Apply clipping *after* background and border
            .clickable(
                enabled = enabled,
                onClick = onClick,
                interactionSource = interactionSource,
                indication = rememberRipple(bounded = true) // Use ripple effect
            )
            .padding(horizontal = 16.dp, vertical = 12.dp), // Adjust padding
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.Start // Align items to the start
    ) {
        // --- Icon --- (Keep icon, tint is adjusted)
        Icon(
            imageVector = iconVector,
            contentDescription = iconContentDescription,
            tint = iconTintColor,
            modifier = Modifier.size(24.dp) // Standard icon size
        )

        Spacer(modifier = Modifier.width(12.dp)) // Space between icon and text

        // --- Text --- (Keep color white)
        Text(
            text = text,
            style = MaterialTheme.typography.bodyLarge,
            color = targetContentColor,
            modifier = Modifier.weight(1f) // Allow text to take remaining space
        )

         // --- Result Indicator (Keep existing logic) ---
         AnimatedVisibility(
             visible = selectionState == SelectionState.CORRECT_SELECTED ||
                     selectionState == SelectionState.CORRECT_NOT_SELECTED ||
                     selectionState == SelectionState.INCORRECT_SELECTED,
             enter = fadeIn(),
             exit = fadeOut()
         ) {
             val resultIcon = when (selectionState) {
                 SelectionState.CORRECT_SELECTED, SelectionState.CORRECT_NOT_SELECTED -> Icons.Filled.CheckCircle // Green check for correct
                 SelectionState.INCORRECT_SELECTED -> Icons.Filled.Cancel // Red cross for incorrect selection
                 else -> null // Should not happen in visible state
             }
             val resultIconColor = when (selectionState) {
                 SelectionState.CORRECT_SELECTED, SelectionState.CORRECT_NOT_SELECTED -> correctColor
                 SelectionState.INCORRECT_SELECTED -> incorrectColor
                 else -> Color.Unspecified
             }

             if (resultIcon != null) {
                 Spacer(modifier = Modifier.width(8.dp)) // Space before result icon
                 Icon(
                     imageVector = resultIcon,
                     contentDescription = if (selectionState == SelectionState.CORRECT_SELECTED || selectionState == SelectionState.CORRECT_NOT_SELECTED) "Correct" else "Incorrect",
                     tint = resultIconColor,
                     modifier = Modifier.size(20.dp) // Slightly smaller result icon
                 )
             }
         }
    }
}

// Define ContentAlpha if not available (add near top-level)
object ContentAlpha {
    val high: Float = 1.0f
    val medium: Float = 0.74f
    val disabled: Float = 0.38f
}

================
File: app/src/main/res/layout/fragment_problem_list.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/rich_background_combined"
    tools:context=".ProblemListFragment">

    <!-- プレミアムバナーとアチーブメント指標 -->
    <include
        android:id="@+id/included_achievements_banner"
        layout="@layout/layout_achievements_banner"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent" />

    <!-- 学習パスヘッダー (元のCardViewに戻す) -->
    <androidx.cardview.widget.CardView
        android:id="@+id/learning_path_header"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="16dp"
        android:layout_marginTop="8dp"
        app:cardCornerRadius="16dp"
        app:cardBackgroundColor="#33304d"
        app:cardElevation="4dp"
        app:layout_constraintTop_toBottomOf="@id/included_achievements_banner">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="16dp">

            <TextView
                android:id="@+id/path_title"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:text="@string/java_learning_path"
                android:textColor="#FFFFFF"
                android:textSize="20sp"
                android:textStyle="bold"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent" />

            <TextView
                android:id="@+id/path_details"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:text="6 ユニット • Java Silver認定対応"
                android:textColor="#BBBBBB"
                android:textSize="14sp"
                android:layout_marginTop="4dp"
                app:layout_constraintTop_toBottomOf="@id/path_title"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent" />

        </androidx.constraintlayout.widget.ConstraintLayout>
    </androidx.cardview.widget.CardView>

    <!-- ユニットとレッスンのリスト -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/units_lessons_recycler_view"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="16dp"
        android:clipToPadding="false"
        android:paddingBottom="80dp"
        app:layout_constraintTop_toBottomOf="@id/learning_path_header"
        app:layout_constraintBottom_toBottomOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/item_problem.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingVertical="8dp"
    android:paddingHorizontal="16dp"
    android:clickable="true"
    android:focusable="true"
    android:foreground="?attr/selectableItemBackground">

    <!-- アイコンコンテナ -->
    <FrameLayout
        android:id="@+id/problem_icon_container"
        android:layout_width="56dp"
        android:layout_height="56dp"
        android:visibility="gone"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        android:background="@drawable/problem_icon_background_unsolved">

        <ImageView
            android:id="@+id/problem_icon"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:padding="6dp"
            android:src="@drawable/ic_shield"
            android:contentDescription="@string/problem_icon_description" />
    </FrameLayout>

    <!-- 問題情報レイアウト -->
    <LinearLayout
        android:id="@+id/problem_info_layout"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginBottom="12dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toStartOf="@id/status_badge"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@id/divider">

        <TextView
            android:id="@+id/textViewQid"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="@android:color/white"
            android:textSize="14sp"
            android:textStyle="bold"
            android:alpha="0.8"
            android:layout_marginBottom="4dp"
            tools:text="問題 2-5" />

        <TextView
            android:id="@+id/textViewQuestionCategory"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@android:color/white"
            android:textSize="18sp"
            android:textStyle="bold"
            android:lineSpacingExtra="2sp"
            android:ellipsize="end"
            android:maxLines="2"
            tools:text="データ型とリテラル、変数の初期化と型変換" />
    </LinearLayout>

    <!-- ステータスバッジ -->
    <TextView
        android:id="@+id/status_badge"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:background="@drawable/status_badge_new"
        android:text="@string/status_new"
        android:textColor="@android:color/white"
        android:textSize="11sp"
        android:textStyle="bold"
        android:gravity="center"
        android:paddingVertical="3dp"
        android:paddingHorizontal="8dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        android:layout_marginTop="4dp" />

    <!-- 区切り線 -->
    <View
        android:id="@+id/divider"
        android:layout_width="0dp"
        android:layout_height="1dp"
        android:layout_marginTop="0dp"
        android:alpha="0.2"
        android:background="@android:color/white"
        app:layout_constraintTop_toBottomOf="@id/problem_info_layout"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/item_question_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingHorizontal="16dp" 
    android:paddingTop="16dp" 
    android:paddingBottom="16dp" 
    android:clickable="true"
    android:focusable="true"
    android:foreground="?attr/selectableItemBackground">

    <!-- アイコンコンテナに変更 -->
    <FrameLayout
        android:id="@+id/categoryIconContainer"
        android:layout_width="60dp"
        android:layout_height="60dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@id/divider">
        
        <ImageView
            android:id="@+id/categoryIcon"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:padding="8dp"
            android:contentDescription="Category icon"
            android:src="@drawable/outline_assignment_24" />
            
        <!-- アイコンの右下にチェックマーク配置 -->
        <ImageView
            android:id="@+id/completionCheckmark"
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:layout_gravity="bottom|end"
            android:src="@drawable/ic_lesson_complete"
            android:visibility="gone"
            android:contentDescription="Completion status"
            tools:visibility="visible"/>
    </FrameLayout>

    <!-- 情報エリア - 制約を更新 -->
    <LinearLayout
        android:id="@+id/categoryInfo"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginStart="16dp"
        app:layout_constraintStart_toEndOf="@id/categoryIconContainer"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@id/categoryIconContainer"
        app:layout_constraintBottom_toBottomOf="@id/categoryIconContainer">

        <!-- 問題番号表示 (qidを使用) -->
        <TextView
            android:id="@+id/itemNumberText"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#AAAAAA"
            android:textSize="12sp"
            android:layout_marginBottom="2dp"
            tools:text="問題 java_basic_001" />

        <!-- 問題カテゴリタイトル -->
        <TextView
            android:id="@+id/questionCategoryTitle"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:textSize="16sp"
            android:textStyle="bold"
            tools:text="基本操作" />

        <!-- 問題カテゴリ説明 (コメントアウト) -->
        <!-- 
        <TextView
            android:id="@+id/questionCategoryDescription"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#BBBBBB"
            android:textSize="14sp"
            android:layout_marginTop="4dp"
            tools:text="配列の基本的な操作と使い方" />
         -->
    </LinearLayout>

    <!-- 区切り線 - 制約を更新 -->
    <View
        android:id="@+id/divider"
        android:layout_width="0dp"
        android:layout_height="1dp"
        android:layout_marginTop="16dp"
        android:alpha="0.2"
        android:background="#FFFFFF"
        app:layout_constraintTop_toBottomOf="@+id/categoryIconContainer" 
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="@id/categoryInfo" 
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/values-night/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Theme.ContentfulJavasilver" parent="Theme.Material3.Dark.NoActionBar">
        <!-- Customize your dark theme here. -->
        <item name="colorPrimary">@color/md_theme_primary</item>
        <item name="colorOnPrimary">@color/md_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/md_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/md_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/md_theme_secondary</item>
        <item name="colorOnSecondary">@color/md_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/md_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/md_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/md_theme_tertiary</item>
        <item name="colorOnTertiary">@color/md_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/md_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/md_theme_onTertiaryContainer</item>
        <item name="colorError">@color/md_theme_error</item>
        <item name="colorOnError">@color/md_theme_onError</item>
        <item name="colorErrorContainer">@color/md_theme_errorContainer</item>
        <item name="colorOnErrorContainer">@color/md_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/black</item>
        <item name="colorOnBackground">@color/md_theme_onBackground</item>
        <item name="colorSurface">@color/black</item>
        <item name="colorOnSurface">@color/md_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/dark_surface_variant_for_black</item>
        <item name="colorOnSurfaceVariant">@color/dark_on_surface_variant_for_black</item>
        <item name="colorOutline">@color/dark_outline_for_black</item>
        <item name="colorOnSurfaceInverse">@color/md_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/md_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/md_theme_inversePrimary</item>

        <!-- Set Status bar color -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@color/black</item>

        <!-- Ensure status bar icons are light -->
        <item name="android:windowLightStatusBar" tools:targetApi="m">false</item>

        <!-- ダークテーマ時に参照される属性 -->
        <item name="colorSurfaceContainer">@color/dark_surface_variant_for_black</item>
        <item name="colorSurfaceContainerHigh">@color/dark_surface_variant_for_black_lighter</item>
        <item name="colorSurfaceContainerHighest">@color/dark_surface_variant_for_black_lightest</item>

        <!-- Toolbar のスタイルを指定 (Night) -->
        <item name="toolbarStyle">@style/Widget.App.Toolbar.Night</item>
    </style>

    <!-- Toolbar のカスタムスタイル (Night) -->
    <style name="Widget.App.Toolbar.Night" parent="Widget.Material3.Toolbar">
        <!-- ナビゲーションアイコン (戻るボタン) の色 -->
        <item name="navigationIconTint">@android:color/white</item>
    </style>

    <!-- Toolbar 用のテーマオーバーレイ (Dark) -->
    <style name="ThemeOverlay.App.Toolbar.Night" parent="ThemeOverlay.Material3.Toolbar.Surface">
        <!-- ナビゲーションアイコンとアクションメニューアイコンの色 -->
        <item name="colorControlNormal">@android:color/white</item>
        <!-- タイトルの色 (必要であれば) -->
        <item name="android:textColorPrimary">@android:color/white</item>
    </style>

    <!-- Terracotta Theme -->
    <style name="Theme.ContentfulJavasilver.Terracotta" parent="Theme.ContentfulJavasilver">
        <!-- ... existing dark color items ... -->
        <item name="colorPrimaryInverse">@color/terracotta_theme_inversePrimary</item>
        <!-- 追加: Surface Container Colors (Dark) -->
        <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
    </style>

    <!-- Forest Green Theme -->
    <style name="Theme.ContentfulJavasilver.ForestGreen" parent="Theme.ContentfulJavasilver">
        <!-- ... existing dark color items ... -->
        <item name="colorPrimaryInverse">@color/forest_theme_inversePrimary</item>
        <!-- 追加: Surface Container Colors (Dark) -->
        <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
    </style>

    <!-- Indigo Theme -->
     <style name="Theme.ContentfulJavasilver.Indigo" parent="Theme.ContentfulJavasilver">
         <!-- ... existing dark color items ... -->
         <item name="colorPrimaryInverse">@color/indigo_theme_inversePrimary</item>
         <!-- 追加: Surface Container Colors (Dark) -->
         <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
         <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
         <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
     </style>

    <!-- Slate Theme -->
     <style name="Theme.ContentfulJavasilver.Slate" parent="Theme.ContentfulJavasilver">
         <!-- ... existing dark color items ... -->
         <item name="colorPrimaryInverse">@color/slate_theme_inversePrimary</item>
         <!-- 追加: Surface Container Colors (Dark) -->
         <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
         <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
         <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
     </style>

    <!-- Ocean Blue Theme -->
     <style name="Theme.ContentfulJavasilver.OceanBlue" parent="Theme.ContentfulJavasilver">
         <!-- ... existing dark color items ... -->
         <item name="colorPrimaryInverse">@color/ocean_theme_inversePrimary</item>
         <!-- 追加: Surface Container Colors (Dark) -->
         <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
         <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
         <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
     </style>

    <!-- Mint Green Theme -->
     <style name="Theme.ContentfulJavasilver.MintGreen" parent="Theme.ContentfulJavasilver">
         <!-- ... existing dark color items ... -->
         <item name="colorPrimaryInverse">@color/mint_theme_inversePrimary</item>
         <!-- 追加: Surface Container Colors (Dark) -->
         <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
         <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
         <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
     </style>

    <!-- DeepPurple, Orange, Pink, Teal Themes も同様に追加 (存在する場合) -->
     <style name="Theme.ContentfulJavasilver.DeepPurple" parent="Theme.ContentfulJavasilver">
         <!-- ... existing or generated dark color items ... -->
         <!-- 追加: Surface Container Colors (Dark) -->
         <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
         <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
         <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
     </style>
     <style name="Theme.ContentfulJavasilver.Orange" parent="Theme.ContentfulJavasilver">
         <!-- ... existing or generated dark color items ... -->
         <!-- 追加: Surface Container Colors (Dark) -->
         <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
         <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
         <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
     </style>
      <style name="Theme.ContentfulJavasilver.Pink" parent="Theme.ContentfulJavasilver">
          <!-- ... existing or generated dark color items ... -->
          <!-- 追加: Surface Container Colors (Dark) -->
          <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
          <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
          <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
      </style>
      <style name="Theme.ContentfulJavasilver.Teal" parent="Theme.ContentfulJavasilver">
          <!-- ... existing or generated dark color items ... -->
          <!-- 追加: Surface Container Colors (Dark) -->
          <item name="colorSurfaceContainer">@color/md_theme_dark_surfaceContainer</item>
          <item name="colorSurfaceContainerHigh">@color/md_theme_dark_surfaceContainerHigh</item>
          <item name="colorSurfaceContainerHighest">@color/md_theme_dark_surfaceContainerHighest</item>
    </style>

    <!-- 他のカスタムテーマスタイル (Terracotta, Forest など) は削除されました -->

</resources>

================
File: app/src/main/java/com/example/contentful_javasilver/CategoryFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.LifecycleOwner;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.example.contentful_javasilver.adapter.CategoryAdapter;
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.FragmentCategoryBinding;
import com.example.contentful_javasilver.decoration.VerticalSpaceItemDecoration;
import com.example.contentful_javasilver.model.CategoryItem;
import com.example.contentful_javasilver.DatabaseHelperCoroutines;
import com.example.contentful_javasilver.viewmodels.QuizViewModel;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public class CategoryFragment extends Fragment implements CategoryAdapter.CategoryClickListener {
    private static final String TAG = "CategoryFragment";
    private FragmentCategoryBinding binding;
    private CategoryAdapter categoryAdapter;
    private QuizDao quizDao;
    private DatabaseHelperCoroutines databaseHelper;
    private QuizViewModel quizViewModel;
    private int chapterNumber;
    private String chapterTitle;
    private String chapterDescription; // 章の説明を保持するフィールドを追加
    private final Executor executor = Executors.newSingleThreadExecutor();

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        quizViewModel = new ViewModelProvider(requireActivity()).get(QuizViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentCategoryBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // Bundleからデータを取得 (章の説明も取得できるように仮定、なければデフォルト値)
        if (getArguments() != null) {
            chapterNumber = getArguments().getInt("chapterNumber", 1);
            chapterTitle = getArguments().getString("chapterTitle", "");
            // ChapterFragment から渡されるデータに description が含まれるように修正が必要
            // もしくは、ここで chapterNumber に応じて description を設定する
            chapterDescription = getChapterDescription(chapterNumber); // 説明取得メソッドを呼び出し
        }

        Log.d(TAG, "Chapter number: " + chapterNumber + ", title: " + chapterTitle);

        // データベースの初期化
        QuizDatabase db = QuizDatabase.getDatabase(requireContext());
        quizDao = db.quizDao();
        databaseHelper = new DatabaseHelperCoroutines();

        setupHeader(); // ヘッダー設定メソッドを呼び出し
        setupRecyclerView();
        setupBannerActions();
        observeViewModel();
        
        // カテゴリをロード
        showLoading(true);
        loadCategories();
        quizViewModel.loadStatisticsData();
    }

    // ヘッダーカードに Unit タイトルと説明を設定するメソッド
    private void setupHeader() {
        if (binding != null) {
            // ヘッダーカードに Unit タイトルと説明を設定 (元のIDに戻す)
            binding.unitTitleText.setText(getString(R.string.unit_format, chapterNumber) + ": " + chapterTitle);
            binding.unitDescriptionText.setText(chapterDescription);
        }
    }

    // 章番号に基づいて説明文を返すヘルパーメソッド（仮実装）
    private String getChapterDescription(int chapterNum) {
        // ChapterFragmentのchapterDescriptions配列と同様のロジックで取得
        String[] descriptions = {
            "Javaプログラムの基本構造とコンパイル・実行方法を学びます",
            "変数、データ型、配列、文字列操作の基本を習得します",
            "条件分岐や繰り返し処理など、プログラムの流れを制御する方法を学びます",
            "オブジェクト指向プログラミングの基礎となるクラスの定義と使用方法を学びます",
            "継承と多態性の概念を理解し、インタフェースを活用する方法を学びます",
            "例外処理の仕組みと実装方法についてマスターします"
        };
        if (chapterNum > 0 && chapterNum <= descriptions.length) {
            return descriptions[chapterNum - 1];
        }
        return ""; // デフォルトの説明
    }

    private void setupRecyclerView() {
        binding.categoryRecyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        categoryAdapter = new CategoryAdapter(this);
        binding.categoryRecyclerView.setAdapter(categoryAdapter);

        // ItemDecoration を追加してアイテム間のスペースを設定
        int spacingInPixels = getResources().getDimensionPixelSize(R.dimen.category_item_vertical_spacing);
        binding.categoryRecyclerView.addItemDecoration(new VerticalSpaceItemDecoration(spacingInPixels));
    }

    // バナーのボタンアクションを設定するメソッド
    private void setupBannerActions() {
        if (binding != null) {
            // プレミアムボタンの参照を削除
            // binding.includedAchievementsBanner.premiumButton.setOnClickListener(v -> {
            //     Toast.makeText(requireContext(), "プレミアム機能は現在開発中です", Toast.LENGTH_SHORT).show();
            // });
            // プロフィールボタンの参照を削除
            // binding.includedAchievementsBanner.profileButton.setOnClickListener(v -> {
            //     Toast.makeText(requireContext(), "プロフィール機能は現在開発中です", Toast.LENGTH_SHORT).show();
            // });
        }
    }

    // ViewModelを監視するメソッド
    private void observeViewModel() {
        if (quizViewModel != null && getViewLifecycleOwner() != null) {
            quizViewModel.getStreakInfo().observe(getViewLifecycleOwner(), streakPair -> {
                if (binding != null) {
                    int currentStreak = streakPair.first;
                    // fireAchievement の表示/非表示ロジックを修正 (XMLで制御するためJavaからは削除)
                    if (currentStreak > 0) {
                        // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.VISIBLE);
                        binding.includedAchievementsBanner.fireCount.setText(String.valueOf(currentStreak));
                    } else {
                        // ストリーク0の場合、カウントを0に設定
                        binding.includedAchievementsBanner.fireCount.setText("0");
                        // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.GONE);
                    }
                }
            });

            // --- 追加: 今日の学習時間を監視 ---
            quizViewModel.getTodayStudyTimeLiveData().observe(getViewLifecycleOwner(), timeString -> {
                if (binding != null && binding.includedAchievementsBanner != null) {
                    binding.includedAchievementsBanner.todayLearningTimeText.setText(timeString);
                }
            });
            // --- 追加ここまで ---
        }
    }

    @Override
    public void onCategoryClick(CategoryItem category) {
        // CategoryItem からカテゴリ名を取得してナビゲーション
        navigateToQuestionCategory(category.getCategoryName());
    }

    private void navigateToQuestionCategory(String categoryName) {
        if (categoryName == null || categoryName.isEmpty()) {
            Log.e(TAG, "Cannot navigate, category name is invalid.");
            return;
        }
        Log.d(TAG, "Navigating to QuestionCategoryFragment with category: " + categoryName);
        Bundle args = new Bundle();
        args.putString("categoryName", categoryName);
        args.putInt("chapterNumber", chapterNumber); // chapterNumber も渡す
        Navigation.findNavController(requireView()).navigate(R.id.action_categoryFragment_to_questionCategoryFragment, args);
    }
    
    private void showLoading(boolean isLoading) {
        if (binding != null) {
            binding.progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);
            binding.categoryRecyclerView.setVisibility(isLoading ? View.GONE : View.VISIBLE);
            binding.errorMessage.setVisibility(View.GONE);
        }
    }
    
    private void showError(String message) {
        if (binding != null) {
            binding.progressBar.setVisibility(View.GONE);
            binding.categoryRecyclerView.setVisibility(View.GONE);
            binding.errorMessage.setVisibility(View.VISIBLE);
            binding.errorMessage.setText(message);
        }
    }

    // カテゴリ読み込みロジックを修正
    private void loadCategories() {
        Log.d(TAG, "Loading categories for chapter: " + chapterNumber);
        
        databaseHelper.loadCategoriesAsync(
            chapterNumber,
            quizDao,
            categoryNames -> {
                // getView() が null でない場合にのみ UI スレッドで処理を実行
                if (getView() != null) { 
                                        requireActivity().runOnUiThread(() -> {
                        if (categoryNames != null && !categoryNames.isEmpty()) {
                            Log.d(TAG, "Categories loaded: " + categoryNames.size());
                            List<CategoryItem> categoryItems = convertToCategoryItems(categoryNames);
                            categoryAdapter.submitList(categoryItems);
                                                    showLoading(false);
                                        } else {
                            Log.w(TAG, "No categories found for chapter " + chapterNumber);
                            showError("このユニットにはカテゴリが見つかりませんでした。");
                                        }
                                    });
                            }
                return null; // Function1<List<String>, Unit> のUnitに対応
            },
            error -> {
                 // getView() が null でない場合にのみ UI スレッドで処理を実行
                 if (getView() != null) { 
                     Log.e(TAG, "Error loading categories for chapter " + chapterNumber + ": " + error);
                    requireActivity().runOnUiThread(() -> {
                         showError("カテゴリの読み込みに失敗しました: " + error);
                    });
                }
                 return null; // Function1<String, Unit> のUnitに対応
            }
        );
    }

    // StringリストをCategoryItemリストに変換するヘルパーメソッド
    private List<CategoryItem> convertToCategoryItems(List<String> categoryNames) {
        List<CategoryItem> items = new ArrayList<>();
        for (String name : categoryNames) {
            // 仮の進捗、アイコンを設定 (説明は削除)
            // String description = name + " の詳細説明（仮）"; // 削除
            int totalQuestions = (int) (Math.random() * 10) + 5; // 仮の総問題数 (5-14)
            int completedQuestions = (int) (Math.random() * (totalQuestions + 1)); // 仮の完了問題数
            int iconResId = R.drawable.ic_category_placeholder; // 仮のアイコン

            items.add(new CategoryItem(name, /* description, */ totalQuestions, completedQuestions, iconResId, chapterNumber)); // description 引数を削除
            }
        return items;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/ChapterFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.example.contentful_javasilver.adapter.ChapterAdapter;
import com.example.contentful_javasilver.databinding.FragmentChapterBinding;
import com.example.contentful_javasilver.model.ChapterItem;
import com.example.contentful_javasilver.viewmodels.QuizViewModel;

import java.util.ArrayList;
import java.util.List;

public class ChapterFragment extends Fragment implements ChapterAdapter.OnChapterClickListener {
    private FragmentChapterBinding binding;
    private ChapterAdapter chapterAdapter;
    private QuizViewModel quizViewModel;

    // 章のタイトルと説明
    private final String[] chapterTitles = {
            "Java の概要と簡単なJavaプログラムの作成",
            "Javaの基本データ型と文字列の操作",
            "演算子と制御構造",
            "クラスの定義とインスタンスの使用",
            "継承とインタフェースの使用",
            "例外処理"
    };

    private final String[] chapterDescriptions = {
            "Javaプログラムの基本構造とコンパイル・実行方法を学びます",
            "変数、データ型、配列、文字列操作の基本を習得します",
            "条件分岐や繰り返し処理など、プログラムの流れを制御する方法を学びます",
            "オブジェクト指向プログラミングの基礎となるクラスの定義と使用方法を学びます",
            "継承と多態性の概念を理解し、インタフェースを活用する方法を学びます",
            "例外処理の仕組みと実装方法についてマスターします"
    };

    // 各章のアイコンリソースID
    private final int[] chapterIconResIds = {
            R.drawable.ic_lesson_package, // 仮のアイコン
            R.drawable.ic_lesson_package,
            R.drawable.ic_lesson_package,
            R.drawable.ic_lesson_package,
            R.drawable.ic_lesson_package,
            R.drawable.ic_lesson_package
    };

    // 各章の色リソースID
    private final int[] chapterColorResIds = {
            R.color.unit_color_1,
            R.color.unit_color_2,
            R.color.unit_color_3,
            R.color.unit_color_4,
            R.color.unit_color_5,
            R.color.unit_color_6
    };

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        quizViewModel = new ViewModelProvider(requireActivity()).get(QuizViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentChapterBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        setupUI();
        setupRecyclerView();
        loadChapters();
        observeViewModel();
        quizViewModel.loadStatisticsData();
    }

    private void setupUI() {
        // プレミアムボタンの参照を削除
        // binding.includedAchievementsBanner.premiumButton.setOnClickListener(v -> {
        //     Toast.makeText(requireContext(), "プレミアム機能は現在開発中です", Toast.LENGTH_SHORT).show();
        // });
        // プロフィールボタンの参照を削除
        // binding.includedAchievementsBanner.profileButton.setOnClickListener(v -> {
        //     Toast.makeText(requireContext(), "プロフィール機能は現在開発中です", Toast.LENGTH_SHORT).show();
        // });
    }

    private void observeViewModel() {
        quizViewModel.getStreakInfo().observe(getViewLifecycleOwner(), streakPair -> {
            if (binding != null) { // bindingがnullでないことを確認
                int currentStreak = streakPair.first;
                 // fireAchievement の表示/非表示ロジックを修正 (XMLで制御するためJavaからは削除)
                if (currentStreak > 0) {
                    // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.VISIBLE);
                    binding.includedAchievementsBanner.fireCount.setText(String.valueOf(currentStreak));
                } else {
                    // ストリーク0の場合、カウントを0に設定
                    binding.includedAchievementsBanner.fireCount.setText("0");
                    // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.GONE);
                }
            }
        });

        // --- 追加: 今日の学習時間を監視 ---
        quizViewModel.getTodayStudyTimeLiveData().observe(getViewLifecycleOwner(), timeString -> {
            if (binding != null && binding.includedAchievementsBanner != null) {
                binding.includedAchievementsBanner.todayLearningTimeText.setText(timeString);
            }
        });
        // --- 追加ここまで ---
    }

    private void setupRecyclerView() {
        binding.chaptersRecyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        chapterAdapter = new ChapterAdapter(new ArrayList<>(), this);
        binding.chaptersRecyclerView.setAdapter(chapterAdapter);
    }

    private void loadChapters() {
        // 通常はデータベースから読み込むなどの処理が入る
        // ここではサンプルデータを作成
        List<ChapterItem> chapters = new ArrayList<>();
        
        for (int i = 0; i < chapterTitles.length; i++) {
            // 章番号は1から始まる
            int chapterNumber = i + 1;
            // 各章のカテゴリ数は固定（仮の値）
            int totalCategories = 5;
            // 完了したカテゴリ数（仮の値）
            int completedCategories = (int) (Math.random() * (totalCategories + 1));
            
            ChapterItem chapter = new ChapterItem(
                    chapterNumber,
                    chapterTitles[i],
                    chapterDescriptions[i],
                    totalCategories,
                    completedCategories,
                    chapterColorResIds[i],
                    chapterIconResIds[i]
            );
            
            chapters.add(chapter);
        }
        
        chapterAdapter.updateItems(chapters);
    }

    @Override
    public void onChapterClick(ChapterItem chapter) {
        navigateToCategoryFragment(binding.getRoot(), chapter.getChapterNumber(), chapter.getTitle());
    }

    private void navigateToCategoryFragment(View view, int chapterNumber, String chapterTitle) {
        // Bundleでデータを渡す
        Bundle args = new Bundle();
        args.putInt("chapterNumber", chapterNumber);
        args.putString("chapterTitle", chapterTitle);
        
        // CategoryFragmentに遷移
        Navigation.findNavController(view).navigate(R.id.action_chapterFragment_to_categoryFragment, args);
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/LoadingFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock; // Import SystemClock
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
// Removed ProgressBar import
import android.widget.TextView; // Import TextView
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.os.BundleCompat;
import androidx.fragment.app.Fragment;
// Removed LifecycleOwner import as lifecycleScope is removed
import androidx.navigation.NavController; // Import NavController
import androidx.navigation.Navigation;
import androidx.lifecycle.ViewModelProvider; // Add ViewModelProvider import
// Removed lifecycleScope import
import dagger.hilt.android.AndroidEntryPoint; // Add Hilt entry point annotation

import com.contentful.java.cda.CDAEntry;
import com.example.contentful_javasilver.data.QuizDao; // Added explicit QuizDao import
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.utils.SecurePreferences;
// Removed QuizViewModel import as it wasn't used directly here
// Removed DatabaseTransaction import as we use Room's runInTransaction directly
import com.example.contentful_javasilver.viewmodels.LoadingViewModel; // Import LoadingViewModel

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService; // Added ExecutorService import
import java.util.concurrent.Executors;   // Added Executors import
// Import SharedPreferences for local version storage
import android.content.SharedPreferences;

// Removed kotlin.Unit import
// Removed kotlinx.coroutines imports

@AndroidEntryPoint // Add this annotation for Hilt
public class LoadingFragment extends Fragment {

    private static final String TAG = "LoadingFragment";
    private static final long MIN_DISPLAY_TIME_MS = 3000; // 3 seconds minimum display time
    // Key for storing local data version in SharedPreferences
    private static final String KEY_LOCAL_DATA_VERSION = "local_data_version";
    private static final int DEFAULT_DATA_VERSION = -1; // Default value if no version is stored

    // Removed progressBar and statusText fields
    private final Handler handler = new Handler(Looper.getMainLooper()); // Handler for UI updates
    private long startTimeMs; // To track start time
    private boolean dataLoadComplete = false; // Flag to track data loading status - Can be removed if ViewModel fully controls state
    private TextView loadingStatusText; // Add TextView field

    private AsyncHelperCoroutines asyncHelper; // Keep this for Contentful fetching
    private QuizDatabase database;
    private ExecutorService databaseExecutor; // Executor for background DB tasks
    private ContentfulGetApi contentfulApi; // Make ContentfulApi accessible in methods
    private LoadingViewModel viewModel; // Add ViewModel field
    private String receivedRandomQuizId = null; // Store the random ID when received

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_loading, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // Initialize ViewModel using Hilt
        viewModel = new ViewModelProvider(this).get(LoadingViewModel.class);

        startTimeMs = SystemClock.elapsedRealtime(); // Record start time
        loadingStatusText = view.findViewById(R.id.loadingStatusText); // Initialize TextView

        // Initialize Database and Executor (Keep for now, might be moved to ViewModel/Repo later)
        database = QuizDatabase.getDatabase(requireContext());
        databaseExecutor = Executors.newSingleThreadExecutor(); // Create a single-threaded executor

        // APIキーの取得 (Keep for now)
        String apiKey = SecurePreferences.getContentfulApiKey(requireContext());
        String spaceId = SecurePreferences.getContentfulSpaceId(requireContext());

        // API初期化 (Keep for now)
        contentfulApi = new ContentfulGetApi(spaceId, apiKey); // Initialize here
        asyncHelper = new AsyncHelperCoroutines(contentfulApi);

        // データバージョンの確認とデータロードを開始 (Keep for now)
        checkVersionAndLoadData(); // This might trigger ViewModel loading later

        // Observe ViewModel State
        observeViewModel();
    }

    // Updated to use LiveData.observe
    private void observeViewModel() {
        // Observe isLoadingComplete LiveData
        viewModel.isLoadingComplete().observe(getViewLifecycleOwner(), isComplete -> {
            if (isComplete != null && isComplete) {
                // Retrieve the ID stored when randomQuizId LiveData was observed
                tryNavigateToHome(receivedRandomQuizId);
            }
        });

        // Observe randomQuizId LiveData to store the ID when it becomes available
        viewModel.getRandomQuizId().observe(getViewLifecycleOwner(), qid -> {
             if (qid != null) {
                 Log.d(TAG, "Random Quiz ID received: " + qid);
                 receivedRandomQuizId = qid; // Store the received ID
             }
        });

        // Observe loadingStatus LiveData
        viewModel.getLoadingStatus().observe(getViewLifecycleOwner(), status -> {
            if (status != null && isAdded()) {
                updateStatusText(status);
            }
        });

        // Observe errorOccurred LiveData (optional: show error message)
        viewModel.getErrorOccurred().observe(getViewLifecycleOwner(), errorMessage -> {
            if (errorMessage != null && !errorMessage.isEmpty() && isAdded()) {
                // Optionally show error via Toast or update UI
                 showError("ViewModel Error: " + errorMessage); // Example usage
            }
        });
    }

    // Modified tryNavigateToHome to accept quizId
    private synchronized void tryNavigateToHome(@Nullable String randomQuizId) {
        Log.d(TAG, "Attempting navigation. Random ID: " + randomQuizId);
        long elapsedTimeMs = SystemClock.elapsedRealtime() - startTimeMs;
        long remainingTimeMs = MIN_DISPLAY_TIME_MS - elapsedTimeMs;

        // ViewModel now controls the trigger via the isLoadingComplete observer.
        // We just need to handle the minimum display time.
        if (remainingTimeMs <= 0) {
            navigateToHomeInternal(randomQuizId);
        } else {
             Log.d(TAG, "Delaying navigation by " + remainingTimeMs + " ms");
             handler.postDelayed(() -> {
                  if (isAdded()) {
                     navigateToHomeInternal(randomQuizId);
                  }
             }, remainingTimeMs);
        }
    }

    // Modified navigateToHomeInternal to use Bundle instead of Safe Args
    private void navigateToHomeInternal(@Nullable String randomQuizId) {
        if (isAdded() && getView() != null) {
            Log.i(TAG, "Navigating to HomeFragment with randomQuizId: " + randomQuizId);
            NavController navController = Navigation.findNavController(requireView());

            // Create Bundle to pass arguments
            Bundle args = new Bundle();
            args.putString("randomQuizId", randomQuizId); // Key must match the argument name in nav_graph

            try {
                // Navigate using action ID and Bundle
                navController.navigate(R.id.action_loading_to_home, args);
            } catch (IllegalStateException e) {
                Log.e(TAG, "Navigation failed: Could not find NavController", e);
                showError("画面遷移に失敗しました。");
            } catch (IllegalArgumentException e) {
                // This might happen if the action ID is wrong or destination requires arguments not provided
                Log.e(TAG, "Navigation failed: Action ID invalid or arguments missing", e);
                showError("画面遷移の設定に問題があります。ActionID: action_loading_to_home");
            }
        } else {
            Log.w(TAG, "Navigation skipped: Fragment not added or view destroyed.");
        }
    }

    // --- Methods below might be refactored/removed if logic moves to ViewModel/Repository ---
    // The current implementation keeps data loading logic here, but triggers ViewModel completion.

    private void checkVersionAndLoadData() {
        viewModel.updateLoadingStatus(getString(R.string.loading_status_checking)); // Use ViewModel status update
        Log.d(TAG, "Checking data version...");

        databaseExecutor.execute(() -> {
            int latestVersion = contentfulApi.fetchDataVersion();
            Log.d(TAG, "Latest data version from Contentful: " + latestVersion);

            SharedPreferences prefs = SecurePreferences.getSecurePreferences(requireContext());
            int localVersion = prefs.getInt(KEY_LOCAL_DATA_VERSION, DEFAULT_DATA_VERSION);
            Log.d(TAG, "Local data version: " + localVersion);

            boolean needsUpdate = latestVersion != DEFAULT_DATA_VERSION && latestVersion != localVersion;

            handler.post(() -> {
                if (!isAdded()) return;

                if (needsUpdate) {
                    Log.i(TAG, "Data version mismatch. Forcing refresh.");
                    clearDatabaseAndDownload(latestVersion);
                } else if (localVersion == DEFAULT_DATA_VERSION && latestVersion != DEFAULT_DATA_VERSION) {
                     Log.i(TAG, "First launch. Forcing refresh.");
                    clearDatabaseAndDownload(latestVersion);
                } else if (latestVersion == DEFAULT_DATA_VERSION) {
                     Log.w(TAG, "Could not fetch latest version. Checking existing data.");
                     checkExistingDataCount();
                 } else {
                    Log.d(TAG, "Data version up-to-date. Checking local data.");
                    checkExistingDataCount();
                }
            });
        });
    }

    private void clearDatabaseAndDownload(int newVersion) {
        viewModel.updateLoadingStatus("データベース初期化中...");
        Log.d(TAG, "Clearing database, version: " + newVersion);
        databaseExecutor.execute(() -> {
            try {
                database.quizDao().deleteAll();
                Log.i(TAG, "Database cleared.");

                SharedPreferences prefs = SecurePreferences.getSecurePreferences(requireContext());
                prefs.edit().putInt(KEY_LOCAL_DATA_VERSION, newVersion).apply();
                Log.i(TAG, "Local version updated: " + newVersion);

                handler.post(() -> {
                    if (isAdded()) {
                        viewModel.updateLoadingStatus(getString(R.string.loading_status_downloading));
                         downloadAllData();
                    }
                });
            } catch (Exception e) {
                Log.e(TAG, "Failed to clear database", e);
                handler.post(() -> {
                    if (isAdded()) {
                        viewModel.setLoadingError("DBクリア失敗: " + e.getMessage()); // Report error to ViewModel
                        // showError("DBクリア失敗: " + e.getMessage()); // Optionally still show toast
                        // checkExistingDataCount(); // Decide if we should proceed or stop on error
                    }
                });
            }
        });
    }

    // Check existing data count - triggers ViewModel completion if data exists
    private void checkExistingDataCount() {
        viewModel.updateLoadingStatus("既存データを確認中...");
        Log.d(TAG, "Checking existing data count...");

        databaseExecutor.execute(() -> {
            try {
                int quizCount = database.quizDao().getQuizCountSync();
                handler.post(() -> {
                    if (isAdded()) {
                        if (quizCount > 0) {
                            Log.d(TAG, "既存データあり (" + quizCount + "件)。ロード完了通知。");
                             viewModel.setLoadingComplete(); // Signal completion
                        } else {
                            Log.d(TAG, "データなし。ダウンロード開始。");
                            viewModel.updateLoadingStatus(getString(R.string.loading_status_downloading));
                            downloadAllData();
                        }
                    }
                });
            } catch (Exception e) {
                Log.e(TAG, "DBカウント取得失敗", e);
                handler.post(() -> {
                    if (isAdded()) {
                         viewModel.setLoadingError("データベース確認エラー");
                         // showError("DB確認エラー: " + e.getMessage());
                    }
                });
            }
        });
    }

    // Download data - triggers ViewModel completion on success
    private void downloadAllData() {
        viewModel.updateLoadingStatus(getString(R.string.loading_status_downloading)); // Update status via ViewModel

        asyncHelper.fetchAllEntriesAsync(
                "javaSilverQ",
                (progress, status) -> {
                    // Update status via ViewModel (runs on main thread due to handler.post in implementation)
                    viewModel.updateLoadingStatus(status);
                    return null; // Return null for Kotlin lambda expecting Unit
                },
                entries -> {
                    Log.d(TAG, entries.size() + "件ダウンロード完了。保存中...");
                    viewModel.updateLoadingStatus(getString(R.string.loading_status_saving));

                    List<QuizEntity> entities = convertToQuizEntities(entries);
                    saveToDatabase(entities);

                    return null; // Return null for Kotlin lambda expecting Unit
                },
                error -> {
                    Log.e(TAG, "ダウンロード失敗: " + error);
                    viewModel.setLoadingError("データダウンロード失敗: " + error);
                    // showError(error);
                    return null; // Return null for Kotlin lambda expecting Unit
                }
        );
    }

    @SuppressWarnings("unchecked")
    private List<QuizEntity> convertToQuizEntities(List<? extends CDAEntry> entries) {
        List<QuizEntity> entities = new ArrayList<>();
        for (CDAEntry entry : entries) {
            try {
                String qid = getFieldAsString(entry, "qid");
                // Null check for qid is important
                if (qid == null || qid.isEmpty()) {
                    Log.w(TAG, "Skipping entry due to missing or empty qid: " + entry.id());
                    continue; // Skip this entry if qid is missing
                }

                // Attempt to get List<Integer> for answer from Contentful field "answer"
                List<Integer> answerList = null;
                Object answerField = entry.getField("answer");
                if (answerField instanceof List) {
                    // Check if the list contains numbers (likely Doubles from JSON)
                    List<?> rawList = (List<?>) answerField;
                    if (!rawList.isEmpty() && rawList.get(0) instanceof Number) {
                        answerList = new ArrayList<>();
                        for (Object item : rawList) {
                            if (item instanceof Number) {
                                answerList.add(((Number) item).intValue());
                            }
                        }
                    }
                }

                // Assuming Contentful fields match QuizEntity constructor parameters
                entities.add(new QuizEntity(
                    qid, // @NonNull String qid
                    getFieldAsString(entry, "chapter"),          // String chapter
                    getFieldAsString(entry, "category"),         // String category
                    getFieldAsString(entry, "questionCategory"), // String questionCategory
                    getFieldAsString(entry, "difficulty"),       // String difficulty
                    getFieldAsString(entry, "code"),             // String code
                    getFieldAsString(entry, "questionText"),     // String questionText
                    (List<String>) entry.getField("choices"),       // List<String> choices
                    answerList,                                     // List<Integer> answer (converted above)
                    getFieldAsString(entry, "explanation"),      // String explanation
                    (entry.getField("isBookmarked") instanceof Boolean) ? (Boolean) entry.getField("isBookmarked") : false // boolean isBookmarked
                ));
            } catch (ClassCastException cce) {
                Log.e(TAG, "Type casting error converting entry: " + entry.id() + ". Check Contentful field types.", cce);
                // Skip entry on type mismatch
            } catch (Exception e) {
                Log.e(TAG, "Error converting entry: " + entry.id(), e);
                // Decide if one bad entry should stop the whole process or just be skipped
            }
        }
        return entities;
    }

    private String getFieldAsString(CDAEntry entry, String fieldName) {
        // Helper to safely get string fields, returning null if absent or not a string
        Object field = entry.getField(fieldName);
        return (field instanceof String) ? (String) field : null;
    }

    // Save to DB - triggers ViewModel completion on success
    private void saveToDatabase(List<QuizEntity> entities) {
        databaseExecutor.execute(() -> {
            try {
                database.runInTransaction(() -> {
                    database.quizDao().insertAll(entities);
                    return null;
                });
                Log.i(TAG, entities.size() + "件のデータをデータベースに保存しました");
                handler.post(() -> {
                    if (isAdded()) {
                        viewModel.setLoadingComplete(); // Signal completion
                    }
                });
            } catch (Exception e) {
                Log.e(TAG, "データベースへの保存に失敗", e);
                handler.post(() -> {
                    if (isAdded()) {
                        viewModel.setLoadingError("データ保存エラー: " + e.getMessage());
                        // showError("データ保存エラー: " + e.getMessage());
                    }
                });
            }
        });
    }

    private void showError(String message) {
        if (isAdded() && getContext() != null) {
            Log.e(TAG, "Error displayed: " + message);
            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();
            // Optionally update status text to reflect the error state
            // updateStatusText("エラーが発生しました"); // ViewModel handles status now
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        // Clean up resources
        if (databaseExecutor != null && !databaseExecutor.isShutdown()) {
            databaseExecutor.shutdown();
        }
        handler.removeCallbacksAndMessages(null); // Remove any pending posts
        loadingStatusText = null; // Avoid memory leaks
    }

    // Helper method to update status text view safely
    private void updateStatusText(String status) {
        if (loadingStatusText != null && isAdded()) {
            loadingStatusText.setText(status);
             Log.d(TAG, "Status updated: " + status);
        }
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/ProblemListFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.NavController;
import androidx.navigation.fragment.NavHostFragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import com.example.contentful_javasilver.adapter.UnitLessonAdapter;
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.FragmentProblemListBinding;
import com.example.contentful_javasilver.model.UnitLessonItem;
import com.example.contentful_javasilver.viewmodels.QuizViewModel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;
import androidx.core.content.ContextCompat;
import androidx.core.view.MenuHost;
import androidx.core.view.MenuProvider;
import androidx.lifecycle.Lifecycle;
import android.widget.TextView;

public class ProblemListFragment extends Fragment implements UnitLessonAdapter.OnLessonClickListener, MenuProvider {
    private static final String TAG = "ProblemListFragment";

    private FragmentProblemListBinding binding;
    private QuizViewModel quizViewModel;
    private UnitLessonAdapter adapter;
    private MenuProvider menuProvider;
    private QuizDao quizDao;
    private final Map<String, Boolean> completionStatusCache = new HashMap<>();
    private final Executor executor = Executors.newSingleThreadExecutor();

    // ユニットのタイトルと説明
    private final String[] unitTitles = {
            "Javaの基礎とプログラムの開発",
            "データ型と文字列操作",
            "演算子と制御構造",
            "クラス定義とオブジェクト指向設計",
            "継承とインタフェースの実装",
            "例外処理とデバッグ"
    };

    private final String[] unitDescriptions = {
            "Javaプログラムの基本構造とコンパイル・実行プロセスを学びます",
            "変数、基本データ型、配列、および文字列操作のテクニックを習得します",
            "条件分岐、ループ、演算子を使ったプログラム制御フローを学びます",
            "オブジェクト指向プログラミングの原則とクラス設計の基礎を学びます",
            "継承、抽象化、インタフェースを活用した拡張性の高いコードの書き方を学びます",
            "効果的な例外処理のパターンとデバッグ技術を習得します"
    };

    // レッスンリスト（各ユニットごと）
    private final String[][] lessonTitles = {
            // ユニット1のレッスン
            {
                "Javaプログラムの構造と実行可能クラスの作成",
                "コンパイル・実行プロセスとクラスパス",
                "パッケージの設計とインポート最適化"
            },
            // ユニット2のレッスン
            {
                "変数のスコープとライフサイクル",
                "型推論とvarの適切な使用法",
                "テキストブロックと効率的な文字列処理",
                "多次元配列の操作とメモリ管理",
                "コレクションフレームワークとArrayList"
            },
            // ユニット3のレッスン
            {
                "条件分岐とフロー制御の最適化",
                "効率的なループ構造の選択と実装",
                "break・continueによる制御フロー最適化",
                "パターンマッチングとswitch式の活用"
            },
            // ユニット4のレッスン
            {
                "クラス設計の原則とオブジェクトライフサイクル",
                "メソッド設計とコンストラクタパターン",
                "メソッドオーバーロードと引数の取り扱い",
                "static要素とシングルトンパターン",
                "アクセス修飾子とカプセル化の実践",
                "型チェックとパターンマッチング",
                "レコードクラスとイミュータブル設計"
            },
            // ユニット5のレッスン
            {
                "継承階層の設計と実装",
                "抽象クラスによるフレームワーク設計",
                "メソッドオーバーライドとポリモーフィズム",
                "instanceof演算子と安全なキャスト",
                "finalクラスによる継承制限",
                "インタフェース設計とマーカーインタフェース",
                "デフォルト・プライベートメソッドの活用",
                "シールドクラスと継承コントロール"
            },
            // ユニット6のレッスン
            {
                "例外の種類と例外階層",
                "try-catchブロックと例外処理戦略",
                "try-with-resourcesによる自動リソース管理",
                "カスタム例外クラスの設計と活用",
                "マルチキャッチと効率的なエラーハンドリング"
            }
    };

    // レッスンカテゴリーの配列
    private final String[][] lessonCategories = {
            // ユニット1のレッスンカテゴリー
            {"実装", "概念", "実装"},
            // ユニット2のレッスンカテゴリー
            {"概念", "実装", "実装", "実装", "実装"},
            // ユニット3のレッスンカテゴリー
            {"実装", "実装", "実装", "実装"},
            // ユニット4のレッスンカテゴリー
            {"概念", "実装", "実装", "実装", "概念", "実装", "実装"},
            // ユニット5のレッスンカテゴリー
            {"実装", "実装", "実装", "実装", "概念", "実装", "実装", "概念"},
            // ユニット6のレッスンカテゴリー
            {"概念", "実装", "実装", "実装", "実装"}
    };

    // レッスンのアイコンIDの配列
    private final int[][] lessonIcons = {
            // ユニット1のレッスンアイコン
            {R.drawable.ic_lesson_code, R.drawable.ic_lesson_code, R.drawable.ic_lesson_code},
            // ユニット2のレッスンアイコン
            {R.drawable.ic_lesson_datatype, R.drawable.ic_lesson_datatype, R.drawable.ic_lesson_datatype, R.drawable.ic_lesson_datatype, R.drawable.ic_lesson_datatype},
            // ユニット3のレッスンアイコン
            {R.drawable.ic_lesson_control, R.drawable.ic_lesson_control, R.drawable.ic_lesson_control, R.drawable.ic_lesson_control},
            // ユニット4のレッスンアイコン
            {R.drawable.ic_lesson_class, R.drawable.ic_lesson_class, R.drawable.ic_lesson_class, R.drawable.ic_lesson_class, R.drawable.ic_lesson_class, R.drawable.ic_lesson_class, R.drawable.ic_lesson_class},
            // ユニット5のレッスンアイコン
            {R.drawable.ic_lesson_inheritance, R.drawable.ic_lesson_inheritance, R.drawable.ic_lesson_inheritance, R.drawable.ic_lesson_inheritance, R.drawable.ic_lesson_inheritance, R.drawable.ic_lesson_inheritance, R.drawable.ic_lesson_inheritance, R.drawable.ic_lesson_inheritance},
            // ユニット6のレッスンアイコン
            {R.drawable.ic_lesson_exception, R.drawable.ic_lesson_exception, R.drawable.ic_lesson_exception, R.drawable.ic_lesson_exception, R.drawable.ic_lesson_exception}
    };

    // レッスン完了状態（サンプル）
    private final boolean[][] lessonCompleted = {
            // ユニット1のレッスン完了状態
            {true, true, false},
            // ユニット2のレッスン完了状態
            {false, false, false, false, false},
            // ユニット3のレッスン完了状態
            {false, false, false, false},
            // ユニット4のレッスン完了状態
            {false, false, false, false, false, false, false},
            // ユニット5のレッスン完了状態
            {false, false, false, false, false, false, false, false},
            // ユニット6のレッスン完了状態
            {false, false, false, false, false}
    };

    // ユニット名と説明（一時的にハードコード - ViewModelから取得したデータで補完）
    private final Map<Integer, String> unitTitlesMap = Map.of(
            1, "Javaの基礎とプログラムの開発",
            2, "データ型と文字列操作",
            3, "演算子と制御構造",
            4, "クラス定義とオブジェクト指向設計",
            5, "継承とインタフェースの実装",
            6, "例外処理とデバッグ"
    );
    private final Map<Integer, String> unitDescriptionsMap = Map.of(
            1, "Javaプログラムの基本構造とコンパイル・実行プロセスを学びます",
            2, "変数、基本データ型、配列、および文字列操作のテクニックを習得します",
            3, "条件分岐、ループ、演算子を使ったプログラム制御フローを学びます",
            4, "オブジェクト指向プログラミングの原則とクラス設計の基礎を学びます",
            5, "継承、抽象化、インタフェースを活用した拡張性の高いコードの書き方を学びます",
            6, "効果的な例外処理のパターンとデバッグ技術を習得します"
    );

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        quizViewModel = new ViewModelProvider(requireActivity()).get(QuizViewModel.class);
        QuizDatabase database = QuizDatabase.getDatabase(requireContext());
        quizDao = database.quizDao();
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentProblemListBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        MenuHost menuHost = requireActivity();
        menuProvider = this;
        menuHost.addMenuProvider(menuProvider, getViewLifecycleOwner(), Lifecycle.State.RESUMED);

        // 引数から最後に解いた問題IDを取得 (nullの可能性あり)
        String navArgLastSolvedQuizId = null;
        if (getArguments() != null) {
            navArgLastSolvedQuizId = getArguments().getString("lastSolvedQuizId");
            Log.d(TAG, "Received lastSolvedQuizId from navigation args: " + navArgLastSolvedQuizId);
        }

        setupUI();
        setupRecyclerView();
        // observeViewModel に引数を渡して呼び出し
        observeViewModel(navArgLastSolvedQuizId);

        quizViewModel.loadAllProblems();

        // 統計データをロード（ストリーク情報を含む）
        quizViewModel.loadStatisticsData();
    }

    private void setupUI() {
        // プレミアムボタンのリスナー削除（ボタン自体を削除したため）
        // binding.includedAchievementsBanner.premiumButton.setOnClickListener(v -> {
        //     // プレミアム機能へのナビゲーション（未実装）
        //     Toast.makeText(requireContext(), "プレミアム機能は現在開発中です", Toast.LENGTH_SHORT).show();
        // });

        // プロフィールボタンのリスナーも削除 (ボタン自体を削除したため)
        // binding.includedAchievementsBanner.profileButton.setOnClickListener(v -> {
        //     // プロフィール画面へナビゲーション（未実装）
        //     Toast.makeText(requireContext(), "プロフィール機能は現在開発中です", Toast.LENGTH_SHORT).show();
        // });
        
        // 学習パス表示を設定 (元のIDに戻す)
        binding.pathTitle.setText(getString(R.string.java_learning_path));
        binding.pathDetails.setText("6 ユニット • Java Silver認定対応");
        
        // ストリーク情報を監視して表示を更新
        quizViewModel.getStreakInfo().observe(getViewLifecycleOwner(), streakPair -> {
            int currentStreak = streakPair.first;
            // fireAchievement の表示/非表示はXMLで制御するため、Javaコードからは削除
            if (currentStreak > 0) {
                // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.VISIBLE);
                binding.includedAchievementsBanner.fireCount.setText(String.valueOf(currentStreak));
            } else {
                // ストリークが0の場合でも fireCount は非表示にするか、値を0にするべきか？
                // 今回はXMLで常に表示なので、カウントを0に設定するか、空にする。
                // 0を表示することにする
                binding.includedAchievementsBanner.fireCount.setText("0");
                // XMLで常に表示なので、View.GONEのロジックは不要
                // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.GONE);
            }
        });
    }

    private void setupRecyclerView() {
        // Adapterの初期化 (空のリストで)
        adapter = new UnitLessonAdapter(new ArrayList<>(), this);
        binding.unitsLessonsRecyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        binding.unitsLessonsRecyclerView.setAdapter(adapter);
    }

    @Override
    public void onLessonClick(UnitLessonItem item) {
        // Check if the clicked item is a header or a lesson
        if (item.isUnitHeader()) {
            // It's a header, log it or handle if necessary (e.g., expand/collapse)
            Log.d(TAG, "Unit header clicked: " + item.getTitle());
            // Currently, do nothing when a header is clicked
        } else {
            // It's a lesson item, proceed with navigation check
            String qid = item.getQid(); // Get qid for the lesson

            // Check if qid is valid before logging and navigating
            if (qid == null || qid.isEmpty()) {
                Log.e(TAG, "Invalid QID for navigation (null or empty): " + item.getTitle());
                Toast.makeText(requireContext(), "問題IDが無効なため遷移できません", Toast.LENGTH_SHORT).show();
                return; // Stop navigation
            }

            Log.d(TAG, "Lesson clicked: " + item.getTitle() + " with qid: " + qid);
            navigateToQuiz(qid); // Navigate only if qid is valid
        }
    }

    private void navigateToQuiz(String qid) {
        // The check here is now redundant because it's done in onLessonClick,
        // but keeping it provides an extra layer of safety.
        if (qid == null || qid.isEmpty()) {
            Log.e(TAG, "navigateToQuiz called with invalid qid (null or empty).");
            Toast.makeText(requireContext(), "問題IDが無効です", Toast.LENGTH_SHORT).show();
            return;
        }
        Log.d(TAG, "Navigating to QuizFragment with qid: " + qid);
        Bundle bundle = new Bundle();
        bundle.putString("qid", qid);
        bundle.putBoolean("isRandomMode", false); // Add isRandomMode for consistency
        NavController navController = NavHostFragment.findNavController(this);
        try { // Add try-catch for navigation
            navController.navigate(R.id.action_problemListFragment_to_quizFragment, bundle);
        } catch (IllegalArgumentException e) {
            Log.e(TAG, "Navigation failed (ProblemList -> Quiz): ", e);
            Toast.makeText(requireContext(), "画面遷移に失敗しました", Toast.LENGTH_SHORT).show();
        }
    }

    // observeViewModel メソッドのシグネチャを変更し、引数を追加
    private void observeViewModel(String navArgLastSolvedQuizId) {
        // ViewModelのallQuizzesを監視
        quizViewModel.getAllQuizzesLiveData().observe(getViewLifecycleOwner(), problems -> {
            Log.d(TAG, "Observed quiz list change. Got " + (problems != null ? problems.size() : "null") + " problems.");
            if (problems != null && !problems.isEmpty()) {
                // データロード完了時に完了状態をプリロード (UI更新とスクロールはpreload完了後)
                preloadCompletionStatus(problems, navArgLastSolvedQuizId);
            } else {
                // problemsがnullまたは空の場合もUI更新
                updateUnitLessonList(problems);
            }
        });

        // (他のLiveDataの監視処理はそのまま)
         quizViewModel.getIsLoading().observe(getViewLifecycleOwner(), isLoading -> {
            // ローディング表示の更新 (必要に応じて)
            // binding.progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);
            Log.d(TAG, "isLoading changed: " + isLoading);
        });

        quizViewModel.getErrorMessage().observe(getViewLifecycleOwner(), errorMessage -> {
            if (errorMessage != null && !errorMessage.isEmpty()) {
                Log.e(TAG, "Error from ViewModel: " + errorMessage);
                Toast.makeText(requireContext(), errorMessage, Toast.LENGTH_SHORT).show();
                // エラーメッセージをクリアする処理も必要かも
                // quizViewModel.clearErrorMessage();
            }
        });

        // --- 追加: 今日の学習時間を監視 ---
        quizViewModel.getTodayStudyTimeLiveData().observe(getViewLifecycleOwner(), timeString -> {
            if (binding != null && binding.includedAchievementsBanner != null) {
                binding.includedAchievementsBanner.todayLearningTimeText.setText(timeString);
            }
        });
        // --- 追加ここまで ---
    }

    // preloadCompletionStatus メソッドの最後に UI 更新とスクロール処理を移動
    // 引数に navArgLastSolvedQuizId を追加
    private void preloadCompletionStatus(List<QuizEntity> problems, String navArgLastSolvedQuizId) {
        executor.execute(() -> {
            try {
                completionStatusCache.clear();
                for (QuizEntity problem : problems) {
                    String qid = problem.getQid();
                    if (qid != null && !qid.isEmpty()) {
                        boolean isCompleted = quizDao.isProblemAnswered(qid);
                        completionStatusCache.put(qid, isCompleted);
                    }
                }

                // メインスレッドでUIを更新し、スクロール処理を呼び出す
                if (isAdded() && getActivity() != null) {
                    getActivity().runOnUiThread(() -> {
                        if (isAdded()) { // 再確認
                            // UIリストを更新
                            updateUnitLessonList(problems);

                            // スクロール対象IDを決定 (ナビゲーション引数を優先)
                            String targetQuizId = navArgLastSolvedQuizId;
                             if (targetQuizId == null || targetQuizId.isEmpty()) {
                                // 引数がなければViewModelから取得 (SharedPreferencesからロードされた値)
                                targetQuizId = quizViewModel.getLastSolvedQuizId().getValue();
                                Log.d(TAG, "Using lastSolvedQuizId from ViewModel: " + targetQuizId);
                            } else {
                                Log.d(TAG, "Using lastSolvedQuizId from NavArgs: " + targetQuizId);
                            }

                            // IDがあればスクロール
                            if (targetQuizId != null && !targetQuizId.isEmpty()) {
                                final String finalTargetQuizId = targetQuizId;
                                binding.unitsLessonsRecyclerView.post(() -> {
                                    Log.d(TAG, "Executing scrollToQuiz after preload and UI update for: " + finalTargetQuizId);
                                    scrollToQuiz(finalTargetQuizId);
                                });
                             }
                        }
                    });
                }
            } catch (Exception e) {
                 Log.e(TAG, "Error preloading completion status: " + e.getMessage());
                 // エラー時もUIは更新する
                 if (isAdded() && getActivity() != null) {
                    getActivity().runOnUiThread(() -> {
                        if (isAdded()) {
                            updateUnitLessonList(problems);
                        }
                    });
                }
            }
        });
    }

    // 新しいメソッド: ViewModel から取得した QuizEntity リストを UI モデルに変換して表示
    private void updateUnitLessonList(List<QuizEntity> problems) {
        if (problems == null) {
            Log.w(TAG, "Received null problem list from ViewModel.");
            adapter.updateItems(new ArrayList<>()); // 空リストで更新
            return;
        }
        Log.d(TAG, "Updating UI with " + problems.size() + " problems.");

        List<UnitLessonItem> displayItems = new ArrayList<>();

        // 問題をユニット番号でグループ化 (qidの最初の数字)
        Map<Integer, List<QuizEntity>> groupedByUnit = problems.stream()
                .filter(p -> p.getQid() != null && p.getQid().contains("-")) // qid形式チェック
                .collect(Collectors.groupingBy(
                        p -> {
                            try {
                                return Integer.parseInt(p.getQid().split("-")[0]);
                            } catch (NumberFormatException e) {
                                return -1; // 不正な形式は無視
                            }
                        },
                        LinkedHashMap::new, // 順序を保持
                        Collectors.toList()
                ));

        groupedByUnit.remove(-1); // 不正な形式のグループを除去

        int totalUnits = unitTitlesMap.size(); // 仮。 groupedByUnit.keySet().stream().max(Integer::compare).orElse(0); などで取得推奨

        // 各ユニットについて処理 (ユニット番号でソート)
        List<Integer> sortedUnitNumbers = new ArrayList<>(groupedByUnit.keySet());
        Collections.sort(sortedUnitNumbers);

        for (Integer unitNumber : sortedUnitNumbers) {
            List<QuizEntity> lessonsInUnit = groupedByUnit.get(unitNumber);
            if (lessonsInUnit == null || lessonsInUnit.isEmpty()) continue;

            // ユニットヘッダーを追加
            boolean isLastUnit = Objects.equals(unitNumber, sortedUnitNumbers.get(sortedUnitNumbers.size() - 1));
            int completedLessonsInUnit = countCompletedLessonsInUnit(unitNumber, lessonsInUnit);
            int totalLessonsInUnit = lessonsInUnit.size();
            String unitTitle = unitTitlesMap.getOrDefault(unitNumber, "Unit " + unitNumber);
            String unitDescription = unitDescriptionsMap.getOrDefault(unitNumber, "");

            displayItems.add(new UnitLessonItem(
                    unitNumber,
                    unitTitle,
                    unitDescription,
                    completedLessonsInUnit,
                    totalLessonsInUnit,
                    isLastUnit
            ));

            // そのユニットのレッスンを追加 (QuizEntity から UnitLessonItem へ変換)
            int lessonIndex = 0;
            lessonsInUnit.sort((q1, q2) -> {
                try {
                    int lNum1 = Integer.parseInt(q1.getQid().split("-")[1]);
                    int lNum2 = Integer.parseInt(q2.getQid().split("-")[1]);
                    return Integer.compare(lNum1, lNum2);
                } catch (Exception e) {
                    return q1.getQid().compareTo(q2.getQid()); // パース失敗時は文字列比較
                }
            });

            for (QuizEntity lesson : lessonsInUnit) {
                int lessonNumberInQid; // qidからレッスン番号を取得
                try {
                     lessonNumberInQid = Integer.parseInt(lesson.getQid().split("-")[1]);
                } catch (Exception e) {
                    lessonNumberInQid = lessonIndex + 1; // fallback
                }

                int iconResId = getLessonIcon(unitNumber, lessonIndex);
                boolean completed = isLessonCompleted(lesson.getQid());
                String lessonCategory = lesson.getQuestionCategory() != null ? lesson.getQuestionCategory() : "";

                displayItems.add(new UnitLessonItem(
                        unitNumber,
                        lessonNumberInQid,
                        lesson.getCategory(), // Lesson Title from Contentful
                        lessonCategory,     // Question Category from Contentful
                        iconResId,
                        completed,
                        lesson.getQid()
                ));
                lessonIndex++;
            }
        }

        adapter.updateItems(displayItems);
        Log.d(TAG, "RecyclerView updated with " + displayItems.size() + " items.");
    }

    // 指定されたユニットの完了レッスン数を計算 (DB連携実装)
    private int countCompletedLessonsInUnit(int unitNumber, List<QuizEntity> lessons) {
        int count = 0;
        for (QuizEntity lesson : lessons) {
            if (lesson.getQid() != null && !lesson.getQid().isEmpty()) {
                if (isLessonCompleted(lesson.getQid())) {
                    count++;
                }
            }
        }
        return count;
    }

    // レッスンアイコン取得ヘルパー（ユニット別）
    private int getLessonIcon(int unitNumber, int lessonIndex) {
        // ★ lessonIcons 配列を使用するように変更
        if (unitNumber > 0 && unitNumber <= lessonIcons.length) {
            // ユニットに対応するアイコン配列を取得
            int[] iconsInUnit = lessonIcons[unitNumber - 1];
            if (iconsInUnit.length > 0) {
                // ユニット内の最初のアイコン（＝そのユニットの統一アイコン）を返す
                // lessonIndex は使わない
                return iconsInUnit[0];
            }
        }
        // 不正な場合やアイコン配列が空の場合はデフォルトアイコンを返す
        return R.drawable.ic_lesson_icon_template; // デフォルトアイコン
    }

    // レッスン完了状態取得ヘルパー (キャッシュ対応版)
    private boolean isLessonCompleted(String qid) {
        if (qid == null || qid.isEmpty()) {
            return false;
        }
        
        // キャッシュから結果を取得
        if (completionStatusCache.containsKey(qid)) {
            return completionStatusCache.get(qid);
        }
        
        // キャッシュにない場合は安全のためfalseを返す
        // (preloadCompletionStatusで全ての問題がロードされているはず)
        return false;
    }

    @Override
    public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {
        menuInflater.inflate(R.menu.problem_list_menu, menu);

        MenuItem searchItem = menu.findItem(R.id.action_search);
        if (searchItem != null && searchItem.getIcon() != null) {
            searchItem.getIcon().setColorFilter(
                ContextCompat.getColor(requireContext(), android.R.color.white),
                android.graphics.PorterDuff.Mode.SRC_ATOP
            );
        }

        SearchView searchView = (SearchView) searchItem.getActionView();
        if (searchView != null) {
            // SearchViewをカスタマイズ (RestrictedApi Lintエラー回避のためコメントアウト)
            /*
            SearchView.SearchAutoComplete searchAutoComplete = searchView.findViewById(androidx.appcompat.R.id.search_src_text);
            if (searchAutoComplete != null) {
                searchAutoComplete.setTextColor(ContextCompat.getColor(requireContext(), android.R.color.white));
                searchAutoComplete.setHintTextColor(ContextCompat.getColor(requireContext(), android.R.color.white));
                searchAutoComplete.setHint("レッスンを検索...");
            }
            */

            View closeButton = searchView.findViewById(androidx.appcompat.R.id.search_close_btn);
            if (closeButton != null) {
                ((android.widget.ImageView) closeButton).setColorFilter(
                    ContextCompat.getColor(requireContext(), android.R.color.white),
                    android.graphics.PorterDuff.Mode.SRC_ATOP
                );
            }

            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                @Override
                public boolean onQueryTextSubmit(String query) {
                    return false;
                }
                @Override
                public boolean onQueryTextChange(String newText) {
                    quizViewModel.setSearchQuery(newText);
                    return true;
                }
            });

            searchView.setOnCloseListener(() -> {
                quizViewModel.setSearchQuery("");
                return false;
            });
        }
    }

    @Override
    public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {
        return false;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        if (menuProvider != null) {
            ((MenuHost) requireActivity()).removeMenuProvider(menuProvider);
        }
        binding = null;
        Log.d(TAG, "onDestroyView called.");
    }
    
    /**
     * 指定された問題IDの位置にスクロールします
     *
     * @param quizId スクロール先の問題ID
     */
    private void scrollToQuiz(String quizId) {
        Log.d(TAG, "Attempting to scroll to quiz: " + quizId);
        if (adapter == null || quizId == null || quizId.isEmpty()) {
            Log.w(TAG, "Cannot scroll: adapter is null or quiz ID is invalid");
            return;
        }

        // まず指定された問題IDに対応するアイテムのポジションを探す
        List<UnitLessonItem> items = adapter.getItems();
        int targetPosition = -1;
        
        for (int i = 0; i < items.size(); i++) {
            UnitLessonItem item = items.get(i);
            if (!item.isUnitHeader() && quizId.equals(item.getQid())) {
                targetPosition = i;
                break;
            }
        }
        
        final int finalTargetPosition = targetPosition; // ラムダ式用にfinal変数にコピー
        
        if (finalTargetPosition != -1) {
            // 見つかった位置にスクロール
            Log.d(TAG, "Scrolling to position: " + finalTargetPosition);
            LinearLayoutManager layoutManager = (LinearLayoutManager) binding.unitsLessonsRecyclerView.getLayoutManager();
            if (layoutManager != null) {
                layoutManager.scrollToPositionWithOffset(finalTargetPosition, 20); // 上部に少し余白を持たせる
                
                // 任意: 項目をハイライト表示
                binding.unitsLessonsRecyclerView.postDelayed(() -> {
                    View itemView = layoutManager.findViewByPosition(finalTargetPosition);
                    if (itemView != null) {
                        itemView.setBackgroundResource(R.drawable.highlight_background);
                        // 数秒後にハイライトを消す
                        itemView.postDelayed(() -> 
                            itemView.setBackgroundResource(android.R.color.transparent), 2000);
                    }
                }, 100);
            }
        } else {
            // 問題IDから単位番号を抽出（例: "1-5"から"1"を取得）
            String unitPart = null;
            if (quizId.contains("-")) {
                unitPart = quizId.split("-")[0];
            }
            
            if (unitPart != null) {
                // 単位番号が一致するヘッダーを探す
                int unitNumber = Integer.parseInt(unitPart);
                for (int i = 0; i < items.size(); i++) {
                    UnitLessonItem item = items.get(i);
                    if (item.isUnitHeader() && item.getUnitNumber() == unitNumber) {
                        Log.d(TAG, "Quiz not found, scrolling to unit header: " + unitNumber);
                        LinearLayoutManager layoutManager = (LinearLayoutManager) binding.unitsLessonsRecyclerView.getLayoutManager();
                        if (layoutManager != null) {
                            layoutManager.scrollToPositionWithOffset(i, 0);
                        }
                        break;
                    }
                }
            }
        }
    }
}

================
File: app/src/main/res/layout/fragment_history.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/rich_background_combined"
    tools:context=".HistoryFragment">

    <!-- Removed custom header LinearLayout -->

    <!-- Buttons Container -->
    <LinearLayout
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintVertical_bias="0.3">

        <com.google.android.material.button.MaterialButton
            android:id="@+id/button_statistics"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:layout_marginBottom="16dp"
            android:padding="16dp"
            android:text="学習統計"
            android:textColor="#FFFFFF"
            android:textAppearance="?attr/textAppearanceButton"
            app:icon="@drawable/ic_bar_chart"
            app:iconTint="#FFFFFF"
            app:iconGravity="textStart"
            app:iconPadding="16dp"
            app:iconSize="24dp"
            app:strokeColor="#FFFFFF"
            app:rippleColor="#33FFFFFF" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/button_learning_log"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:layout_marginBottom="16dp"
            android:padding="16dp"
            android:text="学習ログ"
            android:textColor="#FFFFFF"
            android:textAppearance="?attr/textAppearanceButton"
            app:icon="@drawable/ic_history"
            app:iconTint="#FFFFFF"
            app:iconGravity="textStart"
            app:iconPadding="16dp"
            app:iconSize="24dp"
            app:strokeColor="#FFFFFF"
            app:rippleColor="#33FFFFFF" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/button_bookmark"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:padding="16dp"
            android:text="ブックマーク"
            android:textColor="#FFFFFF"
            android:textAppearance="?attr/textAppearanceButton"
            app:icon="@drawable/ic_bookmark"
            app:iconTint="#FFFFFF"
            app:iconGravity="textStart"
            app:iconPadding="16dp"
            app:iconSize="24dp"
            app:strokeColor="#FFFFFF"
            app:rippleColor="#33FFFFFF" />
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_statistics.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/rich_background_combined"
    tools:context=".StatisticsFragment">

    <!-- Removed custom header LinearLayout -->

    <!-- Existing Header for List Columns -->
    <LinearLayout
        android:id="@+id/statistics_header"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:paddingStart="16dp"
        android:paddingEnd="16dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"
        android:background="@android:color/transparent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.3"
            android:text="問題ID"
            android:textColor="@color/md_theme_onPrimary"
            android:textAppearance="?attr/textAppearanceLabelMedium"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.2"
            android:gravity="center"
            android:text="正解数"
            android:textColor="@color/md_theme_onPrimary"
            android:textAppearance="?attr/textAppearanceLabelMedium"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.2"
            android:gravity="center"
            android:text="不正解数"
            android:textColor="@color/md_theme_onPrimary"
            android:textAppearance="?attr/textAppearanceLabelMedium"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.3"
            android:gravity="end"
            android:text="正答率"
            android:textColor="@color/md_theme_onPrimary"
            android:textAppearance="?attr/textAppearanceLabelMedium"
            android:textSize="14sp"
            android:textStyle="bold" />
    </LinearLayout>

    <View
        android:id="@+id/statistics_header_divider"
        android:layout_width="0dp"
        android:layout_height="1dp"
        android:background="#80FFFFFF"
        app:layout_constraintTop_toBottomOf="@id/statistics_header"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- RecyclerView for Statistics -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recycler_view_statistics"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/statistics_header_divider"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:paddingHorizontal="16dp"
        android:clipToPadding="false"
        tools:listitem="@layout/item_statistics" />

    <!-- Empty State Layout -->
    <LinearLayout
        android:id="@+id/empty_state_statistics_container"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible">

        <ImageView
            android:layout_width="80dp"
            android:layout_height="80dp"
            android:src="@drawable/ic_bar_chart"
            app:tint="@color/md_theme_onPrimary"
            android:contentDescription="@string/empty_state_statistics" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/empty_state_statistics"
            android:textColor="@color/md_theme_onPrimary"
            android:textAppearance="?attr/textAppearanceBodyLarge"
            android:gravity="center"/>

    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/values/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Theme.ContentfulJavasilver" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
        <item name="colorPrimary">@color/md_theme_primary</item>
        <item name="colorOnPrimary">@color/md_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/md_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/md_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/md_theme_secondary</item>
        <item name="colorOnSecondary">@color/md_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/md_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/md_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/md_theme_tertiary</item>
        <item name="colorOnTertiary">@color/md_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/md_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/md_theme_onTertiaryContainer</item>
        <item name="colorError">@color/md_theme_error</item>
        <item name="colorErrorContainer">@color/md_theme_errorContainer</item>
        <item name="colorOnError">@color/md_theme_onError</item>
        <item name="colorOnErrorContainer">@color/md_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/md_theme_background</item>
        <item name="colorOnBackground">@color/md_theme_onBackground</item>
        <item name="colorSurface">@color/md_theme_surface</item>
        <item name="colorOnSurface">@color/md_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/md_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/md_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/md_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/md_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/md_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/md_theme_inversePrimary</item>

        <!-- Status bar color -->
        <item name="android:statusBarColor">@android:color/transparent</item>

        <!-- Typography -->
        <item name="textAppearanceDisplayLarge">@style/TextAppearance.App.DisplayLarge</item>
        <item name="textAppearanceDisplayMedium">@style/TextAppearance.App.DisplayMedium</item>
        <item name="textAppearanceDisplaySmall">@style/TextAppearance.App.DisplaySmall</item>
        <item name="textAppearanceHeadlineLarge">@style/TextAppearance.App.HeadlineLarge</item>
        <item name="textAppearanceHeadlineMedium">@style/TextAppearance.App.HeadlineMedium</item>
        <item name="textAppearanceHeadlineSmall">@style/TextAppearance.App.HeadlineSmall</item>
        <item name="textAppearanceTitleLarge">@style/TextAppearance.App.TitleLarge</item>
        <item name="textAppearanceTitleMedium">@style/TextAppearance.App.TitleMedium</item>
        <item name="textAppearanceTitleSmall">@style/TextAppearance.App.TitleSmall</item>
        <item name="textAppearanceBodyLarge">@style/TextAppearance.App.BodyLarge</item>
        <item name="textAppearanceBodyMedium">@style/TextAppearance.App.BodyMedium</item>
        <item name="textAppearanceBodySmall">@style/TextAppearance.App.BodySmall</item>
        <item name="textAppearanceLabelLarge">@style/TextAppearance.App.LabelLarge</item>
        <item name="textAppearanceLabelMedium">@style/TextAppearance.App.LabelMedium</item>
        <item name="textAppearanceLabelSmall">@style/TextAppearance.App.LabelSmall</item>

        <!-- 追加: Surface Container High for Light Theme -->
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>

        <!-- 設定画面専用のテーマを指定 -->
        <item name="preferenceTheme">@style/ThemeOverlay.App.Preference</item>

        <!-- Toolbar のスタイルを指定 -->
        <item name="toolbarStyle">@style/Widget.App.Toolbar</item>
    </style>

    <!-- Toolbar のカスタムスタイル -->
    <style name="Widget.App.Toolbar" parent="Widget.Material3.Toolbar">
        <!-- ナビゲーションアイコン (戻るボタン) の色 -->
        <item name="navigationIconTint">@android:color/white</item>
    </style>

    <!-- Toolbar 用のテーマオーバーレイ (Light) -->
    <style name="ThemeOverlay.App.Toolbar" parent="ThemeOverlay.Material3.Toolbar.Surface">
        <!-- ナビゲーションアイコンとアクションメニューアイコンの色 -->
        <item name="colorControlNormal">@android:color/white</item>
        <!-- タイトルの色 (必要であれば) -->
        <item name="android:textColorPrimary">@android:color/white</item>
    </style>

    <!-- Terracotta Theme -->
    <style name="Theme.ContentfulJavasilver.Terracotta" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/terracotta_theme_primary</item>
        <item name="colorOnPrimary">@color/terracotta_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/terracotta_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/terracotta_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/terracotta_theme_secondary</item>
        <item name="colorOnSecondary">@color/terracotta_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/terracotta_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/terracotta_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/terracotta_theme_tertiary</item>
        <item name="colorOnTertiary">@color/terracotta_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/terracotta_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/terracotta_theme_onTertiaryContainer</item>
        <item name="colorError">@color/terracotta_theme_error</item>
        <item name="colorErrorContainer">@color/terracotta_theme_errorContainer</item>
        <item name="colorOnError">@color/terracotta_theme_onError</item>
        <item name="colorOnErrorContainer">@color/terracotta_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/terracotta_theme_background</item>
        <item name="colorOnBackground">@color/terracotta_theme_onBackground</item>
        <item name="colorSurface">@color/terracotta_theme_surface</item>
        <item name="colorOnSurface">@color/terracotta_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/terracotta_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/terracotta_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/terracotta_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/terracotta_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/terracotta_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/terracotta_theme_inversePrimary</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>

    <!-- Forest Green Theme -->
    <style name="Theme.ContentfulJavasilver.ForestGreen" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/forest_theme_primary</item>
        <item name="colorOnPrimary">@color/forest_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/forest_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/forest_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/forest_theme_secondary</item>
        <item name="colorOnSecondary">@color/forest_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/forest_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/forest_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/forest_theme_tertiary</item>
        <item name="colorOnTertiary">@color/forest_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/forest_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/forest_theme_onTertiaryContainer</item>
        <item name="colorError">@color/forest_theme_error</item>
        <item name="colorErrorContainer">@color/forest_theme_errorContainer</item>
        <item name="colorOnError">@color/forest_theme_onError</item>
        <item name="colorOnErrorContainer">@color/forest_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/forest_theme_background</item>
        <item name="colorOnBackground">@color/forest_theme_onBackground</item>
        <item name="colorSurface">@color/forest_theme_surface</item>
        <item name="colorOnSurface">@color/forest_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/forest_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/forest_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/forest_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/forest_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/forest_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/forest_theme_inversePrimary</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>

    <!-- Indigo Theme -->
    <style name="Theme.ContentfulJavasilver.Indigo" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/indigo_theme_primary</item>
        <item name="colorOnPrimary">@color/indigo_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/indigo_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/indigo_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/indigo_theme_secondary</item>
        <item name="colorOnSecondary">@color/indigo_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/indigo_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/indigo_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/indigo_theme_tertiary</item>
        <item name="colorOnTertiary">@color/indigo_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/indigo_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/indigo_theme_onTertiaryContainer</item>
        <item name="colorError">@color/indigo_theme_error</item>
        <item name="colorErrorContainer">@color/indigo_theme_errorContainer</item>
        <item name="colorOnError">@color/indigo_theme_onError</item>
        <item name="colorOnErrorContainer">@color/indigo_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/indigo_theme_background</item>
        <item name="colorOnBackground">@color/indigo_theme_onBackground</item>
        <item name="colorSurface">@color/indigo_theme_surface</item>
        <item name="colorOnSurface">@color/indigo_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/indigo_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/indigo_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/indigo_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/indigo_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/indigo_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/indigo_theme_inversePrimary</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>

    <!-- Slate Theme -->
    <style name="Theme.ContentfulJavasilver.Slate" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/slate_theme_primary</item>
        <item name="colorOnPrimary">@color/slate_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/slate_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/slate_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/slate_theme_secondary</item>
        <item name="colorOnSecondary">@color/slate_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/slate_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/slate_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/slate_theme_tertiary</item>
        <item name="colorOnTertiary">@color/slate_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/slate_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/slate_theme_onTertiaryContainer</item>
        <item name="colorError">@color/slate_theme_error</item>
        <item name="colorErrorContainer">@color/slate_theme_errorContainer</item>
        <item name="colorOnError">@color/slate_theme_onError</item>
        <item name="colorOnErrorContainer">@color/slate_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/slate_theme_background</item>
        <item name="colorOnBackground">@color/slate_theme_onBackground</item>
        <item name="colorSurface">@color/slate_theme_surface</item>
        <item name="colorOnSurface">@color/slate_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/slate_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/slate_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/slate_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/slate_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/slate_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/slate_theme_inversePrimary</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>

    <!-- Ocean Blue Theme -->
    <style name="Theme.ContentfulJavasilver.OceanBlue" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/ocean_theme_primary</item>
        <item name="colorOnPrimary">@color/ocean_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/ocean_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/ocean_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/ocean_theme_secondary</item>
        <item name="colorOnSecondary">@color/ocean_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/ocean_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/ocean_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/ocean_theme_tertiary</item>
        <item name="colorOnTertiary">@color/ocean_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/ocean_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/ocean_theme_onTertiaryContainer</item>
        <item name="colorError">@color/ocean_theme_error</item>
        <item name="colorErrorContainer">@color/ocean_theme_errorContainer</item>
        <item name="colorOnError">@color/ocean_theme_onError</item>
        <item name="colorOnErrorContainer">@color/ocean_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/ocean_theme_background</item>
        <item name="colorOnBackground">@color/ocean_theme_onBackground</item>
        <item name="colorSurface">@color/ocean_theme_surface</item>
        <item name="colorOnSurface">@color/ocean_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/ocean_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/ocean_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/ocean_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/ocean_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/ocean_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/ocean_theme_inversePrimary</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>

    <!-- Mint Green Theme -->
    <style name="Theme.ContentfulJavasilver.MintGreen" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/mint_theme_primary</item>
        <item name="colorOnPrimary">@color/mint_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/mint_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/mint_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/mint_theme_secondary</item>
        <item name="colorOnSecondary">@color/mint_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/mint_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/mint_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/mint_theme_tertiary</item>
        <item name="colorOnTertiary">@color/mint_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/mint_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/mint_theme_onTertiaryContainer</item>
        <item name="colorError">@color/mint_theme_error</item>
        <item name="colorErrorContainer">@color/mint_theme_errorContainer</item>
        <item name="colorOnError">@color/mint_theme_onError</item>
        <item name="colorOnErrorContainer">@color/mint_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/mint_theme_background</item>
        <item name="colorOnBackground">@color/mint_theme_onBackground</item>
        <item name="colorSurface">@color/mint_theme_surface</item>
        <item name="colorOnSurface">@color/mint_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/mint_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/mint_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/mint_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/mint_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/mint_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/mint_theme_inversePrimary</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>

    <!-- DeepPurple, Orange, Pink, Teal Themes も同様に追加 (存在する場合) -->
    <style name="Theme.ContentfulJavasilver.DeepPurple" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/deep_purple_theme_primary</item>
        <item name="colorSurface">@color/deep_purple_theme_surface</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>
    <style name="Theme.ContentfulJavasilver.Orange" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/orange_theme_primary</item>
        <item name="colorSurface">@color/orange_theme_surface</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>
    <style name="Theme.ContentfulJavasilver.Pink" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/pink_theme_primary</item>
        <item name="colorSurface">@color/pink_theme_surface</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>
    <style name="Theme.ContentfulJavasilver.Teal" parent="Theme.ContentfulJavasilver">
        <item name="colorPrimary">@color/teal_theme_primary</item>
        <item name="colorSurface">@color/teal_theme_surface</item>
        <item name="colorSurfaceContainerHigh">@color/md_theme_light_surfaceContainerHigh</item>
        <item name="colorSurfaceContainerHighest">@color/md_theme_light_surfaceContainerHighest</item>
    </style>

    <!-- 設定画面用のテーマオーバーレイ -->
    <style name="ThemeOverlay.App.Preference" parent="PreferenceThemeOverlay">
        <!-- Preference Title -->
        <item name="android:textColorPrimary">@android:color/white</item>
        <!-- Preference Summary (不透明な白リソースを使用) -->
        <item name="android:textColorSecondary">@color/preference_secondary_text_opaque</item>
        <!-- Preference Category Title -->
        <item name="preferenceCategoryTitleTextColor">@android:color/white</item>
        <!-- General text color fallback -->
        <item name="android:textColor">@android:color/white</item>
        <!-- Dialog list item text color -->
        <item name="android:textColorAlertDialogListItem">@android:color/white</item>
        <!-- Icon color -->
        <item name="android:iconTint" tools:targetApi="o">@android:color/white</item>
        <item name="iconTint">@android:color/white</item> <!-- AppCompat version for iconTint -->
        <!-- Widget accent color (e.g., Switch thumb on) -->
        <item name="colorControlActivated">@android:color/white</item>
    </style>

    <!-- **** Custom Widget Styles **** -->
    <style name="Widget.App.Button.QuizChoice" parent="Widget.Material3.Button.OutlinedButton">
        <item name="android:layout_height">wrap_content</item> <!-- 高さを可変に -->
        <item name="android:minHeight">56dp</item> <!-- 最低高さを確保 -->
        <item name="android:paddingTop">16dp</item> <!-- 上パディング -->
        <item name="android:paddingBottom">16dp</item> <!-- 下パディング -->
        <item name="android:textAppearance">?attr/textAppearanceBodyLarge</item>
        <item name="android:textColor">@color/quiz_choice_text_color_selector</item> <!-- Selectorを使用 -->
        <item name="backgroundTint">@color/quiz_choice_background_selector</item> <!-- Selectorを使用 -->
        <item name="cornerRadius">12dp</item>
        <item name="android:gravity">start|center_vertical</item> <!-- テキストを左寄せ -->
        <item name="android:textAllCaps">false</item>
        <!-- <item name="android:elevation">4dp</item> --> <!-- 影を削除 -->
    </style>

    <style name="Widget.App.CheckBox.QuizChoice" parent="Widget.Material3.CompoundButton.CheckBox">
        <item name="android:layout_height">wrap_content</item> <!-- 高さを可変に -->
        <item name="android:minHeight">56dp</item> <!-- 最低高さを確保 -->
        <item name="android:paddingTop">16dp</item> <!-- 上パディング -->
        <item name="android:paddingBottom">16dp</item> <!-- 下パディング -->
        <item name="android:textAppearance">?attr/textAppearanceBodyLarge</item>
        <item name="android:textColor">@color/quiz_choice_text_color_selector</item> <!-- Selectorを使用 -->
        <item name="buttonTint">@color/quiz_choice_checkbox_tint_selector</item> <!-- Selectorを使用 -->
        <!-- 背景は android:background ではなく backgroundTint で制御するため不要 or Button と合わせる -->
        <item name="android:background">@color/quiz_choice_background_selector</item> <!-- 背景Selectorを設定 -->
        <item name="cornerRadius">12dp</item> <!-- 角丸を追加 -->
        <!-- <item name="android:elevation">4dp</item> --> <!-- 影を削除 -->
        <!-- 背景はSelectorで制御するなら不要かも -->
        <!-- <item name="android:background">@drawable/quiz_choice_checkbox_background_selector</item> -->
    </style>

</resources>

================
File: build.gradle
================
buildscript {
    ext {
        kotlin_version = '2.0.0'
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.7.7" // Add Safe Args classpath
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.51.1' // Update Hilt plugin classpath version
        classpath 'com.google.gms:google-services:4.4.2' // Add this line for Google Services plugin
    }
}

// Gradle 8.xでのcleanタスクの新しい定義方法
tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

================
File: app/src/main/java/com/example/contentful_javasilver/data/QuizEntity.java
================
package com.example.contentful_javasilver.data;

import androidx.room.Entity;
import androidx.room.PrimaryKey;
import androidx.room.TypeConverters;
import androidx.annotation.NonNull;
import java.util.List;
import androidx.room.Index;

@Entity(tableName = "quizzes", 
    indices = {
        @Index(value = {"qid"}),
        @Index(value = {"category"}),
        @Index(value = {"chapter"}),
        @Index(value = {"questionCategory"})
    }
)
public class QuizEntity {
    @PrimaryKey
    @NonNull
    private String qid;
    private String chapter;
    private String category;
    private String questionCategory;
    private String difficulty;
    private String code;
    private String questionText;

    @TypeConverters(Converters.class)
    private List<String> choices;

    @TypeConverters(Converters.class)
    private List<Integer> answer;

    private String explanation;
    private long updatedAt;
    private boolean isBookmarked; // Add bookmark field

    public QuizEntity(String qid, String chapter, String category, String questionCategory,
                      String difficulty, String code, String questionText,
                      List<String> choices, List<Integer> answer, String explanation, boolean isBookmarked) { // Add isBookmarked to constructor
        this.qid = qid;
        this.chapter = chapter;
        this.category = category;
        this.questionCategory = questionCategory;
        this.difficulty = difficulty;
        this.code = code;
        this.questionText = questionText;
        this.choices = choices;
        this.answer = answer;
        this.explanation = explanation;
        this.updatedAt = System.currentTimeMillis();
        this.isBookmarked = isBookmarked; // Initialize bookmark field
    }

    // Getters and Setters
    @NonNull
    public String getQid() { return qid; }
    public void setQid(@NonNull String qid) { this.qid = qid; }
    public String getChapter() { return chapter; }
    public void setChapter(String chapter) { this.chapter = chapter; }
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
    public String getQuestionCategory() { return questionCategory; }
    public void setQuestionCategory(String questionCategory) { this.questionCategory = questionCategory; }
    public String getDifficulty() { return difficulty; }
    public void setDifficulty(String difficulty) { this.difficulty = difficulty; }
    public String getCode() { return code; }
    public void setCode(String code) { this.code = code; }
    public String getQuestionText() { return questionText; }
    public void setQuestionText(String questionText) { this.questionText = questionText; }
    public List<String> getChoices() { return choices; }
    public void setChoices(List<String> choices) { this.choices = choices; }
    public List<Integer> getAnswer() { return answer; }
    public void setAnswer(List<Integer> answer) { this.answer = answer; }
    public String getExplanation() { return explanation; }
    public void setExplanation(String explanation) { this.explanation = explanation; }
    public long getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(long updatedAt) { this.updatedAt = updatedAt; }
    public boolean isBookmarked() { return isBookmarked; } // Getter for bookmark
    public void setBookmarked(boolean bookmarked) { isBookmarked = bookmarked; } // Setter for bookmark

    // Type Converters for Room
    public static class Converters {
        @androidx.room.TypeConverter
        public static String fromStringList(List<String> value) {
            return value == null ? null : String.join(",", value);
        }

        @androidx.room.TypeConverter
        public static List<String> toStringList(String value) {
            return value == null ? null : java.util.Arrays.asList(value.split(","));
        }

        @androidx.room.TypeConverter
        public static String fromIntegerList(List<Integer> value) {
            if (value == null) return null;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < value.size(); i++) {
                sb.append(value.get(i));
                if (i < value.size() - 1) sb.append(",");
            }
            return sb.toString();
        }

        @androidx.room.TypeConverter
        public static List<Integer> toIntegerList(String value) {
            if (value == null) return null;
            List<Integer> list = new java.util.ArrayList<>();
            String[] parts = value.split(",");
            for (String part : parts) {
                list.add(Integer.parseInt(part.trim()));
            }
            return list;
        }
    }

    @Override
    public String toString() {
        return "QuizEntity{" +
                "qid='" + qid + '\'' +
                ", chapter='" + chapter + '\'' +
                ", category='" + category + '\'' +
                ", questionCategory='" + questionCategory + '\'' +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        QuizEntity that = (QuizEntity) o;
        // Compare all relevant fields for content equality
        return java.util.Objects.equals(qid, that.qid) &&
               java.util.Objects.equals(chapter, that.chapter) &&
               java.util.Objects.equals(category, that.category) &&
               java.util.Objects.equals(questionCategory, that.questionCategory) &&
               java.util.Objects.equals(difficulty, that.difficulty) &&
               java.util.Objects.equals(code, that.code) &&
               java.util.Objects.equals(questionText, that.questionText) &&
               java.util.Objects.equals(choices, that.choices) &&
               java.util.Objects.equals(answer, that.answer) &&
               java.util.Objects.equals(explanation, that.explanation) &&
               isBookmarked == that.isBookmarked; // Include bookmark in equals
        // updatedAt might change, so it's often excluded from equals/hashCode
    }

    @Override
    public int hashCode() {
        // Generate hash code based on the same fields used in equals
        return java.util.Objects.hash(qid, chapter, category, questionCategory, difficulty, code, questionText, choices, answer, explanation, isBookmarked); // Include bookmark in hashCode
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/DatabaseHelperCoroutines.kt
================
package com.example.contentful_javasilver

import android.util.Log
import kotlinx.coroutines.*
import com.example.contentful_javasilver.data.QuizDao
import com.example.contentful_javasilver.data.QuizEntity
import kotlin.Unit

class DatabaseHelperCoroutines {
    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    private val TAG = "DatabaseHelper"

    fun loadCategoriesAsync(
        chapterNumber: Int,
        quizDao: QuizDao,
        onSuccess: (List<String>) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                Log.d(TAG, "Loading categories for chapter number: $chapterNumber")

                // 正しい章名文字列を生成 (例: "1章")
                val chapterName = "${chapterNumber}章"
                Log.d(TAG, "Using chapter name for exact match: $chapterName")

                // DAOメソッドを呼び出してカテゴリを直接取得 (メソッド名はそのまま)
                val categories = quizDao.getCategoriesByChapterPattern(chapterName)
                
                Log.d(TAG, "Loaded ${categories.size} distinct categories for chapter $chapterName directly from DAO: $categories")
                
                withContext(Dispatchers.Main) {
                    if (categories.isEmpty()) {
                        Log.w(TAG, "No categories found for chapter $chapterName using exact match.")
                    }
                    onSuccess(categories)
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error loading categories for chapter number $chapterNumber", e)
                withContext(Dispatchers.Main) {
                    onError("カテゴリーの読み込みに失敗しました: ${e.message}")
                }
            }
        }
    }

    /**
     * 文字列から数値を抽出するヘルパーメソッド
     */
    private fun extractNumberFromString(str: String?): Int {
        if (str.isNullOrBlank()) return -1
        
        return try {
            // 1. 数字のみの場合
            if (str.matches(Regex("^\\d+$"))) {
                return str.toInt()
            }
            
            // 2. "X章" パターンの場合
            if (str.contains("章")) {
                val number = str.replace("章", "").trim()
                if (number.matches(Regex("^\\d+$"))) {
                    return number.toInt()
                }
            }
            
            // 3. その他のケース: 数字以外の文字を除去
            val numberOnly = str.replace(Regex("[^0-9]"), "")
            if (numberOnly.isNotEmpty()) {
                numberOnly.toInt()
            } else {
                -1
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error extracting number from $str", e)
            -1
        }
    }

    fun getQuizCountForCategoryAsync(
        category: String,
        quizDao: QuizDao,
        onSuccess: (Int) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                val quizzes = quizDao.getAllQuizzes()
                val count = quizzes.count { quiz -> quiz.category == category }
                withContext(Dispatchers.Main) {
                    onSuccess(count)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError("問題数の取得に失敗しました")
                }
            }
        }
    }

    fun loadQuestionCategoriesAsync(
        selectedCategory: String,
        quizDao: QuizDao,
        onSuccess: (List<QuestionCategoryItem>) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                val allQuizzes = quizDao.getAllQuizzes()
                
                val quizzesInCategory = allQuizzes.filter { it.category == selectedCategory }
                
                val questionCategoryItems = quizzesInCategory
                    .filter { !it.questionCategory.isNullOrBlank() } 
                    .groupBy { it.questionCategory!! } 
                    .map { (questionCategoryName, quizzesInGroup) ->
                        // グループ内の最初のクイズのqidを取得 (nullでないことを期待)
                        val representativeQid = quizzesInGroup.firstOrNull()?.qid ?: "UNKNOWN_QID"
                        
                        // 問題が解かれたかどうかを確認
                        val isCompleted = quizDao.isProblemAnswered(representativeQid)
                        
                        QuestionCategoryItem(
                            qid = representativeQid, // 代表qidを追加
                            questionCategory = questionCategoryName,
                            totalQuestionCount = quizzesInGroup.size,
                            isCompleted = isCompleted // 追加: 解答済みかどうか
                        )
                    }
                    // .sortedBy { it.questionCategory } // 既存のソートをコメントアウトまたは削除
                    .sortedWith(compareBy<QuestionCategoryItem> {
                        val parts = it.qid.split('-')
                        parts.getOrNull(0)?.toIntOrNull() ?: Int.MAX_VALUE // major 番号でソート (エラー時は最後に)
                    }.thenBy {
                        val parts = it.qid.split('-')
                        parts.getOrNull(1)?.toIntOrNull() ?: Int.MAX_VALUE // minor 番号でソート (エラー時は最後に)
                    })

                withContext(Dispatchers.Main) {
                    if (questionCategoryItems.isEmpty()) {
                        Log.w(TAG, "No question categories found for category: $selectedCategory")
                    }
                    onSuccess(questionCategoryItems)
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error loading question categories for $selectedCategory", e)
                withContext(Dispatchers.Main) {
                    onError("問題カテゴリの読み込みに失敗しました: ${e.message}")
                }
            }
        }
    }

    fun loadAllQidsAsync(
        quizDao: QuizDao,
        onSuccess: (List<String>) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                val allQuizzes = quizDao.getAllQuizzes() // シンプルに全件取得
                val allQids = allQuizzes.mapNotNull { it.qid } // qidのみを抽出 (nullを除外)
                                       .filter { it.isNotBlank() } // 空文字を除外
                                       .distinct() // 重複を除外
                
                Log.d(TAG, "Loaded ${allQids.size} distinct QIDs")

                withContext(Dispatchers.Main) {
                    onSuccess(allQids)
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error loading all QIDs", e)
                withContext(Dispatchers.Main) {
                    onError("全問題IDの読み込みに失敗しました: ${e.message}")
                }
            }
        }
    }

    fun getQuizByQidAsync(
        qid: String,
        quizDao: QuizDao,
        onSuccess: (QuizEntity?) -> Unit, // Nullable QuizEntity を返すように変更
        onError: (String) -> Unit
    ) {
        scope.launch {
            var quiz: QuizEntity? = null // 変数を try の外で宣言
            try {
                // getQuizzesByQid は List を返すため、firstOrNull を使う
                quiz = quizDao.getQuizzesByQid(qid).firstOrNull()
                
                withContext(Dispatchers.Main) {
                    onSuccess(quiz) // 見つかった QuizEntity または null を渡す
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error getting quiz by QID $qid", e)
                withContext(Dispatchers.Main) {
                    onError("問題の取得に失敗しました (ID: $qid): ${e.message}")
                }
            }
        }
    }

    data class QuestionCategoryItem(
        val qid: String,
        val questionCategory: String,
        val totalQuestionCount: Int,
        val isCompleted: Boolean
    )

    fun cleanup() {
        scope.cancel()
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/QuestionCategoryFragment.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.databinding.FragmentQuestionCategoryBinding;
import com.example.contentful_javasilver.databinding.ItemQuestionCategoryBinding;
import com.example.contentful_javasilver.decoration.VerticalSpaceItemDecoration;
import com.example.contentful_javasilver.viewmodels.QuizViewModel;

import java.util.ArrayList;
import java.util.List;

import kotlin.Unit;

import com.example.contentful_javasilver.DatabaseHelperCoroutines.QuestionCategoryItem;
import androidx.navigation.Navigation;

public class QuestionCategoryFragment extends Fragment {
    private static final String TAG = "QuestionCategoryFragment";
    private FragmentQuestionCategoryBinding binding;
    private QuestionCategoryAdapter adapter;
    private QuizDao quizDao;
    private DatabaseHelperCoroutines databaseHelper;
    private QuizViewModel quizViewModel;
    private String selectedCategory;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        quizViewModel = new ViewModelProvider(requireActivity()).get(QuizViewModel.class);
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentQuestionCategoryBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        if (getArguments() != null) {
            selectedCategory = getArguments().getString("categoryName");
        }

        if (selectedCategory == null) {
            Log.e(TAG, "Category name argument is missing or null!");
            Toast.makeText(requireContext(), "カテゴリ情報の取得に失敗しました", Toast.LENGTH_SHORT).show();
            return;
        }

        QuizDatabase db = QuizDatabase.getDatabase(requireContext());
        quizDao = db.quizDao();
        databaseHelper = new DatabaseHelperCoroutines();

        setupHeader();
        setupRecyclerView();
        setupBannerActions();
        observeViewModel();
        loadQuestionCategories();
        quizViewModel.loadStatisticsData();
    }

    private void setupHeader() {
        if (binding != null) {
            // ヘッダーカードにカテゴリタイトルと説明を設定 (元のIDに戻す)
            binding.categoryTitleText.setText(selectedCategory);
            binding.categoryDescriptionText.setText(selectedCategory + " の問題カテゴリ一覧");
        }
    }

    private void setupRecyclerView() {
        binding.questionCategoryRecyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        adapter = new QuestionCategoryAdapter(new ArrayList<>());
        binding.questionCategoryRecyclerView.setAdapter(adapter);
    }

    private void setupBannerActions() {
        if (binding != null) {
            // プレミアムボタンの参照を削除
            // binding.includedAchievementsBanner.premiumButton.setOnClickListener(v -> {
            //     Toast.makeText(requireContext(), "プレミアム機能は現在開発中です", Toast.LENGTH_SHORT).show();
            // });
            // プロフィールボタンの参照を削除
            // binding.includedAchievementsBanner.profileButton.setOnClickListener(v -> {
            //     Toast.makeText(requireContext(), "プロフィール機能は現在開発中です", Toast.LENGTH_SHORT).show();
            // });
        }
    }

    private void observeViewModel() {
        if (quizViewModel != null && getViewLifecycleOwner() != null) {
            quizViewModel.getStreakInfo().observe(getViewLifecycleOwner(), streakPair -> {
                if (binding != null) {
                    int currentStreak = streakPair.first;
                    // fireAchievement の表示/非表示ロジックを修正 (XMLで制御するためJavaからは削除)
                    if (currentStreak > 0) {
                        // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.VISIBLE);
                        binding.includedAchievementsBanner.fireCount.setText(String.valueOf(currentStreak));
                    } else {
                        // ストリーク0の場合、カウントを0に設定
                        binding.includedAchievementsBanner.fireCount.setText("0");
                        // binding.includedAchievementsBanner.fireAchievement.setVisibility(View.GONE);
                    }
                }
            });

            // --- 追加: 今日の学習時間を監視 ---
            quizViewModel.getTodayStudyTimeLiveData().observe(getViewLifecycleOwner(), timeString -> {
                if (binding != null && binding.includedAchievementsBanner != null) {
                    binding.includedAchievementsBanner.todayLearningTimeText.setText(timeString);
                }
            });
            // --- 追加ここまで ---
        }
    }

    private void loadQuestionCategories() {
        showLoading(true);
        databaseHelper.loadQuestionCategoriesAsync(
            selectedCategory,
            quizDao,
            questionCategories -> {
                if (getView() != null) {
                    requireActivity().runOnUiThread(() -> {
                        if (questionCategories != null && !questionCategories.isEmpty()) {
                            adapter.updateQuestionCategories(questionCategories);
                            showLoading(false);
                        } else {
                            showError("このカテゴリには問題が見つかりませんでした。");
                        }
                    });
                }
                return Unit.INSTANCE;
            },
            error -> {
                if (getView() != null) {
                    requireActivity().runOnUiThread(() -> {
                        showError("問題カテゴリの読み込みに失敗しました: " + error);
                    });
                }
                return Unit.INSTANCE;
            }
        );
    }

    private void showLoading(boolean isLoading) {
        if (binding != null) {
            binding.progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);
            binding.questionCategoryRecyclerView.setVisibility(isLoading ? View.GONE : View.VISIBLE);
            binding.errorMessage.setVisibility(View.GONE);
        }
    }

    private void showError(String message) {
        if (binding != null) {
            binding.progressBar.setVisibility(View.GONE);
            binding.questionCategoryRecyclerView.setVisibility(View.GONE);
            binding.errorMessage.setVisibility(View.VISIBLE);
            binding.errorMessage.setText(message);
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    private class QuestionCategoryAdapter extends RecyclerView.Adapter<QuestionCategoryAdapter.ViewHolder> {
        private List<QuestionCategoryItem> items;

        QuestionCategoryAdapter(List<QuestionCategoryItem> items) {
            this.items = new ArrayList<>(items);
        }

        public void updateQuestionCategories(List<QuestionCategoryItem> newItems) {
            this.items.clear();
            this.items.addAll(newItems);
            notifyDataSetChanged();
        }

        @NonNull
        @Override
        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_question_category, parent, false);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
            QuestionCategoryItem item = items.get(position);
            boolean isLastItem = (position == items.size() - 1);
            holder.bind(item, isLastItem);
        }

        @Override
        public int getItemCount() {
            return items.size();
        }

        class ViewHolder extends RecyclerView.ViewHolder {
            ImageView categoryIcon;
            TextView itemNumberText;
            TextView questionCategoryTitle;
            View divider;
            ImageView completionCheckmark;

            ViewHolder(View itemView) {
                super(itemView);
                categoryIcon = itemView.findViewById(R.id.categoryIcon);
                itemNumberText = itemView.findViewById(R.id.itemNumberText);
                questionCategoryTitle = itemView.findViewById(R.id.questionCategoryTitle);
                divider = itemView.findViewById(R.id.divider);
                completionCheckmark = itemView.findViewById(R.id.completionCheckmark);
            }

            void bind(QuestionCategoryItem item, boolean isLastItem) {
                itemNumberText.setText(itemView.getContext().getString(R.string.question_item_number_format, item.getQid()));
                questionCategoryTitle.setText(item.getQuestionCategory());
                
                categoryIcon.setImageResource(R.drawable.outline_assignment_24);
                completionCheckmark.setVisibility(item.isCompleted() ? View.VISIBLE : View.GONE);
                
                divider.setVisibility(isLastItem ? View.GONE : View.VISIBLE);

                itemView.setOnClickListener(v -> {
                    String qid = item.getQid(); // Get qid

                    // Check if qid is valid before logging and navigating
                    if (qid == null || qid.isEmpty() || qid.equals("UNKNOWN_QID")) {
                        Log.e(TAG, "Invalid QID for navigation: " + qid + " for item: " + item.getQuestionCategory());
                        Toast.makeText(itemView.getContext(), "問題IDが無効または見つかりません", Toast.LENGTH_SHORT).show();
                        return; // Stop navigation
                    }

                    Log.d(TAG, "Navigating to QuizFragment with qid: " + qid);

                    // Add navigation logic here
                    Bundle bundle = new Bundle();
                    bundle.putString("qid", qid); // Pass the valid qid
                    bundle.putBoolean("isRandomMode", false); // Explicitly pass isRandomMode
                    try {
                        Navigation.findNavController(v).navigate(R.id.action_questionCategoryFragment_to_quizFragment, bundle);
                    } catch (IllegalArgumentException e) {
                        Log.e(TAG, "Navigation failed (QuestionCategory -> Quiz): ", e);
                        Toast.makeText(itemView.getContext(), "画面遷移に失敗しました", Toast.LENGTH_SHORT).show();
                    }
                });
            }
        }
    }
}

================
File: app/src/main/res/layout/fragment_learning_log.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/rich_background_combined"
    tools:context=".LearningLogFragment">

    <!-- Existing Header for List Columns -->
    <LinearLayout
        android:id="@+id/learning_log_header"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:paddingStart="16dp"
        android:paddingEnd="16dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"
        android:background="@android:color/transparent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.35"
            android:layout_marginEnd="8dp"
            android:text="問題ID"
            android:textColor="@color/md_theme_onPrimary"
            android:textStyle="bold"
            android:textSize="14sp"/>

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.25"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:gravity="center"
            android:text="正誤"
            android:textColor="@color/md_theme_onPrimary"
            android:textStyle="bold"
            android:textSize="14sp"/>

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.40"
            android:layout_marginStart="8dp"
            android:gravity="end"
            android:text="解答日時"
            android:textColor="@color/md_theme_onPrimary"
            android:textStyle="bold"
            android:textSize="14sp"/>
    </LinearLayout>

    <View
        android:id="@+id/learning_log_header_divider"
        android:layout_width="0dp"
        android:layout_height="1dp"
        android:background="#80FFFFFF"
        app:layout_constraintTop_toBottomOf="@id/learning_log_header"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- RecyclerView for Learning Log -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recycler_view_learning_log"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/learning_log_header_divider"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:paddingHorizontal="16dp"
        android:clipToPadding="false"
        tools:listitem="@layout/item_history" />

    <!-- Empty State Layout -->
    <LinearLayout
        android:id="@+id/empty_state_container"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible">

        <ImageView
            android:layout_width="80dp"
            android:layout_height="80dp"
            android:src="@drawable/ic_book"
            app:tint="@color/md_theme_onPrimary"
            android:contentDescription="@string/empty_state_learning_log" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/empty_state_learning_log"
            android:textColor="@color/md_theme_onPrimary"
            android:textAppearance="?attr/textAppearanceBodyLarge"
            android:gravity="center"/>

    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/rich_background_combined">

    <!-- プレミアムバナー -->
    <include
        android:id="@+id/included_achievements_banner"
        layout="@layout/layout_achievements_banner"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent" />

    <!-- ヘッダーカード (元のCardViewに戻す) -->
    <androidx.cardview.widget.CardView
        android:id="@+id/unit_header_card" 
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="16dp"
        android:layout_marginTop="8dp"
        app:cardCornerRadius="16dp"
        app:cardBackgroundColor="#33304d" 
        app:cardElevation="4dp"
        app:layout_constraintTop_toBottomOf="@id/included_achievements_banner">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="16dp">

            <!-- Unitタイトル -->
            <TextView
                android:id="@+id/unit_title_text"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:textColor="#FFFFFF"
                android:textSize="20sp"
                android:textStyle="bold"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                tools:text="Unit 1: Java の概要" />

            <!-- Unit説明 -->
            <TextView
                android:id="@+id/unit_description_text"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:textColor="#BBBBBB"
                android:textSize="14sp"
                android:layout_marginTop="4dp"
                app:layout_constraintTop_toBottomOf="@id/unit_title_text"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                tools:text="Javaプログラムの基本構造とコンパイル・実行方法" />

        </androidx.constraintlayout.widget.ConstraintLayout>
    </androidx.cardview.widget.CardView>

    <!-- カテゴリリスト -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/categoryRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="16dp"
        android:clipToPadding="false"
        android:paddingHorizontal="16dp"
        android:paddingBottom="80dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/unit_header_card"
        app:layout_constraintBottom_toBottomOf="parent"
        tools:listitem="@layout/item_category" />

    <!-- ローディング表示 -->
    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/unit_header_card"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible" />

    <!-- エラーメッセージ -->
    <TextView
        android:id="@+id/errorMessage"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="32dp"
        android:gravity="center"
        android:textColor="?attr/colorError"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textStyle="bold"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/unit_header_card"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_chapter.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/rich_background_combined">

    <!-- プレミアムバナーとアチーブメント指標 -->
    <include
        android:id="@+id/included_achievements_banner"
        layout="@layout/layout_achievements_banner"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent" />

    <!-- ヘッダーカード (元のCardViewに戻す) -->
    <androidx.cardview.widget.CardView
        android:id="@+id/learning_path_header"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="16dp"
        android:layout_marginTop="8dp"
        app:cardCornerRadius="16dp"
        app:cardBackgroundColor="#33304d"
        app:cardElevation="4dp"
        app:layout_constraintTop_toBottomOf="@id/included_achievements_banner">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="16dp">

            <TextView
                android:id="@+id/path_title"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:text="@string/java_chapters_title"
                android:textColor="#FFFFFF"
                android:textSize="20sp"
                android:textStyle="bold"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent" />

            <TextView
                android:id="@+id/path_details"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:text="@string/java_chapters_description"
                android:textColor="#BBBBBB"
                android:textSize="14sp"
                android:layout_marginTop="4dp"
                app:layout_constraintTop_toBottomOf="@id/path_title"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent" />

        </androidx.constraintlayout.widget.ConstraintLayout>
    </androidx.cardview.widget.CardView>

    <!-- チャプターリスト -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/chapters_recycler_view"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="16dp"
        android:clipToPadding="false"
        android:paddingBottom="80dp"
        app:layout_constraintTop_toBottomOf="@id/learning_path_header"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        tools:listitem="@layout/item_chapter" />

    <!-- エラーメッセージ -->
    <TextView
        android:id="@+id/error_message"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="32dp"
        android:gravity="center"
        android:textColor="?attr/colorError"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textStyle="bold"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/learning_path_header"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:text="エラーが発生しました"
        tools:visibility="visible" />

    <!-- ローディング表示 -->
    <ProgressBar
        android:id="@+id/progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/learning_path_header"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/layout/fragment_question_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/rich_background_combined">

    <!-- プレミアムバナー - 問題一覧画面と同様のスタイル -->
    <include
        android:id="@+id/included_achievements_banner"
        layout="@layout/layout_achievements_banner"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent" />

    <!-- ヘッダーカード (元のCardViewに戻す) -->
    <androidx.cardview.widget.CardView
        android:id="@+id/category_header_card"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="16dp"
        android:layout_marginTop="8dp"
        app:cardCornerRadius="16dp"
        app:cardBackgroundColor="#33304d"
        app:cardElevation="4dp"
        app:layout_constraintTop_toBottomOf="@id/included_achievements_banner">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="16dp">

            <!-- カテゴリタイトル -->
            <TextView
                android:id="@+id/category_title_text"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:textColor="#FFFFFF"
                android:textSize="20sp"
                android:textStyle="bold"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                tools:text="ArrayList の使用" />

            <!-- カテゴリ説明 -->
            <TextView
                android:id="@+id/category_description_text"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:textColor="#BBBBBB"
                android:textSize="14sp"
                android:layout_marginTop="4dp"
                app:layout_constraintTop_toBottomOf="@id/category_title_text"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                tools:text="ArrayListの基本的な使い方や操作について" />
        </androidx.constraintlayout.widget.ConstraintLayout>
    </androidx.cardview.widget.CardView>

    <!-- 問題カテゴリリスト -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/questionCategoryRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="16dp"
        android:clipToPadding="false"
        android:paddingBottom="80dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/category_header_card"
        app:layout_constraintBottom_toBottomOf="parent" />

    <!-- プログレスバー -->
    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/category_header_card"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible" />

    <!-- エラーメッセージ -->
    <TextView
        android:id="@+id/errorMessage"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="32dp"
        android:gravity="center"
        android:textColor="?attr/colorError"
        android:textAppearance="?attr/textAppearanceBodyMedium"
        android:textStyle="bold"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/category_header_card"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:text="問題が見つかりませんでした"
        tools:visibility="visible" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/build.gradle
================
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.compose' version '2.0.0' // Add version
    id 'androidx.navigation.safeargs' // Use Safe Args Java plugin
    id 'kotlin-kapt' // Hilt用に kapt プラグインを追加 (Hiltプラグインの前に配置)
    id 'dagger.hilt.android.plugin' // Hilt プラグインを追加
    id 'com.google.gms.google-services' // Add this line for Google Services plugin
}

android {
    namespace 'com.example.contentful_javasilver'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.contentful_javasilver"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Roomスキーマエクスポート設定
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // local.propertiesから値を読み込んで BuildConfig に追加
        def localProperties = new Properties()
        localProperties.load(new FileInputStream(rootProject.file("local.properties")))

        buildConfigField "String", "CONTENTFUL_SPACE_ID", "\"${localProperties['CONTENTFUL_SPACE_ID']}\""
        buildConfigField "String", "CONTENTFUL_ACCESS_TOKEN", "\"${localProperties['CONTENTFUL_ACCESS_TOKEN']}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        buildConfig true
        compose true
    }
}

dependencies {
    // Firebase
    implementation platform('com.google.firebase:firebase-bom:33.12.0') // Add Firebase BOM
    implementation 'com.google.firebase:firebase-auth-ktx' // Add Firebase Authentication KTX
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation("com.google.firebase:firebase-analytics")

    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    def room_version = "2.6.1"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    // annotationProcessor "androidx.room:room-compiler:$room_version" // Java用なのでコメントアウト
    kapt "androidx.room:room-compiler:$room_version" // Kotlin用に kapt を使用
    implementation "androidx.room:room-ktx:$room_version"

    // Contentful
    implementation 'com.contentful.java:java-sdk:10.5.18'

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.7.0'
    // implementation 'com.google.android.material:material:1.12.0' // コメントアウト
    implementation 'com.google.android.material:material:1.11.0' // 有効化
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.7'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    // 暗号化SharedPreferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    // ViewModel
    def lifecycle_version = "2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Kotlin Coroutines
    def coroutines_version = "1.7.3" // Use the latest stable version
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutines_version" // Add this for Firebase await()

    // Lottie for Android
    def lottieVersion = "6.4.1" // Use a recent stable version
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Preference
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // Jetpack DataStore (Preferences)
    implementation "androidx.datastore:datastore-preferences:1.1.1"

    // Hilt (Dagger)
    implementation "com.google.dagger:hilt-android:2.51.1"
    kapt "com.google.dagger:hilt-compiler:2.51.1"
    implementation "androidx.hilt:hilt-navigation-compose:1.2.0" // Add Hilt Navigation Compose

    // Jetpack Compose BOM (Bill of Materials) - Recommended for managing versions
    def composeBom = platform('androidx.compose:compose-bom:2024.06.00') // Use the latest BOM version
    implementation composeBom
    androidTestImplementation composeBom

    // Compose UI
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling' // Tooling for debug builds only

    // Compose Material 3
    implementation 'androidx.compose.material3:material3'

    // Compose Material Icons (Extended set for more icons)
    implementation "androidx.compose.material:material-icons-extended"

    // Compose Integration with Activities
    implementation 'androidx.activity:activity-compose:1.9.1' // Use appropriate version

    // Compose Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.4' // Use appropriate version

    // Compose Integration with Lifecycle (for collectAsStateWithLifecycle)
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.8.4' // Use appropriate version

    // Add this for observeAsState to work with LiveData
    implementation "androidx.compose.runtime:runtime-livedata"

    // Optional - Compose Integration with Navigation (if you plan to use Compose Navigation)
    // implementation "androidx.navigation:navigation-compose:2.7.7"

    // Optional - ConstraintLayout for Compose
    // implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"

    // Optional - Coil for image loading in Compose
    // implementation("io.coil-kt:coil-compose:2.6.0")

    // Google Sign-In
    implementation 'com.google.android.gms:play-services-auth:21.1.0' // Check for latest version if needed

    // Firebase Authentication (already likely present)
    // implementation 'com.google.firebase:firebase-auth'
}

kapt {
    javacOptions {
        option("--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED")
    }
}

// Apply the kapt plugin (Optional - Usually not needed unless specific configurations are required)
// kapt {
//    correctErrorTypes true
// }

================
File: app/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:name=".MyApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.ContentfulJavasilver"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
        
        <!-- メインアクティビティ -->
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        
        <!-- フラグメントベースのナビゲーションに移行 -->
        
    </application>

</manifest>

================
File: app/src/main/res/layout/fragment_quiz.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    tools:context=".QuizFragment">

    <!-- ローディングインジケーター -->
    <com.google.android.material.progressindicator.CircularProgressIndicator
        android:id="@+id/progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:indeterminate="true"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible" />


    <androidx.constraintlayout.widget.Group
        android:id="@+id/quiz_content_group"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:constraint_referenced_ids="content_scroll_view, bottom_buttons_container"
        android:visibility="visible"
        tools:visibility="visible"/>

    <!-- Removed custom header LinearLayout -->

    <!-- スクロール可能なコンテンツエリア -->
    <ScrollView
        android:id="@+id/content_scroll_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@id/bottom_buttons_container"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:fillViewport="true"
        android:paddingHorizontal="@dimen/activity_horizontal_margin"
        android:clipToPadding="false"
        android:paddingBottom="8dp">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <!-- 質問とコードブロックをカードに入れる - 半透明スタイルに変更 -->
            <com.google.android.material.card.MaterialCardView
                android:id="@+id/question_card"
                style="?attr/materialCardViewElevatedStyle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardBackgroundColor="@android:color/black"
                app:cardForegroundColor="@android:color/transparent"
                app:cardElevation="0dp"
                app:cardCornerRadius="12dp">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <com.google.android.material.textview.MaterialTextView
                        android:id="@+id/questionQid"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:textAppearance="?attr/textAppearanceLabelMedium"
                        android:textColor="@android:color/white"
                        android:layout_marginBottom="8dp"
                        tools:text="問題 1-1" />

                    <com.google.android.material.textview.MaterialTextView
                        android:id="@+id/questionLabel"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:textAppearance="?attr/textAppearanceBodyLarge"
                        android:textColor="@android:color/white"
                        android:lineSpacingExtra="4dp"
                        tools:text="@string/question_label" />

                    <com.google.android.material.card.MaterialCardView
                        android:id="@+id/code_block_card"
                        style="?attr/materialCardViewElevatedStyle"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="16dp"
                        app:cardBackgroundColor="@android:color/black"
                        app:cardForegroundColor="@android:color/transparent"
                        app:cardElevation="0dp"
                        android:visibility="gone"
                        tools:visibility="visible">

                        <!-- maxHeight削除 -->
                        <ScrollView
                            android:layout_width="match_parent"
                            android:layout_height="wrap_content">

                            <com.google.android.material.textview.MaterialTextView
                                android:id="@+id/codeBlock"
                                android:layout_width="match_parent"
                                android:layout_height="wrap_content"
                                android:fontFamily="monospace"
                                android:padding="16dp"
                                android:textAppearance="?attr/textAppearanceBodyMedium"
                                android:textColor="@android:color/white"
                                android:lineSpacingExtra="4dp"
                                tools:text="@string/code_block" />
                        </ScrollView>
                    </com.google.android.material.card.MaterialCardView>

                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>

            <!-- 解説表示エリア (カード) - 半透明スタイルに変更 -->
            <com.google.android.material.card.MaterialCardView
                android:id="@+id/explanation_card"
                style="?attr/materialCardViewOutlinedStyle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="16dp"
                app:cardBackgroundColor="@android:color/black"
                app:cardForegroundColor="@android:color/transparent"
                app:cardElevation="0dp"
                app:cardCornerRadius="12dp"
                android:visibility="gone"
                tools:visibility="visible">

                <!-- maxHeight削除 -->
                <ScrollView
                    android:id="@+id/explanation_scroll_view"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content">

                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="vertical"
                        android:padding="16dp">

                        <com.google.android.material.textview.MaterialTextView
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:text="解説"
                            android:textAppearance="?attr/textAppearanceTitleMedium"
                            android:textColor="?attr/colorPrimary"
                            android:layout_marginBottom="8dp"/>

                        <com.google.android.material.textview.MaterialTextView
                            android:id="@+id/explanation_text_view"
                            android:layout_width="match_parent"
                            android:layout_height="wrap_content"
                            android:textAppearance="?attr/textAppearanceBodyMedium"
                            android:textColor="@android:color/white"
                            android:lineSpacingExtra="4dp"
                            tools:text="ここに解説文が表示されます。\n複数行のテストです。" />
                    </LinearLayout>
                </ScrollView>
            </com.google.android.material.card.MaterialCardView>


            <!-- 回答選択肢 (ボタン - 単一回答用) - スタイル変更 -->
            <LinearLayout
                android:id="@+id/answer_buttons_layout"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:layout_marginTop="8dp"
                android:visibility="gone"
                tools:visibility="visible">

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/answerBtn1"
                    style="@style/Widget.App.Button.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="8dp"
                    android:text="@string/btn_answer" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/answerBtn2"
                    style="@style/Widget.App.Button.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="8dp"
                    android:text="@string/btn_answer" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/answerBtn3"
                    style="@style/Widget.App.Button.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="8dp"
                    android:text="@string/btn_answer" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/answerBtn4"
                    style="@style/Widget.App.Button.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/btn_answer" />
            </LinearLayout>

            <!-- 回答選択肢 (チェックボックス - 複数回答用) -->
            <LinearLayout
                android:id="@+id/answer_choices_layout"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:layout_marginTop="8dp">

                <com.google.android.material.checkbox.MaterialCheckBox
                    android:id="@+id/answerCheck1"
                    style="@style/Widget.App.CheckBox.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="8dp"
                    android:text="@string/btn_answer" />

                <com.google.android.material.checkbox.MaterialCheckBox
                    android:id="@+id/answerCheck2"
                    style="@style/Widget.App.CheckBox.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="8dp"
                    android:text="@string/btn_answer" />

                <com.google.android.material.checkbox.MaterialCheckBox
                    android:id="@+id/answerCheck3"
                    style="@style/Widget.App.CheckBox.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="8dp"
                    android:text="@string/btn_answer" />

                <com.google.android.material.checkbox.MaterialCheckBox
                    android:id="@+id/answerCheck4"
                    style="@style/Widget.App.CheckBox.QuizChoice"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/btn_answer" />
            </LinearLayout>

            <!-- 回答するボタン -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/submit_answer_button"
                style="?attr/materialButtonOutlinedStyle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="8dp"
                android:text="回答する"
                android:visibility="gone"
                tools:visibility="visible" />

            <!-- 解説表示/スキップボタンのコンテナ -->
            <LinearLayout
                android:id="@+id/answer_action_buttons_container"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="8dp"
                android:visibility="visible">

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/show_explanation_button"
                    style="?attr/materialButtonOutlinedStyle"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:layout_marginEnd="8dp"
                    android:text="解説を表示" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/skip_button"
                    style="?attr/materialButtonOutlinedStyle"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="スキップ" />
            </LinearLayout>
        </LinearLayout>
    </ScrollView>

    <!-- 次へボタン (ConstraintLayoutの下部に固定) -->
    <LinearLayout
        android:id="@+id/bottom_buttons_container"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:paddingEnd="16dp"
        android:paddingBottom="16dp">

        <com.google.android.material.button.MaterialButton
            android:id="@+id/checkButton"
            style="@style/Widget.Material3.Button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:layout_marginEnd="8dp"
            android:text="確認"
            android:enabled="false"
            android:visibility="gone"/>

        <com.google.android.material.button.MaterialButton
            android:id="@+id/next_button"
            style="@style/Widget.Material3.Button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="次の問題へ"
            android:paddingVertical="12dp"
            android:paddingHorizontal="24dp"
            tools:visibility="visible" />

    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/res/navigation/nav_graph.xml
================
<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph"
    app:startDestination="@id/startFragment">

    <fragment
        android:id="@+id/homeFragment"
        android:name="com.example.contentful_javasilver.HomeFragment"
        android:label="Java Silver"
        tools:layout="@layout/fragment_home">
        <argument
            android:name="randomQuizId"
            app:argType="string"
            app:nullable="true"
            android:defaultValue="@null" />
        <action
            android:id="@+id/action_homeFragment_to_chapterFragment"
            app:destination="@id/chapterFragment" />
        <action
            android:id="@+id/action_homeFragment_to_quizFragment"
            app:destination="@id/quizFragment" />
        <action
            android:id="@+id/action_homeFragment_to_problemListFragment"
            app:destination="@id/problemListFragment" />
        <action
            android:id="@+id/action_homeFragment_to_navigation_history"
            app:destination="@id/navigation_history" />
        <action
            android:id="@+id/action_homeFragment_to_navigation_bookmark"
            app:destination="@id/navigation_bookmark" />
    </fragment>

    <fragment
        android:id="@+id/chapterFragment"
        android:name="com.example.contentful_javasilver.ChapterFragment"
        android:label="チャプター選択"
        tools:layout="@layout/fragment_chapter">
        <action
            android:id="@+id/action_chapterFragment_to_categoryFragment"
            app:destination="@id/categoryFragment" />
    </fragment>

    <fragment
        android:id="@+id/categoryFragment"
        android:name="com.example.contentful_javasilver.CategoryFragment"
        android:label="カテゴリー選択"
        tools:layout="@layout/fragment_category">
        <action
            android:id="@+id/action_categoryFragment_to_questionCategoryFragment"
            app:destination="@id/questionCategoryFragment" />
        <argument
            android:name="chapterNumber"
            app:argType="integer" />
        <argument
            android:name="chapterTitle"
            app:argType="string" />
    </fragment>

    <fragment
        android:id="@+id/questionCategoryFragment"
        android:name="com.example.contentful_javasilver.QuestionCategoryFragment"
        android:label="問題カテゴリー選択"
        tools:layout="@layout/fragment_question_category">
        <action
            android:id="@+id/action_questionCategoryFragment_to_quizFragment"
            app:destination="@id/quizFragment" />
        <argument
            android:name="category"
            app:argType="string" />
    </fragment>

    <fragment
        android:id="@+id/quizFragment"
        android:name="com.example.contentful_javasilver.QuizFragment"
        android:label="クイズ"
        tools:layout="@layout/fragment_quiz">
        <argument
            android:name="qid"
            app:argType="string"
            app:nullable="true"
            android:defaultValue="@null" />
        <argument
            android:name="isRandomMode"
            app:argType="boolean"
            android:defaultValue="false" />
        <action
            android:id="@+id/action_quizFragment_to_problemListFragment"
            app:destination="@id/problemListFragment" />
    </fragment>

    <fragment
        android:id="@+id/settingsFragment"
        android:name="com.example.contentful_javasilver.SettingsFragment"
        android:label="@string/title_settings"
        tools:layout="@layout/fragment_settings">
        <action
            android:id="@+id/action_settingsFragment_to_privacyPolicyFragment"
            app:destination="@id/privacyPolicyFragment" />
        <action
            android:id="@+id/action_settingsFragment_to_loginFragment"
            app:destination="@id/loginFragment"
            app:popUpTo="@id/nav_graph"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/loadingFragment"
        android:name="com.example.contentful_javasilver.LoadingFragment"
        android:label="ローディング"
        tools:layout="@layout/fragment_loading">
        <action
            android:id="@+id/action_loading_to_home"
            app:destination="@id/homeFragment"
            app:popUpTo="@id/loadingFragment"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/startFragment"
        android:name="com.example.contentful_javasilver.StartFragment"
        android:label="Start"
        tools:layout="@layout/fragment_start">
        <action
            android:id="@+id/action_start_to_loading"
            app:destination="@id/loadingFragment"
            app:popUpTo="@id/startFragment"
            app:popUpToInclusive="true" />
        <action
            android:id="@+id/action_start_to_login"
            app:destination="@id/loginFragment"
            app:popUpTo="@id/startFragment"
            app:popUpToInclusive="true" />
        <action
            android:id="@+id/action_start_to_home"
            app:destination="@id/homeFragment"
            app:popUpTo="@id/startFragment"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/loginFragment"
        android:name="com.example.contentful_javasilver.LoginFragment"
        android:label="Login">
        <action
            android:id="@+id/action_loginFragment_to_loadingFragment"
            app:destination="@id/loadingFragment"
            app:popUpTo="@id/nav_graph"
            app:popUpToInclusive="true" />
        <action
            android:id="@+id/action_loginFragment_to_registerFragment"
            app:destination="@id/registerFragment" />
    </fragment>

    <fragment
        android:id="@+id/registerFragment"
        android:name="com.example.contentful_javasilver.RegisterFragment"
        android:label="Register">
        <action
            android:id="@+id/action_registerFragment_to_loadingFragment"
            app:destination="@id/loadingFragment"
            app:popUpTo="@id/nav_graph"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/problemListFragment"
        android:name="com.example.contentful_javasilver.ProblemListFragment"
        android:label="問題一覧"
        tools:layout="@layout/fragment_problem_list">
        <argument
            android:name="lastSolvedQuizId"
            app:argType="string"
            app:nullable="true"
            android:defaultValue="@null" />
        <action
            android:id="@+id/action_problemListFragment_to_quizFragment"
            app:destination="@id/quizFragment" />
        <action
            android:id="@+id/action_problemListFragment_to_homeFragment"
            app:destination="@id/homeFragment" />
        <action
            android:id="@+id/action_problemListFragment_to_questionCategoryFragment"
            app:destination="@id/questionCategoryFragment" />
    </fragment>

    <fragment
        android:id="@+id/navigation_history"
        android:name="com.example.contentful_javasilver.HistoryFragment"
        android:label="@string/title_history"
        tools:layout="@layout/fragment_history">
        <action
            android:id="@+id/action_historyFragment_to_learningLogFragment"
            app:destination="@id/learningLogFragment" />
        <action
            android:id="@+id/action_historyFragment_to_statisticsFragment"
            app:destination="@id/statisticsFragment" />
        <action
            android:id="@+id/action_historyFragment_to_navigation_bookmark"
            app:destination="@id/navigation_bookmark" />
    </fragment>

    <fragment
        android:id="@+id/learningLogFragment"
        android:name="com.example.contentful_javasilver.LearningLogFragment"
        android:label="学習ログ"
        tools:layout="@layout/fragment_learning_log" />

    <fragment
        android:id="@+id/statisticsFragment"
        android:name="com.example.contentful_javasilver.StatisticsFragment"
        android:label="学習統計"
        tools:layout="@layout/fragment_statistics" />

    <fragment
        android:id="@+id/navigation_bookmark"
        android:name="com.example.contentful_javasilver.BookmarkFragment"
        android:label="@string/title_bookmark"
        tools:layout="@layout/fragment_bookmark" >
        <action
            android:id="@+id/action_bookmarkFragment_to_quizFragment"
            app:destination="@id/quizFragment" />
    </fragment>

    <fragment
        android:id="@+id/privacyPolicyFragment"
        android:name="com.example.contentful_javasilver.PrivacyPolicyFragment"
        android:label="@string/privacy_policy_title"
        tools:layout="@layout/fragment_privacy_policy" />

</navigation>

================
File: app/src/main/java/com/example/contentful_javasilver/viewmodels/QuizViewModel.java
================
package com.example.contentful_javasilver.viewmodels;

import android.app.Application;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.util.Log;
import android.util.Pair;

import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MediatorLiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModelKt;

import com.contentful.java.cda.CDAEntry;
import com.example.contentful_javasilver.AsyncHelperCoroutines;
import com.example.contentful_javasilver.ContentfulGetApi;
import com.example.contentful_javasilver.DatabaseHelperCoroutines;
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.data.QuizHistory;
import com.example.contentful_javasilver.utils.SecurePreferences;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FieldValue;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.SetOptions;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import kotlin.Unit;
import kotlinx.coroutines.BuildersKt;
import kotlinx.coroutines.CoroutineScope;
import kotlinx.coroutines.CoroutineStart;
import kotlinx.coroutines.Dispatchers;
import kotlinx.coroutines.flow.MutableStateFlow;
import kotlinx.coroutines.flow.StateFlow;
import kotlinx.coroutines.flow.StateFlowKt;

/**
 * クイズデータを管理するViewModel
 */
public class QuizViewModel extends AndroidViewModel {
    private static final String TAG = "QuizViewModel";
    private static final String PREF_BEST_STREAK = "best_streak"; // Key for SharedPreferences
    private static final String PREF_WEEKLY_GOAL = "weekly_goal_preference"; // Key for weekly goal
    private static final String PREF_LAST_SOLVED_QID = "last_solved_qid"; // Key for last solved qid
    private static final String PREF_TODAY_STUDY_TIME_MILLIS = "today_study_time_millis"; // Key for today's study time
    private static final String PREF_TODAY_STUDY_DATE = "today_study_date"; // Key for the date of today's study time
    private static final int DEFAULT_WEEKLY_GOAL = 50; // Default goal value
    private final QuizDatabase database;
    private final QuizDao quizDao; // Add QuizDao field
    private final DatabaseHelperCoroutines databaseHelper;
    private final AsyncHelperCoroutines asyncHelper;
    private final ContentfulGetApi contentfulApi;
    private final SharedPreferences prefs; // SharedPreferences for best streak

    // Get viewModelScope for Java
    private final CoroutineScope viewModelScope = ViewModelKt.getViewModelScope(this);

    // 表示中のクイズリスト（通常は1件）
    private final MutableLiveData<List<QuizEntity>> loadedQuizzes = new MutableLiveData<>();
    // エラーメッセージ
    private final MutableLiveData<String> errorMessage = new MutableLiveData<>();
    // 正解数 (シーケンシャルモードではあまり意味がないが、一応残す)
    private final MutableLiveData<Integer> correctAnswerCount = new MutableLiveData<>(0);
    // データロード中フラグ
    private final MutableLiveData<Boolean> isLoading = new MutableLiveData<>(false);
    // クイズ終了通知用は削除
    // private final MutableLiveData<Boolean> quizFinished = new MutableLiveData<>(false);

    // 現在のクイズを取得するためのMediatorLiveData
    private final MediatorLiveData<QuizEntity> currentQuiz = new MediatorLiveData<>();
    // ランダムに取得したqid
    private final MutableLiveData<String> randomQuizId = new MutableLiveData<>();
    
    // 最後に解いた問題ID
    private final MutableLiveData<String> lastSolvedQuizId = new MutableLiveData<>();

    // --- Problem List Screen ---
    // 全問題リスト
    private final MutableLiveData<List<QuizEntity>> allQuizzes = new MutableLiveData<>();
    // 検索クエリ
    private final MutableLiveData<String> searchQuery = new MutableLiveData<>(""); // Default to empty string
    // グルーピングされた表示用リスト (ヘッダー含む)
    private final MediatorLiveData<List<Object>> groupedProblemList = new MediatorLiveData<>();
    // --- End Problem List Screen ---

    // 削除: chapterProgress LiveData
    // private final MutableLiveData<List<ChapterProgressItem>> chapterProgress = new MutableLiveData<>();

    // 追加: ホーム画面用統計情報 LiveData
    private final MutableLiveData<Integer> weeklyAnswersCount = new MutableLiveData<>(0);
    private final MutableLiveData<Integer> weeklyGoal; // Remove initializer here
    private final MutableLiveData<Integer> totalAnswersCount = new MutableLiveData<>(0);
    private final MutableLiveData<Pair<Integer, Integer>> streakInfo = new MutableLiveData<>(new Pair<>(0, 0));
    private final MutableLiveData<int[]> weeklyDailyAnswerCounts = new MutableLiveData<>(new int[7]);
    // 追加: 今日の学習時間 LiveData (表示用文字列)
    private final MutableLiveData<String> todayStudyTimeLiveData = new MutableLiveData<>("今日の学習時間: 0分");

    // ★★★ 同期された学習情報 LiveData ★★★
    private final MutableLiveData<Date> syncedLastStudyDate = new MutableLiveData<>();
    private final MutableLiveData<Long> syncedContinuousStudyDays = new MutableLiveData<>(0L);

    // --- ランダム出題用の修正 --- 
    private List<String> allQids = null; // 全てのQIDリスト (nullで未ロードを示す)
    private final Random random = new Random(); // ランダム選択用
    // --- 修正ここまで ---

    // Data class to hold answer result details (can be defined as inner class or separate file)
    public static class AnswerResult {
        public final boolean isCorrect;
        public final Set<Integer> correctAnswers; // Set of correct answer indices (0-based)
        public final Set<Integer> userSelections; // Set of user selected indices (0-based)

        public AnswerResult(boolean isCorrect, Set<Integer> correctAnswers, Set<Integer> userSelections) {
            this.isCorrect = isCorrect;
            this.correctAnswers = correctAnswers != null ? Collections.unmodifiableSet(new HashSet<>(correctAnswers)) : Collections.emptySet();
            this.userSelections = userSelections != null ? Collections.unmodifiableSet(new HashSet<>(userSelections)) : Collections.emptySet();
        }
    }

    // --- StateFlows for Compose UI ---
    // Use MutableStateFlow for internal state management
    private final MutableStateFlow<Boolean> _isAnswered =
            StateFlowKt.MutableStateFlow(false);
    // Directly expose MutableStateFlow as StateFlow (since MutableStateFlow implements StateFlow)
    public final StateFlow<Boolean> isAnswered = _isAnswered;

    private final MutableStateFlow<Set<Integer>> _userSelections =
            StateFlowKt.MutableStateFlow(Collections.emptySet());
    // Directly expose MutableStateFlow as StateFlow
    public final StateFlow<Set<Integer>> userSelections = _userSelections;

    // StateFlow for the answer result
    private final MutableStateFlow<AnswerResult> _answerResult =
            StateFlowKt.MutableStateFlow(null);
    // Directly expose MutableStateFlow as StateFlow
    public final StateFlow<AnswerResult> answerResult = _answerResult;

    // --- End StateFlows ---

    // ★★★ Firestore インスタンスを追加 ★★★
    private final FirebaseFirestore db = FirebaseFirestore.getInstance();

    public QuizViewModel(@NonNull Application application) {
        super(application);
        database = QuizDatabase.getDatabase(application);
        quizDao = database.quizDao(); // Initialize QuizDao
        prefs = PreferenceManager.getDefaultSharedPreferences(application); // Init SharedPreferences

        // Initialize weeklyGoal by reading from SharedPreferences
        int savedGoal = prefs.getInt(PREF_WEEKLY_GOAL, DEFAULT_WEEKLY_GOAL);
        weeklyGoal = new MutableLiveData<>(savedGoal);
        
        // Load last solved QID from SharedPreferences
        String savedLastSolvedQid = prefs.getString(PREF_LAST_SOLVED_QID, null);
        lastSolvedQuizId.setValue(savedLastSolvedQid); // Initialize LiveData

        // 安全にAPIキーを取得
        String apiKey = SecurePreferences.getContentfulApiKey(application);
        String spaceId = SecurePreferences.getContentfulSpaceId(application);

        contentfulApi = new ContentfulGetApi(spaceId, apiKey);
        databaseHelper = new DatabaseHelperCoroutines();
        asyncHelper = new AsyncHelperCoroutines(contentfulApi);

        // MediatorLiveDataにソースを追加
        currentQuiz.addSource(loadedQuizzes, quizzes -> updateCurrentQuiz());

        // --- Problem List Screen Sources ---
        groupedProblemList.addSource(allQuizzes, quizzes -> updateGroupedProblemList());
        groupedProblemList.addSource(searchQuery, query -> updateGroupedProblemList());
        // --- End Problem List Screen Sources ---

        // currentQidIndex は不要になったため削除
        // currentQuiz.addSource(currentQidIndex, index -> updateCurrentQuiz());

        // resetAllBookmarkStates(); // Removed: Do not reset bookmarks on every ViewModel creation

        // 変更: 学習統計データと今日の学習時間をロード
        loadStatisticsData();
        loadTodayStudyTime(); // 今日の学習時間をロード
        loadAllQids(); // ViewModel 初期化時に全 QID をロード開始
    }

    // currentQuizを更新するヘルパーメソッド
    private void updateCurrentQuiz() {
        resetQuizState(); // Reset answer state when quiz changes
        List<QuizEntity> quizzes = loadedQuizzes.getValue();
        // loadedQuizzes は常に1件のはずなので、最初の要素をセット
        if (quizzes != null && !quizzes.isEmpty()) {
            currentQuiz.setValue(quizzes.get(0));
            Log.d(TAG, "Setting current quiz: " + quizzes.get(0).getQid());
            // isLoading.setValue(false); // isLoading is now handled by the coroutine in loadQuizByQid
        } else {
            Log.w(TAG, "Quizzes list is null or empty in updateCurrentQuiz (possible error or initial state).");
            currentQuiz.setValue(null); // データがない場合はnullを設定
            // isLoading.setValue(false); // isLoading is now handled by the coroutine in loadQuizByQid
        }
    }

    /**
     * 次のクイズをロードする（ランダムモードかシーケンシャルモードかを判断）
     * @param isRandomMode ランダムモードの場合はtrue
     */
    public void loadNextQuiz(boolean isRandomMode) {
        if (isRandomMode) {
            // ランダムモードの場合は、新しいランダムなqidをロードする
            // loadRandomQuizId() は内部で loadedQuizzes も更新する
            loadRandomQuizId();
        } else {
            // シーケンシャルモードの場合は、次のqidに進む
            moveToNextQuiz();
        }
    }

    // qidリストとインデックスを更新するヘルパーメソッドは不要になったため削除
    // private void updateQidListAndIndex(List<QuizEntity> quizzes) { ... }


    // --- Problem List Screen Logic ---

    /**
     * 全ての問題をデータベースから非同期でロードする
     */
    public void loadAllProblems() {
        isLoading.setValue(true);
        // Replace executor with viewModelScope using BuildersKt.launch
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            try {
                List<QuizEntity> quizzes = quizDao.getAllQuizzesSorted(); // Use quizDao field
                allQuizzes.postValue(quizzes);
                Log.d(TAG, "Loaded " + (quizzes != null ? quizzes.size() : 0) + " problems for the list.");
            } catch (Exception e) {
                Log.e(TAG, "Error loading all problems", e);
                errorMessage.postValue("問題リストの読み込みに失敗しました: " + e.getMessage());
                allQuizzes.postValue(Collections.emptyList()); // Post empty list on error
            } finally {
                isLoading.postValue(false);
            }
            return Unit.INSTANCE; // Return Unit for Kotlin suspend lambda compatibility
        });
    }

    /**
     * 検索クエリを設定する
     * @param query 検索文字列
     */
    public void setSearchQuery(String query) {
        searchQuery.setValue(query == null ? "" : query.trim());
    }

    /**
     * allQuizzes と searchQuery に基づいて groupedProblemList を更新する
     */
    private void updateGroupedProblemList() {
        List<QuizEntity> currentAllQuizzes = allQuizzes.getValue();
        String currentQuery = searchQuery.getValue();

        if (currentAllQuizzes == null) {
            groupedProblemList.setValue(Collections.emptyList());
            return;
        }

        isLoading.setValue(true); // Start loading state for filtering/grouping

        // Replace executor with viewModelScope using BuildersKt.launch
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            List<QuizEntity> filteredList;
            // Filter based on search query
            if (currentQuery == null || currentQuery.isEmpty()) {
                filteredList = new ArrayList<>(currentAllQuizzes); // No filter, use all
            } else {
                String lowerCaseQuery = currentQuery.toLowerCase();
                filteredList = currentAllQuizzes.stream()
                        .filter(quiz -> (quiz.getQid() != null && quiz.getQid().toLowerCase().contains(lowerCaseQuery)) ||
                                        (quiz.getQuestionCategory() != null && quiz.getQuestionCategory().toLowerCase().contains(lowerCaseQuery)))
                        .collect(Collectors.toList());
            }

            // Sort filteredList numerically by qid before grouping
            Collections.sort(filteredList, (q1, q2) -> {
                String qid1 = q1.getQid();
                String qid2 = q2.getQid();
                if (qid1 == null || qid2 == null) return 0; // Handle null qids

                String[] parts1 = qid1.split("-");
                String[] parts2 = qid2.split("-");

                if (parts1.length != 2 || parts2.length != 2) {
                    // Fallback to string comparison for invalid formats
                    return qid1.compareTo(qid2);
                }

                try {
                    int chapter1 = Integer.parseInt(parts1[0]);
                    int num1 = Integer.parseInt(parts1[1]);
                    int chapter2 = Integer.parseInt(parts2[0]);
                    int num2 = Integer.parseInt(parts2[1]);

                    int chapterCompare = Integer.compare(chapter1, chapter2);
                    if (chapterCompare != 0) {
                        return chapterCompare;
                    }
                    return Integer.compare(num1, num2);
                } catch (NumberFormatException e) {
                    // Fallback to string comparison if parsing fails
                    return qid1.compareTo(qid2);
                }
            });


            // Group by chapter and add headers
            Map<String, List<QuizEntity>> groupedMap = new LinkedHashMap<>(); // Use LinkedHashMap to preserve chapter order
            for (QuizEntity quiz : filteredList) {
                // Ensure chapter is not null or empty before creating header
                String chapterStr = quiz.getChapter();
                if (chapterStr != null && !chapterStr.isEmpty()) {
                    String chapterHeader = "第" + chapterStr ; // Correctly format the header
                    groupedMap.computeIfAbsent(chapterHeader, k -> new ArrayList<>()).add(quiz);
                } else {
                    // Handle cases where chapter might be missing (e.g., group under "その他")
                    groupedMap.computeIfAbsent("その他", k -> new ArrayList<>()).add(quiz);
                }
            }

            List<Object> displayList = new ArrayList<>();
            for (Map.Entry<String, List<QuizEntity>> entry : groupedMap.entrySet()) {
                displayList.add(entry.getKey()); // Add header
                displayList.addAll(entry.getValue()); // Add problems for this chapter
            }

            groupedProblemList.postValue(displayList);
            isLoading.postValue(false); // End loading state
            Log.d(TAG, "Updated grouped list. Query: '" + currentQuery + "', Items: " + displayList.size());
            return Unit.INSTANCE; // Return Unit
        });
    }

    // --- End Problem List Screen Logic ---


    /**
     * 指定されたカテゴリのクイズを取得 (ランダムに **1件** )
     * @param category カテゴリ
     */
    public void loadQuizzesByCategory(String category) {
        isLoading.setValue(true);
        correctAnswerCount.setValue(0); // 正解数をリセット
        loadedQuizzes.setValue(new ArrayList<>()); // 表示リストもクリア
        // Replace executor with viewModelScope using BuildersKt.launch
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            try {
                List<QuizEntity> quizzes = quizDao.getRandomQuizzesByCategorySync(category, 1); // Use quizDao field
                Log.d(TAG, "Loaded " + quizzes.size() + " random quiz for category: " + category);

                if (quizzes.isEmpty()) {
                    Log.d(TAG, "No quizzes found in DB for category: " + category + ". Fetching from Contentful.");
                    // Launch fetchFromContentful on Main dispatcher using BuildersKt.launch
                     BuildersKt.launch(viewModelScope, Dispatchers.getMain(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                         fetchFromContentful(category);
                         return Unit.INSTANCE;
                     });
                } else {
                    loadedQuizzes.postValue(quizzes); // LiveDataを更新 (1件のリスト)
                    isLoading.postValue(false);
                }
            } catch (Exception e) {
                Log.e(TAG, "Error loading quiz by category: " + category, e);
                errorMessage.postValue("データの読み込みに失敗しました: " + e.getMessage());
                isLoading.postValue(false);
            }
            return Unit.INSTANCE; // Return Unit
        });
    }

    /**
     * QIDでクイズを取得 (通常は1件のはず)
     * @param qid クイズID
     */
    public void loadQuizByQid(String qid) {
        Log.d(TAG, "[loadQuizByQid] Method Entered with QID: " + qid);

        if (qid == null || qid.isEmpty()) {
            Log.e(TAG, "[loadQuizByQid] Invalid QID provided: " + qid);
            errorMessage.postValue("無効な問題IDです。");
            return;
        }

        Log.d(TAG, "[loadQuizByQid] Proceeding with load. Setting isLoading to true for QID: " + qid);
        isLoading.setValue(true); // Set loading true only if we are proceeding

        // Use viewModelScope for database operations
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            List<QuizEntity> quizListResult = null; // Declare outside try
            QuizEntity quiz = null; // Declare outside try
            try {
                // ★★★ Add log at the beginning of the try block ★★★
                Log.d(TAG, "[loadQuizByQid IO] Entering try block for QID: " + qid);
                Log.d(TAG, "[loadQuizByQid IO] Querying DB for QID: " + qid);
                // Corrected method call: getQuizzesByQid returns a List
                quizListResult = quizDao.getQuizzesByQid(qid);
                Log.d(TAG, "[loadQuizByQid IO] DB query finished. Result list size: " + (quizListResult != null ? quizListResult.size() : "null"));
                
                if (quizListResult != null && !quizListResult.isEmpty()) {
                    quiz = quizListResult.get(0); // Get the first (and likely only) item
                    Log.d(TAG, "[loadQuizByQid IO] Quiz object retrieved from list: " + quiz.getQid()); // Log retrieved quiz
                } else {
                     Log.w(TAG, "[loadQuizByQid IO] Quiz list is null or empty.");
                }

                if (quiz != null) {
                    Log.d(TAG, "[loadQuizByQid IO] Quiz found in DB. Posting to loadedQuizzes.");
                    List<QuizEntity> quizList = new ArrayList<>();
                    quizList.add(quiz);
                    loadedQuizzes.postValue(quizList);
                } else {
                    Log.w(TAG, "[loadQuizByQid IO] Quiz was null after DB check. Posting error and empty list.");
                    errorMessage.postValue("問題が見つかりませんでした: " + qid);
                    loadedQuizzes.postValue(Collections.emptyList()); // Post empty list when not found
                }
            } catch (Exception e) {
                Log.e(TAG, "[loadQuizByQid IO] Error during DB query or processing for QID: " + qid, e);
                errorMessage.postValue("問題の読み込み中にエラーが発生しました。");
                loadedQuizzes.postValue(Collections.emptyList()); // Ensure list is empty on exception
            } finally {
                // ★★★ Add log at the beginning of the finally block ★★★
                Log.d(TAG, "[loadQuizByQid IO] Entering finally block. Setting isLoading to false for QID: " + qid);
                // Ensure isLoading is set to false AFTER processing, regardless of success/failure/exception
                isLoading.postValue(false);
            }
            return Unit.INSTANCE;
        });
    }

    /**
     * Contentfulからデータを取得し、DBに保存後、指定されたカテゴリ（またはランダム **1件** ）で再読み込み
     * @param categoryToLoadAfterFetch 取得後に読み込むカテゴリ (nullの場合はランダム1件)
     */
    private void fetchFromContentful(String categoryToLoadAfterFetch) {
        Log.d(TAG, "Fetching data from Contentful...");
        asyncHelper.fetchEntriesAsync("javaSilverQ",
            entries -> {
                Log.d(TAG, "Received " + entries.size() + " entries from Contentful");
                List<QuizEntity> entities = new ArrayList<>();
                for (CDAEntry entry : entries) {
                    try {
                        String qid = getField(entry, "qid");
                        String chapter = getField(entry, "chapter");
                        String category = getField(entry, "category");
                        String questionCategory = getField(entry, "questionCategory", getField(entry, "questioncategory", "")); // ネストして取得試行
                        String difficulty = getField(entry, "difficulty");
                        String code = getField(entry, "code");
                        String questionText = getField(entry, "questionText");
                        List<String> choices = entry.getField("choices");
                        List<Double> rawAnswers = entry.getField("answer");
                        List<Integer> intAnswers = new ArrayList<>();
                        if (rawAnswers != null) {
                            for (Double answer : rawAnswers) {
                                if (answer != null) intAnswers.add(answer.intValue());
                            }
                        }
                        String explanation = getField(entry, "explanation");

                        // 必須フィールドチェック
                        if (qid.isEmpty() || questionText.isEmpty() || choices == null || choices.isEmpty() || intAnswers.isEmpty()) {
                            Log.w(TAG, "Skipping entry due to missing required fields: " + entry.id());
                            continue;
                        }

                        // Create QuizEntity with default isBookmarked = false
                        QuizEntity entity = new QuizEntity(
                            qid, chapter, category, questionCategory, difficulty, code,
                            questionText, choices, intAnswers, explanation, false // Pass default bookmark status
                        );
                        entities.add(entity);
                    } catch (Exception e) {
                        Log.e(TAG, "Error processing entry: " + entry.id(), e);
                    }
                }

                if (entities.isEmpty()) {
                    Log.w(TAG, "No valid entities were created from Contentful entries");
                    errorMessage.postValue("有効なデータが見つかりませんでした");
                    isLoading.postValue(false);
                    return Unit.INSTANCE;
                }

                Log.d(TAG, "Saving " + entities.size() + " entities to database");
                asyncHelper.insertQuizEntitiesAsync(database, entities,
                    () -> {
                        Log.d(TAG, "Entities saved successfully. Reloading quiz.");
                        // 保存完了後、指定されたカテゴリまたはランダムで再読み込み
                        if (categoryToLoadAfterFetch != null) {
                            loadQuizzesByCategory(categoryToLoadAfterFetch); // カテゴリ指定で1件読み込み
                        } else {
                            loadRandomQuizzes(1); // ランダムで1件読み込み
                        }
                        return Unit.INSTANCE;
                    },
                    error -> {
                        Log.e(TAG, "Error saving entities: " + error);
                        errorMessage.postValue(error);
                        isLoading.postValue(false);
                        return Unit.INSTANCE;
                    }
                );
                return Unit.INSTANCE;
            },
            error -> {
                Log.e(TAG, "Error fetching from Contentful: " + error);
                errorMessage.postValue(error);
                isLoading.postValue(false);
                return Unit.INSTANCE;
            }
        );
    }

    /**
     * ランダムに **1件** のクイズを取得
     * @param count 取得するクイズ数 (引数は残すが、内部で1に固定)
     */
    public void loadRandomQuizzes(int count) {
        isLoading.setValue(true);
        correctAnswerCount.setValue(0);
        loadedQuizzes.setValue(new ArrayList<>());
        // Replace executor with viewModelScope using BuildersKt.launch
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            try {
                List<QuizEntity> quizzes = quizDao.getRandomQuizzesSync(1); // Use quizDao field, always 1
                Log.d(TAG, "Loaded " + quizzes.size() + " random quiz.");
                if (quizzes.isEmpty()) {
                    Log.d(TAG, "No random quiz found in DB. Fetching from Contentful.");
                     // Launch fetchFromContentful on Main dispatcher using BuildersKt.launch
                     BuildersKt.launch(viewModelScope, Dispatchers.getMain(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                         fetchFromContentful(null);
                         return Unit.INSTANCE;
                     });
                } else {
                    loadedQuizzes.postValue(quizzes); // LiveDataを更新 (1件のリスト)
                    isLoading.postValue(false);
                }
            } catch (Exception e) {
                Log.e(TAG, "Error loading random quiz", e);
                errorMessage.postValue("データの読み込みに失敗しました: " + e.getMessage());
                isLoading.postValue(false);
            }
             return Unit.INSTANCE; // Return Unit
        });
    }


    /**
     * エントリからフィールドを安全に取得するヘルパーメソッド (デフォルト値付き)
     */
    private String getField(CDAEntry entry, String fieldName, String defaultValue) {
        try {
            Object value = entry.getField(fieldName);
            return value != null ? value.toString() : defaultValue;
        } catch (Exception e) {
            // Log.w(TAG, "Field not found or error getting field " + fieldName + ": " + e.getMessage());
            return defaultValue;
        }
    }
     /**
     * エントリからフィールドを安全に取得するヘルパーメソッド (デフォルト値付き、オーバーロード)
     */
    private String getField(CDAEntry entry, String fieldName) {
        return getField(entry, fieldName, "");
    }


    /**
     * 次のシーケンシャルなQIDのクイズに進む (内部利用メソッドに変更)
     */
    private void moveToNextQuiz() {
        QuizEntity current = currentQuiz.getValue();
        if (current == null || current.getQid() == null || current.getQid().isEmpty()) {
            Log.e(TAG, "Cannot move to next quiz, current quiz or qid is null/empty.");
            errorMessage.postValue("現在のクイズ情報を取得できませんでした。");
            return;
        }

        String currentQid = current.getQid();
        Log.d(TAG, "Current QID for sequential move: " + currentQid);

        // QIDを解析 (例: "1-10")
        String[] parts = currentQid.split("-");
        if (parts.length != 2) {
            Log.e(TAG, "Invalid QID format for sequential move: " + currentQid);
            errorMessage.postValue("無効な問題ID形式です: " + currentQid);
            return;
        }

        try {
            int chapter = Integer.parseInt(parts[0]);
            int questionNum = Integer.parseInt(parts[1]);

            // 次の問題番号を計算
            int nextQuestionNum = questionNum + 1;
            String nextQid = chapter + "-" + nextQuestionNum;
            Log.d(TAG, "Calculated next sequential QID: " + nextQid);

            // 次のQIDでクイズをロード (loadQuizByQid を再利用)
            // loadQuizByQid は isLoading を true にし、完了時に false にする
            loadQuizByQid(nextQid);

        } catch (NumberFormatException e) {
            Log.e(TAG, "Error parsing QID for sequential move: " + currentQid, e);
            errorMessage.postValue("問題IDの解析に失敗しました: " + currentQid);
        }
    }


    /**
     * 正解をカウント
     */
    public void incrementCorrectAnswerCount() {
        Integer count = correctAnswerCount.getValue();
        if (count != null) {
            correctAnswerCount.setValue(count + 1);
        }
    }

    /**
     * 表示用のクイズリストLiveData (常に1件のはず)
     */
    public LiveData<List<QuizEntity>> getLoadedQuizzes() {
        return loadedQuizzes;
    }

    /**
     * 現在のクイズLiveData
     */
    public LiveData<QuizEntity> getCurrentQuiz() {
        return currentQuiz;
    }

    /**
     * 現在のクイズインデックスLiveData は不要
     */
     // public LiveData<Integer> getCurrentQuizIndex() { ... }

    // --- Problem List Screen LiveData ---
    /**
     * グルーピングされた表示用リストLiveData
     */
    public LiveData<List<Object>> getGroupedProblemList() {
        return groupedProblemList;
    }
    // --- End Problem List Screen LiveData ---

    /**
     * エラーメッセージLiveData
     */
    public LiveData<String> getErrorMessage() {
        return errorMessage;
    }

    /**
     * 正解数LiveData
     */
    public LiveData<Integer> getCorrectAnswerCount() {
        return correctAnswerCount;
    }

    /**
     * ローディング状態LiveData
     */
    public LiveData<Boolean> getIsLoading() {
        return isLoading;
    }

    /**
     * クイズ終了通知LiveData は不要
     */
    // public LiveData<Boolean> getQuizFinished() { ... }

    /**
     * 現在のqidリストのサイズを取得 は不要 (常に1のはず)
     */
    // public int getTotalQuizCount() { ... }

    /**
     * ランダムなクイズIDを取得するためのLiveData
     */
    public LiveData<String> getRandomQuizId() {
        return randomQuizId;
    }

    /**
     * 全てのQIDを非同期でロードし、メモリに保持する
     */
    private void loadAllQids() {
        // Check if list already exists or is being loaded
        if (allQids != null) {
             Log.d(TAG, "[loadAllQids] Skipping load, allQids already exists (size: " + allQids.size() + ")");
             return; // Already loaded
        }
        // Log start
        Log.i(TAG, "[loadAllQids] Starting to load all QIDs from DB..."); // Changed log level

        databaseHelper.loadAllQidsAsync(
            quizDao,
            qids -> {
                 // Log callback start
                 Log.i(TAG, "[loadAllQids] Success callback received.");
                if (qids != null && !qids.isEmpty()) {
                    allQids = new ArrayList<>(qids); // Store the fetched list
                    // Changed log level and added details
                    Log.i(TAG, "[loadAllQids] Successfully loaded " + allQids.size() + " QIDs into memory.");
                } else {
                    // Changed log level
                    Log.w(TAG, "[loadAllQids] Success callback, but loaded QID list is null or empty.");
                    allQids = Collections.emptyList(); // Set empty list
                }
                // Changed log level and kept existing log
                Log.i(TAG, "[loadAllQids] Finished processing success callback. Final allQids size: " + (allQids != null ? allQids.size() : "null"));
                return Unit.INSTANCE; 
            },
            error -> {
                 // Log callback start and error message
                 Log.e(TAG, "[loadAllQids] Error callback received: " + error);
                errorMessage.postValue("問題IDリストの読み込みに失敗しました: " + error);
                allQids = Collections.emptyList(); // Set empty list on error
                 // Log state after error
                 Log.e(TAG, "[loadAllQids] Finished processing error callback. allQids set to empty list.");
                return Unit.INSTANCE;
            }
        );
    }

    /**
     * ランダムなクイズIDをメモリ上のリストから取得し、対応するクイズをロードする
     */
    public void loadRandomQuizId() {
        // ★★★ ログを更新して isLoading のチェック前の状態も見る ★★★
        Log.d(TAG, "[loadRandomQuizId] Called. Current isLoading before check: " + isLoading.getValue() + ", allQids loaded: " + (allQids != null));

        // 既にロード中なら何もしない (念のため)
        if (Boolean.TRUE.equals(isLoading.getValue())) {
            Log.d(TAG, "[loadRandomQuizId] Already loading, skipping request.");
            return;
        }

        // ★★★ ロード開始を通知 (ここに移動) ★★★
        isLoading.setValue(true); 
        Log.d(TAG, "[loadRandomQuizId] Set isLoading=true. Proceeding...");

        if (allQids == null) {
            Log.w(TAG, "[loadRandomQuizId] QID list not loaded yet. Cannot proceed.");
            errorMessage.postValue("問題リスト準備中です。もう一度試してください。");
            isLoading.postValue(false); // ★★★ isLoading を false に設定 ★★★
            return;
        }

        if (allQids.isEmpty()) {
            Log.w(TAG, "[loadRandomQuizId] QID list is empty. Cannot load random quiz.");
            errorMessage.postValue("出題できる問題がありません。");
            isLoading.postValue(false); // ★★★ isLoading を false に設定 ★★★
            return;
        }

        // メモリ上のリストからランダムにqidを選択
        String randomId = allQids.get(random.nextInt(allQids.size()));
        Log.d(TAG, "[loadRandomQuizId] Selected random QID from memory: " + randomId);

        // 選択したqidを使ってクイズをロード
        // loadQuizByQid が isLoading の true -> false を内部で行う
        Log.d(TAG, "[loadRandomQuizId] Calling loadQuizByQid with randomId: " + randomId);
        loadQuizByQid(randomId); // loadQuizByQid は最後に isLoading を false にする
    }

    /**
     * 解答履歴をDBに保存し、統計を更新する
     * ★★★ Firestoreへの保存処理を追加 ★★★
     * @param qid 問題ID
     * @param isCorrect 正解したかどうか
     */
    public void recordAnswerResult(String qid, boolean isCorrect) {
        Log.d(TAG, "recordAnswerResult started for qid: " + qid + ", isCorrect: " + isCorrect);
        
        // 最後に解いた問題IDを保存 (LiveData & SharedPreferences)
        lastSolvedQuizId.postValue(qid);
        // ★★★ ローカルの SharedPreferences への保存は維持 ★★★
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (cScope, cont) -> {
            prefs.edit().putString(PREF_LAST_SOLVED_QID, qid).apply();
            return Unit.INSTANCE;
        });
        
        // ★★★ ローカルDBへの保存 (変更なし) ★★★
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            try {
                QuizHistory history = new QuizHistory(qid, isCorrect, System.currentTimeMillis());
                quizDao.insertHistory(history);
                Log.d(TAG, "[recordAnswerResult] Inserted history for problem: " + qid + ", Correct: " + isCorrect + " to LOCAL DB.");

                // ★★★ ローカル統計の更新も維持 ★★★
                Log.d(TAG, "[recordAnswerResult] Calling loadStatisticsData (for local stats)...");
                loadStatisticsData();

            } catch (Exception e) {
                Log.e(TAG, "Error inserting quiz history for problem: " + qid + " to LOCAL DB", e);
                BuildersKt.launch(viewModelScope, Dispatchers.getMain(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                    errorMessage.postValue("解答履歴のローカル保存に失敗しました: " + e.getMessage());
                    return Unit.INSTANCE;
                });
            }
            return Unit.INSTANCE;
        });

        // ★★★ Firestoreへの保存 (ログインユーザーのみ) ★★★
        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser != null) {
            String userId = currentUser.getUid();
            long timestamp = System.currentTimeMillis();

            // 1. 解答履歴を Firestore に保存
            Map<String, Object> historyData = new HashMap<>();
            historyData.put("qid", qid);
            historyData.put("isCorrect", isCorrect);
            historyData.put("timestamp", timestamp); // FieldValue.serverTimestamp() も利用可能

            db.collection("users").document(userId)
                .collection("quizHistory") // サブコレクションに保存
                .add(historyData) // 新しいドキュメントとして追加
                .addOnSuccessListener(documentReference ->
                    Log.i(TAG, "[Firestore] Quiz history added for user: " + userId + ", qid: " + qid))
                .addOnFailureListener(e ->
                    Log.e(TAG, "[Firestore] Error adding quiz history for user: " + userId, e));

            // ★★★ ユーザー統計情報 (最終学習日、連続日数) を更新 ★★★
            updateUserStatsInFirestore(userId);

        } else {
             Log.d(TAG, "[recordAnswerResult] User not logged in, skipping Firestore save.");
        }
    }

    /**
     * Toggles the bookmark status of the given quiz entity.
     * Updates the database and the currentQuiz LiveData.
     * ★★★ Firestoreへの保存処理を追加 ★★★
     * @param quiz The QuizEntity to toggle the bookmark status for.
     */
    public void toggleBookmarkStatus(QuizEntity quiz) {
        if (quiz == null || quiz.getQid() == null) {
            Log.w(TAG, "Cannot toggle bookmark status, quiz or qid is null.");
            return;
        }
        String qid = quiz.getQid();
        boolean currentStatus = quiz.isBookmarked();
        boolean newBookmarkStatus = !currentStatus;
        Log.d(TAG, "toggleBookmarkStatus called for qid: " + qid + ". Current: " + currentStatus + ", New: " + newBookmarkStatus);
        quiz.setBookmarked(newBookmarkStatus);

        // ★★★ ローカルDBの更新 (変更なし) ★★★
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            try {
                Log.d(TAG, "Executing LOCAL DB update for qid: " + qid + " with status: " + newBookmarkStatus);
                quizDao.updateBookmarkStatus(qid, newBookmarkStatus);
                Log.d(TAG, "LOCAL DB update successful for qid: " + qid);
                // Post update to LiveData on main thread
                BuildersKt.launch(viewModelScope, Dispatchers.getMain(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                List<QuizEntity> currentList = loadedQuizzes.getValue();
                if (currentList != null && !currentList.isEmpty()) {
                         List<QuizEntity> updatedList = new ArrayList<>(currentList); // Create a mutable copy
                         // Find and update the specific quiz in the list (assuming list contains the current quiz)
                         for(int i=0; i<updatedList.size(); i++){
                             if(updatedList.get(i).getQid().equals(qid)){
                                 updatedList.set(i, quiz); // Update with the modified quiz object
                                 break;
                             }
                         }
                        loadedQuizzes.postValue(updatedList);
                         Log.d(TAG, "Posted updated list to LiveData after LOCAL DB update for qid: " + qid);
                } else {
                        Log.w(TAG, "loadedQuizzes was null or empty when trying to post update after LOCAL DB update for qid: " + qid);
                }
                    return Unit.INSTANCE;
                });
            } catch (Exception e) {
                Log.e(TAG, "Error updating bookmark status in LOCAL DB for qid: " + qid, e);
                 BuildersKt.launch(viewModelScope, Dispatchers.getMain(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                     errorMessage.postValue("ブックマーク状態のローカル更新に失敗しました。");
                     // Revert local state if DB update failed
                     quiz.setBookmarked(currentStatus);
                     List<QuizEntity> currentListOnError = loadedQuizzes.getValue();
                     if (currentListOnError != null && !currentListOnError.isEmpty()) {
                           List<QuizEntity> revertedList = new ArrayList<>(currentListOnError);
                           for(int i=0; i<revertedList.size(); i++){
                               if(revertedList.get(i).getQid().equals(qid)){
                                   revertedList.set(i, quiz); // Update with the reverted quiz object
                                   break;
                               }
                           }
                         loadedQuizzes.postValue(revertedList);
                           Log.d(TAG, "Reverted local state and posted to LiveData due to LOCAL DB error for qid: " + qid);
                     }
                     return Unit.INSTANCE;
                 });
            }
            return Unit.INSTANCE;
        });

        // ★★★ Firestoreへの保存 (ログインユーザーのみ) ★★★
        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser != null) {
            String userId = currentUser.getUid();
            // ★★★ DocumentReference の取得を修正 ★★★
            com.google.firebase.firestore.DocumentReference userDocRef = db.collection("users").document(userId);

            FieldValue updateValue;
            if (newBookmarkStatus) {
                // ブックマーク追加
                updateValue = FieldValue.arrayUnion(qid);
                Log.d(TAG, "[Firestore] Adding bookmark for user: " + userId + ", qid: " + qid);
            } else {
                // ブックマーク削除
                updateValue = FieldValue.arrayRemove(qid);
                 Log.d(TAG, "[Firestore] Removing bookmark for user: " + userId + ", qid: " + qid);
            }

            // 'bookmarkedQids' フィールドを更新 (なければ作成)
            // ★★★ Map を使ってフィールド名を指定 ★★★
            Map<String, Object> updates = new HashMap<>();
            updates.put("bookmarkedQids", updateValue);

            userDocRef.set(updates, SetOptions.merge()) // Use the map here
                .addOnSuccessListener(aVoid ->
                    Log.i(TAG, "[Firestore] Bookmark update successful for user: " + userId + ", qid: " + qid))
                .addOnFailureListener(e -> { // ★★★ Log.e 修正 ★★★
                    Log.e(TAG, "[Firestore] Error updating bookmark for user: " + userId + ", qid: " + qid, e); // Pass exception 'e'
                     BuildersKt.launch(viewModelScope, Dispatchers.getMain(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                         errorMessage.postValue("ブックマークのサーバー保存に失敗しました。");
                         return Unit.INSTANCE;
                     });
                });
        } else {
            Log.d(TAG, "[toggleBookmarkStatus] User not logged in, skipping Firestore update.");
        }
    }

    /**
     * リソースをクリーンアップ
     */
    @Override
    protected void onCleared() {
        super.onCleared();
        databaseHelper.cleanup();
        asyncHelper.cleanup();
        // executorのシャットダウンも考慮 -> viewModelScope handles cancellation automatically
    }

    /**
     * Resets the bookmark state for all quizzes in the database to false.
     * This should typically be called once, e.g., during initial setup or from settings.
     */
    private void resetAllBookmarkStates() {
         // Replace executor with viewModelScope using BuildersKt.launch
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            try {
                Log.d(TAG, "Executing resetAllBookmarks in database...");
                quizDao.resetAllBookmarks();
                Log.d(TAG, "Database bookmark reset successful.");
            } catch (Exception e) {
                Log.e(TAG, "Error resetting bookmark states in database", e);
                 // Post error message on the main thread using BuildersKt.launch
                 BuildersKt.launch(viewModelScope, Dispatchers.getMain(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                     errorMessage.postValue("ブックマーク状態のリセットに失敗しました。");
                     return Unit.INSTANCE;
                 });
            }
             return Unit.INSTANCE; // Return Unit
        });
    }

    // 追加: 統計情報のLiveDataゲッター
    public LiveData<Integer> getWeeklyAnswersCount() { return weeklyAnswersCount; }
    public LiveData<Integer> getWeeklyGoal() { return weeklyGoal; }
    public LiveData<Integer> getTotalAnswersCount() { return totalAnswersCount; }
    public LiveData<Pair<Integer, Integer>> getStreakInfo() { return streakInfo; }
    public LiveData<int[]> getWeeklyDailyAnswerCounts() { return weeklyDailyAnswerCounts; }

    /**
     * Loads and calculates statistics data from the database asynchronously.
     */
    public void loadStatisticsData() {
        Log.d(TAG, "Loading statistics data...");
        BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
            try {
                // 1. 週ごとの解答数を取得
                long startOfWeekMillis = getStartOfWeekMillis();
                int weeklyCount = quizDao.getWeeklyAnswerCountSync(startOfWeekMillis);
                weeklyAnswersCount.postValue(weeklyCount);
                Log.d(TAG, "Weekly answers count: " + weeklyCount);

                // 2. 合計解答数を取得
                int totalCount = quizDao.getTotalAnswerCountSync();
                totalAnswersCount.postValue(totalCount);
                Log.d(TAG, "Total answers count: " + totalCount);

                // 3. 連続学習日数情報を計算・更新
                List<String> distinctDates = quizDao.getAllAnswerDaysSortedDesc();
                Log.d(TAG, "Distinct answer dates: " + distinctDates);
                calculateAndUpdateStreakInfo(distinctDates);

                // 4. 週ごとの日別解答数を計算・更新
                int[] dailyCounts = calculateWeeklyDailyCounts(startOfWeekMillis);
                weeklyDailyAnswerCounts.postValue(dailyCounts);
                Log.d(TAG, "Weekly daily counts: " + Arrays.toString(dailyCounts));
                
                // 5. 今日の学習時間をロード (loadStatisticsData が呼ばれるたびに日付チェックも行う)
                loadTodayStudyTime(); 

            } catch (Exception e) {
                Log.e(TAG, "Error loading statistics data", e);
                errorMessage.postValue("統計データの読み込みに失敗しました: " + e.getMessage());
            }
                     return Unit.INSTANCE;
        });
    }

    /**
     * Calculates the start of the current week (Monday 00:00:00) in milliseconds.
     */
    private long getStartOfWeekMillis() {
        Calendar calendar = Calendar.getInstance();
        // Set the first day of the week to Monday
        calendar.setFirstDayOfWeek(Calendar.MONDAY);
        // Set the calendar to the first day of the current week (Monday)
        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
        // Set time to the beginning of the day
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        return calendar.getTimeInMillis();
    }

    /**
     * Calculates the current streak and updates the best streak based on history.
     * Uses Calendar API for compatibility with API level 24.
     * @param distinctDates List of distinct answer dates (YYYY-MM-DD) sorted descending.
     */
    private void calculateAndUpdateStreakInfo(List<String> distinctDates) {
        if (distinctDates == null || distinctDates.isEmpty()) {
            streakInfo.postValue(new Pair<>(0, getBestStreakFromPrefs()));
            return;
        }

        int currentStreak = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
        Calendar todayCal = Calendar.getInstance();
        Calendar yesterdayCal = Calendar.getInstance();
        yesterdayCal.add(Calendar.DAY_OF_YEAR, -1);

        Calendar lastDateCal = Calendar.getInstance();
        try {
            Date lastDateParsed = sdf.parse(distinctDates.get(0));
            if (lastDateParsed == null) throw new ParseException("Parsing returned null", 0);
            lastDateCal.setTime(lastDateParsed);
        } catch (ParseException e) {
            Log.e(TAG, "Error parsing last date: " + distinctDates.get(0), e);
            streakInfo.postValue(new Pair<>(0, getBestStreakFromPrefs()));
            return;
        }

        // Check if the most recent answer was today or yesterday
        if (isSameDay(lastDateCal, todayCal) || isSameDay(lastDateCal, yesterdayCal)) {
            currentStreak = 1;
            Calendar expectedDateCal = (Calendar) lastDateCal.clone(); // Start from the last valid date
            expectedDateCal.add(Calendar.DAY_OF_YEAR, -1); // Expect the day before

            for (int i = 1; i < distinctDates.size(); i++) {
                Calendar currentDateCal = Calendar.getInstance();
                try {
                    Date currentDateParsed = sdf.parse(distinctDates.get(i));
                    if (currentDateParsed == null) throw new ParseException("Parsing returned null", 0);
                    currentDateCal.setTime(currentDateParsed);
                } catch (ParseException e) {
                    Log.e(TAG, "Error parsing date in streak calculation: " + distinctDates.get(i), e);
                    break; // Stop calculating if a date is invalid
                }

                if (isSameDay(currentDateCal, expectedDateCal)) {
                    currentStreak++;
                    expectedDateCal.add(Calendar.DAY_OF_YEAR, -1); // Expect the day before this one
                } else {
                    break; // Streak broken
                }
            }
        }

        int bestStreak = getBestStreakFromPrefs();
        if (currentStreak > bestStreak) {
            bestStreak = currentStreak;
            saveBestStreakToPrefs(bestStreak);
        }

        streakInfo.postValue(new Pair<>(currentStreak, bestStreak));
    }

    /**
     * Helper method to check if two Calendar instances represent the same day.
     */
    private boolean isSameDay(Calendar cal1, Calendar cal2) {
        if (cal1 == null || cal2 == null) {
            return false;
        }
        return cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
               cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
               cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);
    }

    /**
     * Retrieves the best streak from SharedPreferences.
     */
    private int getBestStreakFromPrefs() {
        return prefs.getInt(PREF_BEST_STREAK, 0);
    }

    /**
     * Saves the best streak to SharedPreferences.
     */
    private void saveBestStreakToPrefs(int bestStreak) {
        prefs.edit().putInt(PREF_BEST_STREAK, bestStreak).apply();
    }

    /**
     * Calculates the daily answer counts for the current week (Mon-Sun).
     */
    private int[] calculateWeeklyDailyCounts(long startOfWeekMillis) {
        int[] dailyCounts = new int[7];
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(startOfWeekMillis);

        // Loop through Monday (0) to Sunday (6)
        for (int i = 0; i < 7; i++) {
            long dayStartMillis = calendar.getTimeInMillis();
            calendar.add(Calendar.DAY_OF_MONTH, 1);
            long dayEndMillis = calendar.getTimeInMillis();

            // Query history count for this specific day
            // Note: This runs 7 separate queries. Could be optimized if needed.
            dailyCounts[i] = quizDao.getWeeklyAnswerCountSync(dayStartMillis, dayEndMillis); // Need to add this method to DAO
        }
        return dailyCounts;
    }

    // loadQuizData メソッドを追加
    public void loadQuizData(String qid) {
        // ... existing code ...
    }

    /**
     * Updates the weekly goal and saves it to SharedPreferences.
     * @param newGoal The new weekly goal to set.
     */
    public void updateWeeklyGoal(int newGoal) {
        if (newGoal > 0) { // Basic validation
            weeklyGoal.setValue(newGoal);
            // Replace executor with viewModelScope using BuildersKt.launch
            BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (coroutineScope, continuation) -> {
                prefs.edit().putInt(PREF_WEEKLY_GOAL, newGoal).apply();
                Log.d(TAG, "Weekly goal updated and saved: " + newGoal);
                 return Unit.INSTANCE; // Return Unit
            });
        } else {
            Log.w(TAG, "Attempted to set invalid weekly goal: " + newGoal);
            // Optionally, post an error message via LiveData
        }
    }

    // --- getter methods ---
    public LiveData<List<QuizEntity>> getAllQuizzesLiveData() { // 新しいゲッターを追加
        return allQuizzes;
    }
    // --- End getter methods ---

    // Reset state when loading a new quiz
    private void resetQuizState() {
        _isAnswered.setValue(false);
        _userSelections.setValue(Collections.emptySet());
        _answerResult.setValue(null);
    }

    // Placeholder for submitAnswer method
    public void submitAnswer(Set<Integer> selectedIndices) {
        Log.d(TAG, "submitAnswer called with indices: " + selectedIndices);
        QuizEntity quiz = currentQuiz.getValue();
        if (quiz == null || _isAnswered.getValue()) {
            Log.w(TAG, "submitAnswer called but quiz is null or already answered.");
            return; // Already answered or no quiz
        }

        // Update user selections state
        _userSelections.setValue(selectedIndices != null ? new HashSet<>(selectedIndices) : Collections.emptySet());

        // Perform answer checking
        List<Integer> correctAnswersFromEntity = quiz.getAnswer(); // Answers from entity are 1-based
        Set<Integer> correctAnswersZeroBased = new HashSet<>();
        if (correctAnswersFromEntity != null) {
            for (Integer answer : correctAnswersFromEntity) {
                if (answer != null && answer >= 0) { // Ensure answer is valid and non-negative
                    correctAnswersZeroBased.add(answer); // Remove '- 1'
                }
            }
        }

        boolean isCorrect = correctAnswersZeroBased.equals(_userSelections.getValue());
        Log.d(TAG, "Answer check - Correct indices (0-based): " + correctAnswersZeroBased + ", User indices: " + _userSelections.getValue() + ", Result: " + isCorrect);


        // Create AnswerResult
        AnswerResult result = new AnswerResult(isCorrect, correctAnswersZeroBased, _userSelections.getValue());
        _answerResult.setValue(result);

        // Mark as answered
        _isAnswered.setValue(true);

        // Record history (using existing method)
        recordAnswerResult(quiz.getQid(), isCorrect);

        // Optionally increment correct count (though maybe less relevant now)
        if (isCorrect) {
            incrementCorrectAnswerCount();
        }
    }

    // Overload for single choice submission
    public void submitAnswer(int selectedIndex) {
        Set<Integer> selections = new HashSet<>();
        selections.add(selectedIndex);
        submitAnswer(selections);
    }

    // 最後に解いた問題IDを取得
    public LiveData<String> getLastSolvedQuizId() {
        return lastSolvedQuizId;
    }

    /**
     * SharedPreferences から今日の学習時間を読み込み、日付が変わっていたらリセットする
     */
    private void loadTodayStudyTime() {
        String todayDateStr = getTodayDateString();
        String savedDateStr = prefs.getString(PREF_TODAY_STUDY_DATE, "");
        long todayStudyTimeMillis;

        if (todayDateStr.equals(savedDateStr)) {
            // 同じ日なら保存された時間を読み込む
            todayStudyTimeMillis = prefs.getLong(PREF_TODAY_STUDY_TIME_MILLIS, 0L);
        } else {
            // 日付が変わっていたらリセット
            todayStudyTimeMillis = 0L;
            // 新しい日付とリセットされた時間を保存
            prefs.edit()
                 .putString(PREF_TODAY_STUDY_DATE, todayDateStr)
                 .putLong(PREF_TODAY_STUDY_TIME_MILLIS, 0L)
                 .apply();
        }

        Log.d(TAG, "Loaded today's study time: " + todayStudyTimeMillis + "ms for date: " + todayDateStr);
        // LiveData を更新
        todayStudyTimeLiveData.postValue(formatDuration(todayStudyTimeMillis));
    }

    /**
     * 学習時間を追加し、SharedPreferences に保存して LiveData を更新する
     * @param durationMillis 追加する学習時間 (ミリ秒)
     */
    public void updateTodayStudyTime(long durationMillis) {
        if (durationMillis <= 0) return;

        String todayDateStr = getTodayDateString();
        String savedDateStr = prefs.getString(PREF_TODAY_STUDY_DATE, "");
        long currentTotalMillis;

        if (todayDateStr.equals(savedDateStr)) {
            // 同じ日なら現在の値に追加
            currentTotalMillis = prefs.getLong(PREF_TODAY_STUDY_TIME_MILLIS, 0L) + durationMillis;
        } else {
            // 日付が変わっていたら、新しい時間として記録し、日付も更新
            currentTotalMillis = durationMillis;
            prefs.edit().putString(PREF_TODAY_STUDY_DATE, todayDateStr).apply();
        }

        // 新しい合計時間を保存
        prefs.edit().putLong(PREF_TODAY_STUDY_TIME_MILLIS, currentTotalMillis).apply();
        Log.d(TAG, "Updated today's study time to: " + currentTotalMillis + "ms");

        // LiveData を更新
        todayStudyTimeLiveData.postValue(formatDuration(currentTotalMillis));
    }

    /**
     * ミリ秒を "今日の学習時間: X時間Y分" または "今日の学習時間: Y分" の形式にフォーマットする
     * @param durationMillis フォーマットする時間 (ミリ秒)
     * @return フォーマットされた文字列
     */
    private String formatDuration(long durationMillis) {
        long totalMinutes = TimeUnit.MILLISECONDS.toMinutes(durationMillis);
        if (totalMinutes == 0 && durationMillis > 0) {
             // 1分未満の場合は秒数を表示（例: 30秒）
             long seconds = TimeUnit.MILLISECONDS.toSeconds(durationMillis);
             return String.format(Locale.getDefault(), "今日の学習時間: %d秒", seconds);
        } else if (totalMinutes < 60) {
            // 60分未満
            return String.format(Locale.getDefault(), "今日の学習時間: %d分", totalMinutes);
        } else {
            // 60分以上
            long hours = TimeUnit.MINUTES.toHours(totalMinutes);
            long minutes = totalMinutes % 60;
            return String.format(Locale.getDefault(), "今日の学習時間: %d時間%d分", hours, minutes);
        }
    }
    
    /**
     * 今日の日付を "yyyy-MM-dd" 形式の文字列で取得する
     * @return 今日の日付文字列
     */
    private String getTodayDateString() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        return sdf.format(new Date());
    }
    
    /**
     * 今日の学習時間の LiveData を返すゲッター
     */
    public LiveData<String> getTodayStudyTimeLiveData() {
        return todayStudyTimeLiveData;
    }

    // ★★★ ブックマーク同期メソッドを追加 ★★★
    public void syncBookmarksFromFirestore() {
        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser == null) {
            Log.d(TAG, "[syncBookmarks] User not logged in, skipping sync.");
            return;
        }
        String userId = currentUser.getUid();
        Log.i(TAG, "[syncBookmarks] Starting bookmark sync for user: " + userId);

        db.collection("users").document(userId).get()
            .addOnSuccessListener(documentSnapshot -> {
                if (documentSnapshot.exists()) {
                    // Firestoreからブックマークリストを取得 (存在しない場合は空リスト)
                    List<String> firestoreBookmarks = (List<String>) documentSnapshot.get("bookmarkedQids");
                    if (firestoreBookmarks == null) {
                        firestoreBookmarks = Collections.emptyList();
                    }
                    Log.d(TAG, "[syncBookmarks] Fetched " + firestoreBookmarks.size() + " bookmarks from Firestore.");

                    // 同時に最終学習日と連続学習日数も取得・更新
                    com.google.firebase.Timestamp lastTimestamp = documentSnapshot.getTimestamp("lastStudyDate");
                    Date lastDate = (lastTimestamp != null) ? lastTimestamp.toDate() : null;
                    Long continuousDays = documentSnapshot.getLong("continuousStudyDays");
                    if (continuousDays == null) {
                        continuousDays = 0L; // Firestore にない場合は 0
                    }
                    syncedLastStudyDate.postValue(lastDate);
                    syncedContinuousStudyDays.postValue(continuousDays);
                    Log.d(TAG, "[syncBookmarks] Fetched stats - LastStudy: " + (lastDate != null ? lastDate.toString() : "null") + ", Streak: " + continuousDays);
                    // バックグラウンドでローカルDBを更新
                    List<String> finalFirestoreBookmarks = firestoreBookmarks; // Effectively final for lambda
                    BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                        try {
                            Log.d(TAG, "[syncBookmarks IO] Updating local DB bookmarks...");
                            // 1. ローカルDBの全QIDを取得 (効率は良くないが、今回はこれで)
                            List<String> localQids = quizDao.getAllQidsSync(); // 全QIDを取得するDAOメソッドが必要
                            if (localQids == null) localQids = Collections.emptyList();

                            // 2. ローカルDBのブックマーク状態をFirestoreの状態に合わせる
                            int updatedCount = 0;
                            for (String localQid : localQids) {
                                boolean shouldBeBookmarked = finalFirestoreBookmarks.contains(localQid);
                                // 現状の isBookmarked を取得し、変更が必要か確認 (DBアクセス削減のため)
                                QuizEntity currentEntity = quizDao.getQuizByQidSync(localQid); // qidで取得するDAOメソッドが必要
                                if (currentEntity != null && currentEntity.isBookmarked() != shouldBeBookmarked) {
                                    quizDao.updateBookmarkStatus(localQid, shouldBeBookmarked);
                                    updatedCount++;
                                }
                            }
                            Log.i(TAG, "[syncBookmarks IO] Finished updating local DB. " + updatedCount + " bookmark statuses changed.");

                            // 3. (オプション) UI反映のためにLiveDataを更新
                            // 例: ブックマークリスト画面などがあれば、ここで再読み込みトリガー
                            // 今回はQuizScreenの表示には直接影響しないため省略

                        } catch (Exception e) {
                            Log.e(TAG, "[syncBookmarks IO] Error updating local DB bookmarks", e);
                        }
                        return Unit.INSTANCE;
                    });

                } else {
                    Log.w(TAG, "[syncBookmarks] User document not found in Firestore for user: " + userId + ". Assuming no bookmarks.");
                    // Firestoreにドキュメントがない = ブックマーク0件としてローカルを更新 (全解除)
                     BuildersKt.launch(viewModelScope, Dispatchers.getIO(), CoroutineStart.DEFAULT, (cScope, cont) -> {
                          try {
                              quizDao.resetAllBookmarks(); // void なので変数代入不要
                              Log.i(TAG, "[syncBookmarks IO] Reset all local bookmarks as Firestore doc was missing.");
                          } catch (Exception e) {
                              Log.e(TAG, "[syncBookmarks IO] Error resetting local bookmarks", e);
                          }
                          return Unit.INSTANCE;
                     });
                }
            })
            .addOnFailureListener(e -> { // ★★★ Log.e 修正 ★★★
                Log.e(TAG, "[syncBookmarks] Error fetching user document from Firestore for user: " + userId, e); // Pass exception 'e'
            });
    }

    /**
     * Firestore のユーザードキュメント内の最終学習日と連続学習日数を更新する
     * @param userId ユーザーID
     */
    private void updateUserStatsInFirestore(String userId) {
        DocumentReference userDocRef = db.collection("users").document(userId);

        userDocRef.get().addOnSuccessListener(documentSnapshot -> {
            long currentContinuousDays = 0;
            Date lastStudyDate = null;

            if (documentSnapshot.exists()) {
                // Firestoreから既存の値を取得 (存在しない/型が違う場合はデフォルト値)
                Number days = documentSnapshot.getLong("continuousStudyDays");
                if (days != null) {
                    currentContinuousDays = days.longValue();
                }
                com.google.firebase.Timestamp lastTimestamp = documentSnapshot.getTimestamp("lastStudyDate");
                if (lastTimestamp != null) {
                    lastStudyDate = lastTimestamp.toDate();
                }
                 Log.d(TAG, "[updateUserStats] Fetched from Firestore - LastStudy: " + (lastStudyDate != null ? lastStudyDate.toString() : "null") + ", CurrentStreak: " + currentContinuousDays);
            } else {
                Log.w(TAG, "[updateUserStats] User document doesn't exist for user: " + userId + ". Will create with new stats.");
            }

            // 連続日数を計算
            Calendar todayCal = Calendar.getInstance();
            Calendar lastStudyCal = null;
            if (lastStudyDate != null) {
                lastStudyCal = Calendar.getInstance();
                lastStudyCal.setTime(lastStudyDate);
            }

            long newContinuousDays = 1; // デフォルトは1 (今日学習したので)

            if (lastStudyCal != null) {
                if (isSameDay(todayCal, lastStudyCal)) {
                    // 今日すでに学習済みの場合 -> 日数は変えない
                    newContinuousDays = currentContinuousDays;
                     Log.d(TAG, "[updateUserStats] Same day study detected. Streak remains: " + newContinuousDays);
                } else {
                    // 昨日学習したかチェック
                    Calendar yesterdayCal = (Calendar) todayCal.clone();
                    yesterdayCal.add(Calendar.DAY_OF_YEAR, -1);
                    if (isSameDay(lastStudyCal, yesterdayCal)) {
                        // 昨日学習していた -> インクリメント
                        newContinuousDays = currentContinuousDays + 1;
                         Log.d(TAG, "[updateUserStats] Yesterday study detected. Streak incremented to: " + newContinuousDays);
                    } else {
                        // 連続が途切れた -> 1 にリセット
                         Log.d(TAG, "[updateUserStats] Streak broken. Resetting streak to 1.");
                        // newContinuousDays は既に 1 なので変更不要
                    }
                }
            } else {
                 Log.d(TAG, "[updateUserStats] No previous study date found. Starting streak at 1.");
                 // newContinuousDays は既に 1
            }

            // Firestoreに書き込むデータを準備
            Map<String, Object> updates = new HashMap<>();
            updates.put("lastStudyDate", FieldValue.serverTimestamp());
            updates.put("continuousStudyDays", newContinuousDays);

            // ★★★ final 変数にコピーしてラムダ式で使用 ★★★
            final long finalNewContinuousDays = newContinuousDays;

            // Firestoreに書き込み (merge オプション付き)
            userDocRef.set(updates, SetOptions.merge())
                .addOnSuccessListener(aVoid ->
                    Log.i(TAG, "[updateUserStats] Firestore update successful for user: " + userId + ". New streak: " + finalNewContinuousDays)) // final 変数を参照
                .addOnFailureListener(e ->
                    Log.e(TAG, "[updateUserStats] Error updating Firestore stats for user: " + userId, e));

        }).addOnFailureListener(e -> {
            Log.e(TAG, "[updateUserStats] Error fetching user document for user: " + userId, e);
            // 読み込みに失敗した場合のエラーハンドリング (例: エラーメッセージ表示)
        });
    }
}

================
File: app/src/main/java/com/example/contentful_javasilver/data/QuizDao.java
================
package com.example.contentful_javasilver.data;

import androidx.lifecycle.LiveData;
import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;
import java.util.List;

@Dao
public interface QuizDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    void insertAll(List<QuizEntity> quizzes);

    @Query("SELECT * FROM quizzes")
    List<QuizEntity> getAllQuizzes();

    /**
     * 全てのクイズを章番号（数値として）とQID（文字列として）でソートして取得します。
     * @return ソートされたクイズエンティティのリスト
     */
    @Query("SELECT * FROM quizzes ORDER BY CAST(chapter AS INTEGER) ASC, qid ASC")
    List<QuizEntity> getAllQuizzesSorted();

    @Query("SELECT * FROM quizzes WHERE rowid IN (SELECT rowid FROM quizzes ORDER BY RANDOM() LIMIT :count)")
    LiveData<List<QuizEntity>> getRandomQuizzes(int count);

    @Query("SELECT * FROM quizzes WHERE rowid IN (SELECT rowid FROM quizzes ORDER BY RANDOM() LIMIT :count)")
    List<QuizEntity> getRandomQuizzesSync(int count);

    @Query("SELECT COUNT(*) FROM quizzes")
    LiveData<Integer> getQuizCount();

    @Query("SELECT COUNT(*) FROM quizzes")
    int getQuizCountSync();

    @Query("SELECT * FROM quizzes WHERE category = :category ORDER BY qid ASC")
    LiveData<List<QuizEntity>> getQuizzesByCategory(String category);

    @Query("SELECT * FROM quizzes WHERE category = :category ORDER BY RANDOM()") // カテゴリで同期的に取得し、ランダムに並び替え
    List<QuizEntity> getQuizzesByCategorySync(String category);

    @Query("SELECT * FROM quizzes WHERE category = :category ORDER BY RANDOM() LIMIT :count") // カテゴリでフィルタし、ランダムに指定件数取得
    List<QuizEntity> getRandomQuizzesByCategorySync(String category, int count);

    @Query("SELECT * FROM quizzes WHERE qid = :qid")
    LiveData<List<QuizEntity>> getQuizzesByQidLive(String qid);

    @Query("SELECT * FROM quizzes WHERE chapter = :chapter AND category = :category")
    LiveData<List<QuizEntity>> getQuizzesByChapterAndCategory(String chapter, String category);

    @Query("SELECT * FROM quizzes WHERE qid = :qid")
    List<QuizEntity> getQuizzesByQid(String qid);

    /**
     * 指定された章パターンに一致するカテゴリのリストを取得します。
     * 例: "Unit 1 / %" は Unit 1 のすべてのカテゴリを返します。
     * @param chapterPattern "Unit X / %" のようなパターン文字列 -> 修正: 正確な章名 (例: "1章")
     * @return 一致するカテゴリ名のリスト (重複なし、昇順ソート)
     */
    @Query("SELECT DISTINCT category FROM quizzes WHERE chapter = :chapterPattern ORDER BY category ASC")
    List<String> getCategoriesByChapterPattern(String chapterPattern);

    /**
     * Gets the qid of a single random quiz synchronously.
     * @return The qid of a random quiz, or null if the table is empty.
     */
    @Query("SELECT qid FROM quizzes ORDER BY RANDOM() LIMIT 1")
    String getRandomQuizIdSync();

    @Query("DELETE FROM quizzes")
    void deleteAll();

    // --- Methods for Bookmarks ---

    /**
     * Updates the bookmark status for a specific quiz.
     * @param qid The ID of the quiz to update.
     * @param isBookmarked The new bookmark status.
     */
    @Query("UPDATE quizzes SET isBookmarked = :isBookmarked WHERE qid = :qid")
    void updateBookmarkStatus(String qid, boolean isBookmarked);

    /**
     * Retrieves all bookmarked quizzes, ordered by QID.
     * @return A LiveData list of bookmarked QuizEntity objects.
     */
    @Query("SELECT * FROM quizzes WHERE isBookmarked = 1 ORDER BY qid ASC")
    LiveData<List<QuizEntity>> getBookmarkedQuizzes();

    /**
     * Resets the bookmark status for all quizzes to false.
     */
    @Query("UPDATE quizzes SET isBookmarked = 0")
    void resetAllBookmarks();

    // --- Methods for QuizHistory ---

    /**
     * Inserts a single quiz answer history record.
     * @param history The QuizHistory object to insert.
     */
    @Insert
    void insertHistory(QuizHistory history);

    /**
     * Retrieves all quiz history records, ordered by timestamp descending (newest first).
     * @return A LiveData list of all QuizHistory records.
     */
    @Query("SELECT * FROM quiz_history ORDER BY timestamp DESC")
    LiveData<List<QuizHistory>> getAllHistorySortedByTimestampDesc();

    /**
     * Retrieves all quiz history records synchronously.
     * @return A list of all QuizHistory records.
     */
    @Query("SELECT * FROM quiz_history")
    List<QuizHistory> getAllHistorySync();

    /**
     * Retrieves statistics for each problem (qid) based on the quiz history.
     * Calculates the count of correct and incorrect answers for each problemId.
     * @return A LiveData list of ProblemStats objects, ordered by problemId.
     */
    @Query("SELECT problemId, " +
           "SUM(CASE WHEN isCorrect = 1 THEN 1 ELSE 0 END) as correctCount, " +
           "SUM(CASE WHEN isCorrect = 0 THEN 1 ELSE 0 END) as incorrectCount " +
           "FROM quiz_history GROUP BY problemId ORDER BY problemId ASC")
    LiveData<List<ProblemStats>> getProblemStatistics();

    /**
     * Checks if a problem has been answered at least once.
     * @param problemId The ID of the problem (qid).
     * @return true if the problem has an entry in the history, false otherwise.
     */
    @Query("SELECT COUNT(*) > 0 FROM quiz_history WHERE problemId = :problemId")
    boolean isProblemAnswered(String problemId);

    // --- Methods for Home Screen Statistics ---

    /**
     * Gets the total number of answered questions from the history.
     * @return Total answer count.
     */
    @Query("SELECT COUNT(*) FROM quiz_history")
    int getTotalAnswerCountSync();

    /**
     * Gets the number of questions answered since the given timestamp.
     * @param startTimeMillis The start timestamp (e.g., start of the week).
     * @return Count of answers since the start time.
     */
    @Query("SELECT COUNT(*) FROM quiz_history WHERE timestamp >= :startTimeMillis")
    int getWeeklyAnswerCountSync(long startTimeMillis);

    /**
     * Gets the count of distinct days with answer history since the given timestamp.
     * @param startTimeMillis The start timestamp.
     * @return Count of distinct answer days.
     */
    @Query("SELECT COUNT(DISTINCT DATE(timestamp / 1000, 'unixepoch', 'localtime')) FROM quiz_history WHERE timestamp >= :startTimeMillis")
    int getDistinctAnswerDaysCount(long startTimeMillis);

    /**
     * Retrieves all distinct dates (YYYY-MM-DD) from the history, sorted descending.
     * Used for calculating the current learning streak.
     * @return A list of distinct dates as strings.
     */
    @Query("SELECT DISTINCT DATE(timestamp / 1000, 'unixepoch', 'localtime') as answerDate FROM quiz_history ORDER BY answerDate DESC")
    List<String> getAllAnswerDaysSortedDesc();

    /**
     * Gets the number of questions answered between the given timestamps (exclusive of end time).
     * Used for calculating daily counts.
     * @param startTimeMillis The start timestamp (inclusive).
     * @param endTimeMillis The end timestamp (exclusive).
     * @return Count of answers within the time range.
     */
    @Query("SELECT COUNT(*) FROM quiz_history WHERE timestamp >= :startTimeMillis AND timestamp < :endTimeMillis")
    int getWeeklyAnswerCountSync(long startTimeMillis, long endTimeMillis);

    // If needed, add methods to delete history, etc.
    // @Query("DELETE FROM quiz_history")
    // void deleteAllHistory();

    // ★★★ 全てのQIDを同期的に取得するメソッドを追加 ★★★
    @Query("SELECT qid FROM quizzes")
    List<String> getAllQidsSync();

    // ★★★ 指定されたQIDのQuizEntityを同期的に取得するメソッドを追加 (LIMIT 1) ★★★
    @Query("SELECT * FROM quizzes WHERE qid = :qid LIMIT 1")
    QuizEntity getQuizByQidSync(String qid);
}

================
File: app/src/main/java/com/example/contentful_javasilver/HomeFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;

import com.example.contentful_javasilver.databinding.FragmentHomeBinding;
import com.example.contentful_javasilver.viewmodels.QuizViewModel;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import java.util.Arrays;

/**
 * ホーム画面のフラグメント
 * - メインアクティビティからナビゲーションされる画面
 * - ランダム問題とチャプター選択への選択肢を提供
 */
public class HomeFragment extends Fragment {

    private static final String TAG = "HomeFragment"; // TAG for logging
    private FragmentHomeBinding binding;
    private QuizViewModel quizViewModel; // Add ViewModel instance

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(TAG, "onCreate");
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        Log.d(TAG, "onCreateView");
        binding = FragmentHomeBinding.inflate(inflater, container, false);
        quizViewModel = new ViewModelProvider(requireActivity()).get(QuizViewModel.class);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Log.d(TAG, "onViewCreated");
        final NavController navController = Navigation.findNavController(view);

        // ViewModel を取得
        quizViewModel = new ViewModelProvider(requireActivity()).get(QuizViewModel.class);

        // ★★★ ブックマーク同期処理を追加 ★★★
        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser != null) {
            Log.d(TAG, "User is logged in, attempting to sync bookmarks.");
            quizViewModel.syncBookmarksFromFirestore();
        } else {
            Log.d(TAG, "User is not logged in, skipping bookmark sync.");
            // オプション: ログインしていない場合、ローカルのブックマークをリセットするなどの処理も可能
        }
        // ★★★ 同期処理ここまで ★★★

        // Retrieve arguments
        HomeFragmentArgs args = HomeFragmentArgs.fromBundle(getArguments());
        String randomQuizId = args.getRandomQuizId();
        if (randomQuizId != null) {
            Log.i(TAG, "Received randomQuizId from LoadingFragment: " + randomQuizId);
            // TODO: Use the randomQuizId, e.g., pass it to a specific quiz button
            // For example, modify the randomExamButton listener:
            // 1. Check if randomQuizId is not null.
            // 2. If not null, navigate to QuizFragment with this specific qid.
            // 3. If null, navigate in random mode as it currently does.
        }

        // 統計データをロード（ストリーク情報を含む）
        quizViewModel.loadStatisticsData();

        // チャットバブルにアニメーションを適用
        applyAnimationsToChatBubbles();

        // ストリーク情報を監視して表示を更新
        quizViewModel.getStreakInfo().observe(getViewLifecycleOwner(), streakPair -> {
            int currentStreak = streakPair.first;
            int bestStreak = streakPair.second;
            Log.d(TAG, "Streak info observed: current=" + currentStreak + ", best=" + bestStreak);
            updateChatBubbleBasedOnStreak(currentStreak);
        });

        // --- isLoading の監視 (変更なし) ---
        quizViewModel.getIsLoading().observe(getViewLifecycleOwner(), isLoading -> {
            if (isLoading != null) {
                Log.d(TAG, "isLoading changed: " + isLoading);
            }
        });
        // --- isLoading の監視 終了 ---

        // --- 統計情報の監視呼び出し ---
        observeStatistics(); // Keep call to observe, but method content is reduced
        // --- 監視 終了 ---

        // ランダム出題ボタンのクリックリスナー (修正)
        binding.randomExamButton.setOnClickListener(v -> {
            // ViewModel のメソッド呼び出しと LiveData 監視を削除
            // quizViewModel.loadRandomQuizId();
            // quizViewModel.getRandomQuizId().observe(getViewLifecycleOwner(), qid -> { ... });

            // QuizFragment へ直接ナビゲーションし、ランダムモードを指定
            Log.d(TAG, "Navigating to QuizFragment in random mode (isRandomMode=true, qid=null)");
            HomeFragmentDirections.ActionHomeFragmentToQuizFragment action =
                    HomeFragmentDirections.actionHomeFragmentToQuizFragment();
            action.setIsRandomMode(true);
            try {
                navController.navigate(action);
            } catch (Exception e) {
                // ナビゲーション失敗時のエラーハンドリング
                Log.e(TAG, "Navigation to QuizFragment failed", e);
                Toast.makeText(getContext(), "画面遷移に失敗しました", Toast.LENGTH_SHORT).show();
            }
        });

        // ViewModelのエラーメッセージを監視してToast表示 (変更なし)
        quizViewModel.getErrorMessage().observe(getViewLifecycleOwner(), error -> {
            if (error != null && !error.isEmpty()) {
                Toast.makeText(getContext(), error, Toast.LENGTH_SHORT).show();
            }
        });

        // 分野別に出題ボタンのクリックリスナー (変更なし)
        binding.categoryExamButton.setOnClickListener(v ->
            navController.navigate(R.id.action_homeFragment_to_chapterFragment)
        );

        // 問題一覧ボタンのクリックリスナー (遷移先を学習履歴に変更)
        binding.listExamButton.setOnClickListener(v ->
            navController.navigate(R.id.navigation_history) // 遷移先を学習履歴画面のIDに変更
        );

        // --- 削除: 目標変更ボタンのクリックリスナー ---
        /*
        binding.editGoalButton.setOnClickListener(v -> {
            showEditGoalDialog();
        });
        */

        // --- 削除: ViewModel LiveData の週次進捗関連の監視 ---
        /*
        quizViewModel.getWeeklyAnswersCount().observe(getViewLifecycleOwner(), answers -> {
            // binding.weeklyAnswersValueTextView.setText(String.valueOf(answers)); <-- DELETED
            quizViewModel.getWeeklyGoal().observe(getViewLifecycleOwner(), goal -> {
                 // binding.weeklyLearningTimeProgress... <-- DELETED
            });
        });
        quizViewModel.getWeeklyGoal().observe(getViewLifecycleOwner(), goal -> {
            // binding.weeklyGoalValueTextView... <-- DELETED
        });
        */
    }

    // --- 削除: UIの初期セットアップメソッド ---
    /*
    private void setupUI() {
        // binding.weeklyLearningTimeProgress... <-- DELETED
        // binding.weeklyAnswersValueTextView... <-- DELETED
        // binding.weeklyGoalValueTextView... <-- DELETED
        // setupActivityBars(new int[7]); <-- DELETED
    }
    */

    // --- 変更: 統計情報監視メソッド (ログ出力のみ残す) ---
    private void observeStatistics() {
        Log.d(TAG, "observeStatistics called (Observing data for logging)");

        // 今週の解答数を監視 (ログのみ)
        quizViewModel.getWeeklyAnswersCount().observe(getViewLifecycleOwner(), answers -> {
            Log.d(TAG, "[Observer] Weekly answers observed: " + answers);
            // updateCircularProgressBar(...) <-- DELETED
        });

        // 週目標を監視 (ログのみ)
        quizViewModel.getWeeklyGoal().observe(getViewLifecycleOwner(), goal -> {
            Log.d(TAG, "[Observer] Weekly goal observed: " + goal);
            // updateCircularProgressBar(...) <-- DELETED
            // setupActivityBars(...) <-- DELETED
        });

        // 曜日別解答数を監視 (ログのみ)
        quizViewModel.getWeeklyDailyAnswerCounts().observe(getViewLifecycleOwner(), dailyCounts -> {
            Log.d(TAG, "[Observer] Daily counts observed: " + Arrays.toString(dailyCounts));
            // setupActivityBars(dailyCounts); <-- DELETED
        });
    }

    // --- 削除: 円形プログレスバー更新メソッド ---
    /*
    private void updateCircularProgressBar(int currentAnswers, int targetGoal) {
        // binding.weeklyLearningTimeProgress... <-- DELETED
    }
    */

    // --- 削除: 曜日別棒グラフセットアップメソッド ---
    /*
    private void setupActivityBars(int[] dailyCounts) {
        // binding.mondayBar... etc. <-- DELETED
    }
    */

    // --- 削除: 目標変更ダイアログ表示メソッド ---
    /*
    private void showEditGoalDialog() {
        // AlertDialog, EditText, FrameLayout related code <-- DELETED
    }
    */

    @Override
    public void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
    }

    @Override
    public void onPause() {
        super.onPause();
        Log.d(TAG, "onPause");
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.d(TAG, "onDestroyView");
        binding = null; // Important to prevent memory leaks
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
    }

    // チャットバブルにアニメーションを適用するメソッド
    private void applyAnimationsToChatBubbles() {
        try {
            // チャットバブルコンテナを取得
            View rootView = binding.getRoot();
            LinearLayout chatContainer = (LinearLayout) rootView.findViewWithTag("chat_container");
            
            if (chatContainer != null && chatContainer.getChildCount() >= 2) {
                View firstBubble = chatContainer.getChildAt(0);
                View secondBubble = chatContainer.getChildAt(1);

                // アニメーションをロード
                Animation chatAnim1 = AnimationUtils.loadAnimation(getContext(), R.anim.chat_bubble_in);
                Animation chatAnim2 = AnimationUtils.loadAnimation(getContext(), R.anim.chat_bubble_in);
                
                // 2つ目のバブルのアニメーション開始を遅延させる (300ms -> 450ms)
                chatAnim2.setStartOffset(450);
                
                // アニメーションを開始
                firstBubble.startAnimation(chatAnim1);
                secondBubble.startAnimation(chatAnim2);
                
                Log.d(TAG, "チャットバブルにアニメーションを適用しました");
            } else {
                Log.e(TAG, "チャットバブルコンテナが見つからないか、十分な子要素がありません");
            }
        } catch (Exception e) {
            Log.e(TAG, "チャットバブルアニメーション適用中にエラー: " + e.getMessage());
        }
    }
    
    // 連続学習日数に基づいてチャットバブルのテキストを更新するメソッド
    private void updateChatBubbleBasedOnStreak(int streak) {
        String message;
        
        if (streak == 0) {
            message = "今日も一緒にJavaの知識を深めていきましょう！どの分野から学習しますか？";
        } else if (streak < 3) {
            message = "連続" + streak + "日目の学習です！その調子で続けましょう！";
        } else if (streak < 7) {
            message = "すごい！連続" + streak + "日目の学習です！習慣化できていますね！";
        } else {
            message = "素晴らしい！連続" + streak + "日も学習を続けています！あなたはJavaマスターへの道を着実に歩んでいます！";
        }
        
        // チャットバブルのテキストを更新
        binding.chatBubbleText.setText(message);
        
        // ストリークが長い場合、アニメーションを再生（既存のアニメーションを再利用）
        if (streak >= 7) {
            // 既存のanimation_coffeeを再利用
            binding.lottieAnimationView.setAnimation(R.raw.animation_coffee);
            binding.lottieAnimationView.playAnimation();
        }
    }
}

================
File: app/src/main/res/layout/activity_main.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.drawerlayout.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity"
    tools:openDrawer="start">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/main_content_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="@drawable/rich_background_combined">

        <!-- Very Transparent Gradient Spots -->

        <View
            android:layout_width="300dp"
            android:layout_height="300dp"
            android:layout_marginStart="-10dp"
            android:layout_marginTop="150dp"
            android:background="@drawable/gradient_spot_blue"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <View
            android:layout_width="300dp"
            android:layout_height="300dp"
            android:background="@drawable/gradient_spot_orange"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            android:layout_marginTop="-60dp"
            android:layout_marginStart="-60dp" />

        <View
            android:layout_width="300dp"
            android:layout_height="300dp"
            android:layout_marginTop="0dp"
            android:layout_marginEnd="-10dp"
            android:background="@drawable/gradient_spot_pink"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <View
            android:layout_width="350dp"
            android:layout_height="350dp"
            android:layout_marginBottom="140dp"
            android:layout_marginEnd="-60dp"
            android:background="@drawable/gradient_spot_green"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.631"
            app:layout_constraintStart_toStartOf="parent" />

        <!-- End Gradient Spots -->

        <com.google.android.material.appbar.AppBarLayout
            android:id="@+id/appBarLayout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@android:color/transparent"
            app:elevation="0dp"
            app:layout_constraintTop_toTopOf="parent">

            <com.google.android.material.appbar.MaterialToolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                android:background="@android:color/transparent"
                app:layout_constraintTop_toTopOf="parent"
                app:theme="@style/ThemeOverlay.App.Toolbar">

                <!-- Comment out direct tint setting -->
                <!-- app:navigationIconTint="@android:color/white" -->

                <TextView
                    android:id="@+id/toolbar_title_custom"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_gravity="start|center_vertical"
                    android:layout_marginStart="16dp"
                    android:text=""
                    android:textAppearance="@style/TextAppearance.Material3.TitleLarge"
                    android:textColor="@android:color/white" />

            </com.google.android.material.appbar.MaterialToolbar>

        </com.google.android.material.appbar.AppBarLayout>

        <androidx.fragment.app.FragmentContainerView
            android:id="@+id/nav_host_fragment"
            android:name="androidx.navigation.fragment.NavHostFragment"
            android:layout_width="0dp"
            android:layout_height="0dp"
            app:defaultNavHost="true"
            app:layout_constraintTop_toBottomOf="@id/appBarLayout"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:navGraph="@navigation/nav_graph" />

        <!-- Bottom Navigation Toggle UI -->
        <androidx.cardview.widget.CardView
            android:id="@+id/bottomNavCard"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginBottom="32dp"
            app:cardBackgroundColor="#10000000"
            app:cardElevation="8dp"
            app:cardCornerRadius="20dp"
            android:outlineSpotShadowColor="#8000A0FF"
            android:outlineAmbientShadowColor="#5000A0FF"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent">

            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:background="@drawable/bottom_nav_background"
                android:padding="4dp">

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/homeToggle"
                    style="@style/Widget.MaterialComponents.Button.UnelevatedButton"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginEnd="4dp"
                    android:text="@string/home"
                    android:textColor="@color/toggle_text_color"
                    app:icon="@drawable/ic_home"
                    app:iconTint="@color/toggle_icon_color"
                    app:iconPadding="8dp"
                    android:checkable="true"
                    android:checked="true"
                    app:backgroundTint="@android:color/transparent"
                    android:stateListAnimator="@animator/toggle_elevation_animator"
                    android:outlineAmbientShadowColor="#8000E5FF"
                    android:outlineSpotShadowColor="#A000E5FF"
                    android:background="@drawable/toggle_navigation_selector"
                    android:paddingStart="16dp"
                    android:paddingEnd="16dp"
                    android:paddingTop="8dp"
                    android:paddingBottom="8dp"/>

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/learnToggle"
                    style="@style/Widget.MaterialComponents.Button.TextButton"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="4dp"
                    android:text="@string/learn"
                    android:textColor="@color/toggle_text_color"
                    app:icon="@drawable/ic_list"
                    app:iconTint="@color/toggle_icon_color"
                    app:iconPadding="8dp"
                    android:checkable="true"
                    android:checked="false"
                    app:backgroundTint="@android:color/transparent"
                    android:stateListAnimator="@animator/toggle_elevation_animator"
                    android:outlineAmbientShadowColor="#8000E5FF"
                    android:outlineSpotShadowColor="#A000E5FF"
                    android:background="@drawable/toggle_navigation_selector"
                    android:paddingStart="16dp"
                    android:paddingEnd="16dp"
                    android:paddingTop="8dp"
                    android:paddingBottom="8dp"/>
            </LinearLayout>
        </androidx.cardview.widget.CardView>

    </androidx.constraintlayout.widget.ConstraintLayout>

    <com.google.android.material.navigation.NavigationView
        android:id="@+id/navigation_view"
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        android:background="@color/drawer_background_dark_semi_transparent"
        app:itemTextColor="@color/drawer_item_color_selector"
        app:itemIconTint="@color/drawer_item_color_selector"
        app:itemTextAppearance="@style/TextAppearance.App.TitleMedium"
        app:menu="@menu/drawer_menu"
        app:itemBackground="@android:color/transparent" />

</androidx.drawerlayout.widget.DrawerLayout>

================
File: app/src/main/res/layout/fragment_home.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@android:color/transparent"
    android:fitsSystemWindows="true">

    <LinearLayout
        android:id="@+id/home_content_layout"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:orientation="vertical"
        android:padding="16dp"
        android:clipToPadding="false"
        android:clipChildren="false"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <!-- Learn Stats -->
        <!-- Learning stats area removed -->

        <!-- Character Image -->
        <!-- ImageView with id characterImageView removed -->

        <com.airbnb.lottie.LottieAnimationView
            android:id="@+id/lottieAnimationView"
            android:layout_width="280dp"
            android:layout_height="280dp"
            android:scaleType="centerCrop"
            android:layout_gravity="center_horizontal"
            android:layout_marginTop="-56dp"
            android:layout_marginBottom="-24dp"
            app:lottie_autoPlay="true"
            app:lottie_loop="true"
            app:lottie_rawRes="@raw/animation_coffee" />

        <!-- Chat Bubble UI -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
                    android:orientation="vertical"
            android:layout_marginStart="12dp"
            android:layout_marginEnd="32dp"
            android:layout_marginTop="16dp"
            android:tag="chat_container">

                    <TextView
                        android:id="@+id/chatBubbleTitle"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:background="@drawable/chat_bubble_background"
                        android:padding="16dp"
                        android:text="こんにちは、Java学習者！"
                                android:textColor="@android:color/white"
                        android:textSize="18sp"
                        android:textStyle="bold"
                        android:layout_marginBottom="12dp"/>

                    <TextView
                        android:id="@+id/chatBubbleText"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:background="@drawable/chat_bubble_background"
                        android:padding="16dp"
                        android:text="今日も一緒にJavaの知識を深めていきましょう！どの分野から学習しますか？"
                        android:textColor="@android:color/white"
                        android:textSize="16sp"
                        android:layout_marginBottom="16dp"/>

        </LinearLayout>

        <!-- Action Buttons (Moved below Chat UI) -->
        <LinearLayout
            android:id="@+id/topButtonRow"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center_horizontal"
            android:layout_marginStart="12dp"
            android:layout_marginEnd="16dp"
            android:layout_marginBottom="8dp">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/categoryExamButton"
                style="@style/Widget.Material3.Button.OutlinedButton"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:minHeight="0dp"
                android:layout_weight="1"
                android:layout_marginEnd="8dp"
                android:text="@string/exam_category"
                android:textColor="#00BFFF"
                app:icon="@drawable/ic_folder_24"
                app:iconTint="#00BFFF"
                app:iconPadding="8dp"
                app:iconSize="24dp"
                app:backgroundTint="#1A00BFFF"
                app:cornerRadius="28dp"
                app:strokeColor="#00BFFF"
                app:strokeWidth="2dp"
                android:paddingStart="12dp" android:paddingEnd="12dp" android:paddingTop="8dp" android:paddingBottom="8dp"
                android:textAllCaps="false" android:textSize="14sp" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/listExamButton"
                style="@style/Widget.Material3.Button.OutlinedButton"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:minHeight="0dp"
                android:layout_weight="1"
                android:layout_marginStart="8dp"
                android:text="@string/title_history"
                android:textColor="#88FF88"
                app:icon="@drawable/ic_history_24dp"
                app:iconTint="#88FF88"
                app:iconPadding="8dp"
                app:iconSize="24dp"
                app:backgroundTint="#1A88FF88"
                app:cornerRadius="28dp"
                app:strokeColor="#88FF88"
                app:strokeWidth="2dp"
                android:paddingStart="12dp" android:paddingEnd="12dp" android:paddingTop="8dp" android:paddingBottom="8dp"
                android:textAllCaps="false" android:textSize="14sp" />
        </LinearLayout>

        <!-- LinearLayout container for randomExamButton to control its width -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginStart="12dp"
            android:layout_marginEnd="16dp"
            android:layout_marginBottom="24dp">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/randomExamButton"
                style="@style/Widget.Material3.Button.OutlinedButton"
                android:layout_width="0dp" 
                android:layout_height="wrap_content"
                android:layout_weight="1" 
                android:minHeight="0dp"
                android:layout_marginEnd="8dp" 
                android:text="@string/exam_random"
                android:textColor="#FF70C6"
                app:icon="@drawable/ic_shuffle"
                app:iconTint="#FF70C6"
                app:iconPadding="12dp"
                app:iconSize="24dp"
                app:backgroundTint="#1AFF70C6"
                app:cornerRadius="28dp"
                app:strokeColor="#FF70C6"
                app:strokeWidth="2dp"
                android:paddingStart="16dp" android:paddingEnd="16dp" android:paddingTop="8dp" android:paddingBottom="8dp"
                android:textAllCaps="false" android:textSize="14sp" />

            <!-- Spacer View to limit randomExamButton width -->
            <View
                android:layout_width="0dp"
                android:layout_height="0dp"
                android:layout_weight="1" />

        </LinearLayout>

    </LinearLayout>

    <!-- Bottom Navigation Toggle UI is removed - now in MainActivity -->

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: app/src/main/java/com/example/contentful_javasilver/MainActivity.java
================
package com.example.contentful_javasilver;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager; // Use androidx.preference if available, but this works too
import android.util.Log;
import android.view.MenuItem; // Import MenuItem
import android.view.View;
import android.view.Menu; // Import Menu
import android.graphics.PorterDuff; // Import PorterDuff for tinting
import androidx.core.content.ContextCompat; // Import ContextCompat
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.core.graphics.Insets; // Correct import for Insets
import androidx.core.graphics.drawable.DrawableCompat;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.navigation.NavController;
import androidx.navigation.NavDestination;
import androidx.navigation.NavGraph;
import androidx.navigation.NavOptions;
import androidx.navigation.Navigation;
import androidx.navigation.fragment.NavHostFragment;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;

import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.navigation.NavigationView; // Import NavigationView
import android.widget.TextView; // Import TextView
import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.ActivityMainBinding;
import com.example.contentful_javasilver.utils.SecurePreferences;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet; // Import HashSet
import java.util.List;
import java.util.Set; // Import Set
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.graphics.drawable.Drawable;
import android.content.Intent;
import android.net.Uri;
import dagger.hilt.android.AndroidEntryPoint; // Import Hilt annotation

@AndroidEntryPoint
public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
    private ActivityMainBinding binding;
    private NavController navController;
    private AppBarConfiguration appBarConfiguration; // Make it a field
    private DrawerLayout drawerLayout; // Add DrawerLayout field

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // Apply theme before super.onCreate() and setContentView()
        applyAppTheme();

        // --- Enable Edge-to-Edge display --- (Moved before super.onCreate)
        WindowCompat.setDecorFitsSystemWindows(getWindow(), false);

        super.onCreate(savedInstanceState);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        
        // 背景アニメーションの適用
        View mainContainer = binding.mainContentContainer;
        Animation gradientAnimation = AnimationUtils.loadAnimation(this, R.anim.gradient_animation);
        mainContainer.startAnimation(gradientAnimation);

        // Apply insets listener to AppBarLayout to handle status bar overlap
        final AppBarLayout appBarLayout = binding.appBarLayout; // Target AppBarLayout
        final int originalPaddingTop = appBarLayout.getPaddingTop();
        final int originalPaddingLeft = appBarLayout.getPaddingLeft();
        final int originalPaddingRight = appBarLayout.getPaddingRight();
        final int originalPaddingBottom = appBarLayout.getPaddingBottom();

        ViewCompat.setOnApplyWindowInsetsListener(appBarLayout, (v, windowInsets) -> {
            Insets insets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars());
            // Apply the top inset as padding to the AppBarLayout
            v.setPadding(
                originalPaddingLeft + insets.left,
                originalPaddingTop + insets.top,
                originalPaddingRight + insets.right,
                originalPaddingBottom
            );
            // Return the insets for propagation
            return windowInsets;
        });

        // Apply insets listener to NavigationView to handle system bars overlap
        final int originalNavPaddingLeft = binding.navigationView.getPaddingLeft();
        final int originalNavPaddingTop = binding.navigationView.getPaddingTop();
        final int originalNavPaddingRight = binding.navigationView.getPaddingRight();
        final int originalNavPaddingBottom = binding.navigationView.getPaddingBottom();

        ViewCompat.setOnApplyWindowInsetsListener(binding.navigationView, (v, windowInsets) -> {
            Insets insets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars());
            // Apply system bar insets as padding to the NavigationView
            v.setPadding(
                originalNavPaddingLeft + insets.left,
                originalNavPaddingTop + insets.top,
                originalNavPaddingRight + insets.right,
                originalNavPaddingBottom + insets.bottom
            );
            return windowInsets;
        });

        drawerLayout = binding.drawerLayout; // Get DrawerLayout
        NavigationView navigationView = binding.navigationView; // Re-enabled declaration

        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager()
                .findFragmentById(R.id.nav_host_fragment);
        navController = navHostFragment.getNavController();

        // Toolbar setup (variable declaration removed as it's accessed via binding)
        setSupportActionBar(binding.toolbar);

        // Define top-level destinations based on Drawer menu and NavGraph fragment IDs
        Set<Integer> topLevelDestinations = new HashSet<>(Arrays.asList(
                R.id.homeFragment,         // Home Fragment ID
                // R.id.problemListFragment, // Problem List Fragment ID - Removed from top-level
                R.id.navigation_bookmark   // Bookmark Fragment ID (using existing ID)
                // R.id.settingsFragment is removed to show back button instead of drawer icon
        ));
        appBarConfiguration = new AppBarConfiguration.Builder(topLevelDestinations)
                .setOpenableLayout(drawerLayout) // Link DrawerLayout
                .build();

        // Setup ActionBar with NavController and DrawerLayout
        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);

        // Setup NavigationView listener
        navigationView.setNavigationItemSelectedListener(this);

        // Disable default title setting by NavigationUI
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayShowTitleEnabled(false);
        }

        // --- Listener for hiding/showing UI elements and setting custom title --- (Modified)
        navController.addOnDestinationChangedListener((controller, destination, arguments) -> {
            int destId = destination.getId();
            String destLabel = destination.getLabel() != null ? destination.getLabel().toString() : "No Label";
            Log.d("MainActivity", "Navigating to: " + destLabel + " (" + destId + ")");

            TextView customTitle = binding.toolbarTitleCustom; // Get custom title TextView

            // Check if the current destination is a top-level destination
            boolean isTopLevelDestination = appBarConfiguration.getTopLevelDestinations().contains(destId);

            // Show/Hide Toolbar and Bottom Nav based on destination
            if (destId == R.id.startFragment || destId == R.id.loadingFragment) {
                Log.d("MainActivity", "Hiding UI for " + destLabel);
                binding.appBarLayout.setVisibility(View.GONE);
                customTitle.setVisibility(View.GONE); // Hide custom title as well
                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED); // Lock drawer
                binding.bottomNavCard.setVisibility(View.GONE); // Hide bottom navigation
            } else {
                Log.d("MainActivity", "Showing Toolbar for " + destLabel);
                binding.appBarLayout.setVisibility(View.VISIBLE);
                customTitle.setVisibility(View.VISIBLE); // Show custom title
                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED); // Unlock drawer

                // Hide bottom nav specifically for QuizFragment
                if (destId == R.id.quizFragment) {
                    Log.d("MainActivity", "Hiding BottomNav for QuizFragment");
                    binding.bottomNavCard.setVisibility(View.GONE);
                } else {
                    Log.d("MainActivity", "Showing BottomNav for " + destLabel);
                    binding.bottomNavCard.setVisibility(View.VISIBLE);
                }

                // Set the text of the custom title TextView
                if (destId == R.id.problemListFragment) {
                    // 問題一覧フラグメントのとき専用タイトル設定
                    customTitle.setText("");
                    customTitle.setVisibility(View.GONE); // Hide title for problem list
                    Log.d("MainActivity", "Hiding custom title for Problem List");
                } else if (destination.getLabel() != null) {
                    customTitle.setText(destination.getLabel());
                    customTitle.setVisibility(View.VISIBLE); // Show for other destinations
                    Log.d("MainActivity", "Setting custom title to: " + destination.getLabel());
                } else {
                    customTitle.setText(""); // Clear title if no label
                    customTitle.setVisibility(View.GONE); // Hide empty title
                    Log.d("MainActivity", "Setting empty custom title");
                }

                // Update toggle buttons based on destination
                updateToggleState(destId);

                // リーン画面のとき設定ボタンの表示を更新
                invalidateOptionsMenu();
            }
        });
        
        // Setup toggle buttons
        setupToggleButtons();

        // --- Removed BottomNavigationView listeners --- 

        String apiKey = BuildConfig.CONTENTFUL_ACCESS_TOKEN;
        String spaceId = BuildConfig.CONTENTFUL_SPACE_ID;
        SecurePreferences.initializeSecureKeys(getApplicationContext(), apiKey, spaceId);

        // Restore handleIntent call at the end of onCreate logic
        // Check if the app was launched from a Contentful link
        handleIntent(getIntent());
    }

    // ★ Restore empty handleIntent method definition ★
    private void handleIntent(Intent intent) {
        // TODO: Implement logic to handle intents (e.g., deep links) if needed.
        // Check if the intent has data (like a deep link)
        if (intent != null && intent.getData() != null) {
            Uri data = intent.getData();
            Log.d("MainActivity", "Handling intent data: " + data.toString());
            // Example: Navigate based on deep link path
            // List<String> pathSegments = data.getPathSegments();
            // if (pathSegments != null && pathSegments.size() > 0) {
            //     String firstSegment = pathSegments.get(0);
            //     if ("quiz".equals(firstSegment) && pathSegments.size() > 1) {
            //         String qid = pathSegments.get(1);
            //         navigateToQuizWithQid(qid);
            //     }
            // }
        }
    }

    // --- Inflate Toolbar Menu and Apply Tint --- (Added/Modified)
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu); // Corrected menu file name
        
        // リーン画面のときは設定ボタンを表示しない
        if (navController.getCurrentDestination() != null && 
            navController.getCurrentDestination().getId() == R.id.problemListFragment) {
            menu.findItem(R.id.action_settings).setVisible(false);
        } else {
            // Tint the settings icon white
            MenuItem settingsItem = menu.findItem(R.id.action_settings);
            if (settingsItem != null && settingsItem.getIcon() != null) {
                settingsItem.getIcon().setColorFilter(ContextCompat.getColor(this, android.R.color.white), PorterDuff.Mode.SRC_ATOP);
            }
        }
        return true;
    }

    // --- Handle Toolbar Item Selection --- (Optional, add if needed)
    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        if (id == R.id.action_settings) {
            // Navigate to settings fragment
            navController.navigate(R.id.settingsFragment); // Ensure ID matches nav_graph
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    // --- Handle Navigation Item Selection --- (Added)
    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int itemId = item.getItemId();

        // Close the drawer
        drawerLayout.closeDrawer(GravityCompat.START);

        // Handle navigation using NavController
        // Use NavOptions to pop up to the start destination (Home) to avoid deep back stack
        NavOptions navOptions = new NavOptions.Builder()
                .setLaunchSingleTop(true)
                .setPopUpTo(R.id.nav_home, false) // Pop up to home, don't pop home itself
                .build();

        try {
            // Use NavigationUI.onNavDestinationSelected for standard behavior
            // or handle navigation manually for custom logic
            boolean handled = NavigationUI.onNavDestinationSelected(item, navController);
            if (handled) {
                // Standard navigation handled, just close the drawer
            } else {
                // Handle custom navigation or non-standard menu items if needed
                if (itemId == R.id.nav_home) { // Example: explicit handling for Home
                    navController.navigate(R.id.homeFragment, null, navOptions);
                } else if (itemId == R.id.nav_problem_list) { // Example: explicit handling for Problem List
                     navController.navigate(R.id.problemListFragment, null, navOptions);
                 } else if (itemId == R.id.nav_history) { // <<<--- Added this case
                     navController.navigate(R.id.navigation_history, null, navOptions);
                 } else if (itemId == R.id.navigation_bookmark) {
                     navController.navigate(R.id.navigation_bookmark, null, navOptions);
                 } else if (itemId == R.id.nav_settings) {
                    navController.navigate(R.id.settingsFragment, null, navOptions);
                 }
                // Add other custom handling here if NavigationUI doesn't cover it
            }
        } catch (IllegalArgumentException e) {
            Log.e("MainActivity", "Failed to navigate to destination ID from drawer: " + itemId, e);
            // Maybe handle specific cases like settings separately if they are not direct destinations
            if (itemId == R.id.nav_settings) {
                // Navigate to SettingsFragment (assuming its ID in nav_graph is settingsFragment)
                try {
                     navController.navigate(R.id.settingsFragment, null, navOptions);
                     return true;
                } catch (IllegalArgumentException ex) {
                     Log.e("MainActivity", "Failed to navigate to settingsFragment", ex);
                }
            }
            return false; // Indicate navigation failed or wasn't handled
        }
        return true; // Event handled
    }

    // --- Handle ActionBar Up button --- (Modified)
    @Override
    public boolean onSupportNavigateUp() {
        Log.d("MainActivity", "onSupportNavigateUp called.");
        // Let NavigationUI handle navigating Up or opening the drawer
        return NavigationUI.navigateUp(navController, appBarConfiguration) || super.onSupportNavigateUp();
    }

    // --- Handle Back button press to close drawer --- (Added)
    @Override
    public void onBackPressed() {
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            drawerLayout.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    private void applyAppTheme() {
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
        String themePref = prefs.getString(SettingsFragment.KEY_PREF_THEME, "default");
        int themeResId;
        switch (themePref) {
            case "terracotta":
                themeResId = R.style.Theme_ContentfulJavasilver_Terracotta;
                break;
            case "forest_green":
                themeResId = R.style.Theme_ContentfulJavasilver_ForestGreen;
                break;
            case "indigo":
                themeResId = R.style.Theme_ContentfulJavasilver_Indigo;
                break;
            case "slate":
                themeResId = R.style.Theme_ContentfulJavasilver_Slate;
                break;
            case "ocean_blue":
                themeResId = R.style.Theme_ContentfulJavasilver_OceanBlue;
                break;
            case "mint_green":
                themeResId = R.style.Theme_ContentfulJavasilver_MintGreen;
                break;
            case "default": // Fallthrough for default case
            default:
                themeResId = R.style.Theme_ContentfulJavasilver; // Base theme
                break;
        }
        Log.d("MainActivity", "Applying theme: " + themePref + " (Res ID: " + themeResId + ")");
        setTheme(themeResId);
    }

    // Helper method to set up toggle buttons
    private void setupToggleButtons() {
        binding.homeToggle.setOnClickListener(v -> {
            // Navigate to home if not already there
            if (navController.getCurrentDestination().getId() != R.id.homeFragment) {
                navController.navigate(R.id.homeFragment);
            }
        });
        
        binding.learnToggle.setOnClickListener(v -> {
            // Navigate to problem list if not already there
            if (navController.getCurrentDestination().getId() != R.id.problemListFragment) {
                navController.navigate(R.id.problemListFragment);
            }
        });
    }
    
    // Helper method to update toggle buttons based on current destination
    private void updateToggleState(int destinationId) {
        if (destinationId == R.id.homeFragment) {
            // Home screen is active
            binding.homeToggle.setChecked(true);
            binding.learnToggle.setChecked(false);
        } else if (destinationId == R.id.problemListFragment ||
                   destinationId == R.id.chapterFragment ||
                   destinationId == R.id.quizFragment) {
            // Learning-related screens are active
            binding.homeToggle.setChecked(false);
            binding.learnToggle.setChecked(true);
        }
    }
}

================
File: app/src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- **** Generated Color Scheme (Lavender Based - Primary: #7C5EAA) **** -->
    <!-- Base Light Theme Colors -->
    <color name="md_theme_primary">#7C5EAA</color>
    <color name="md_theme_onPrimary">#FFFFFF</color>
    <color name="md_theme_primaryContainer">#F1DEFF</color>
    <color name="md_theme_onPrimaryContainer">#311962</color>
    <color name="md_theme_secondary">#645A70</color>
    <color name="md_theme_onSecondary">#FFFFFF</color>
    <color name="md_theme_secondaryContainer">#EBDDF7</color>
    <color name="md_theme_onSecondaryContainer">#1F182A</color>
    <color name="md_theme_tertiary">#7E525D</color>
    <color name="md_theme_onTertiary">#FFFFFF</color>
    <color name="md_theme_tertiaryContainer">#FFD9E1</color>
    <color name="md_theme_onTertiaryContainer">#31101B</color>
    <color name="md_theme_error">#BA1A1A</color>
    <color name="md_theme_onError">#FFFFFF</color>
    <color name="md_theme_errorContainer">#FFDAD6</color>
    <color name="md_theme_onErrorContainer">#410002</color>
    <color name="md_theme_background">#FFFBFF</color>
    <color name="md_theme_onBackground">#1D1B1E</color>
    <color name="md_theme_surface">#FFFBFF</color>
    <color name="md_theme_onSurface">#1D1B1E</color>
    <color name="md_theme_surfaceVariant">#E8E0EB</color>
    <color name="md_theme_onSurfaceVariant">#4A454E</color>
    <color name="md_theme_outline">#7B757F</color>
    <color name="md_theme_inverseOnSurface">#F5EFF4</color>
    <color name="md_theme_inverseSurface">#323033</color>
    <color name="md_theme_inversePrimary">#DEC1FF</color>
    <color name="md_theme_surfaceTint">#7C5EAA</color>
    <color name="md_theme_outlineVariant">#CCC4CF</color>
    <color name="md_theme_scrim">#000000</color>

    <!-- 追加: surfaceContainerHigh for Light Theme -->
    <color name="md_theme_light_surfaceContainerHigh">#F1EFF4</color> <!-- Example: Slightly off-white -->

    <!-- 追加: surfaceContainerHighest for Light Theme -->
    <color name="md_theme_light_surfaceContainerHighest">#E8E0EB</color> <!-- Example: Slightly darker off-white -->

    <!-- 追加: Dummy Surface Containers for Dark Theme (for Lint) -->
    <color name="md_theme_dark_surfaceContainer">#F1EFF4</color>      <!-- Use Light High as dummy -->
    <color name="md_theme_dark_surfaceContainerHigh">#E8E0EB</color>     <!-- Use Light Highest as dummy -->
    <color name="md_theme_dark_surfaceContainerHighest">#E0DADE</color>  <!-- Use even darker dummy -->

    <!-- **** Custom Colors for App Logic **** -->
    <color name="correct_green">#4CAF50</color> <!-- Green for correct answers -->
    <color name="incorrect_red">#F44336</color> <!-- Red for incorrect answers -->

    <!-- **** Custom Colors **** -->
    <color name="drawer_background_dark_semi_transparent">#CC121212</color>
    <color name="card_background_dark_semi_transparent">#B332303E</color>
    <color name="card_background_dark_desaturated">#B332303E</color>
    <color name="button_pink_text">#EC407A</color>

    <!-- **** Theme: Terracotta (M3 Updated) **** -->
    <color name="terracotta_theme_primary">#B55100</color>
    <color name="terracotta_theme_onPrimary">#FFFFFF</color>
    <color name="terracotta_theme_primaryContainer">#FFDBC8</color>
    <color name="terracotta_theme_onPrimaryContainer">#3D1600</color>
    <color name="terracotta_theme_secondary">#775747</color>
    <color name="terracotta_theme_onSecondary">#FFFFFF</color>
    <color name="terracotta_theme_secondaryContainer">#FFDBC8</color>
    <color name="terracotta_theme_onSecondaryContainer">#2C150A</color>
    <color name="terracotta_theme_tertiary">#685F2F</color>
    <color name="terracotta_theme_onTertiary">#FFFFFF</color>
    <color name="terracotta_theme_tertiaryContainer">#F0E3A8</color>
    <color name="terracotta_theme_onTertiaryContainer">#211C00</color>
    <color name="terracotta_theme_error">#BA1A1A</color>
    <color name="terracotta_theme_onError">#FFFFFF</color>
    <color name="terracotta_theme_errorContainer">#FFDAD6</color>
    <color name="terracotta_theme_onErrorContainer">#410002</color>
    <color name="terracotta_theme_background">#FFFBFF</color>
    <color name="terracotta_theme_onBackground">#201A17</color>
    <color name="terracotta_theme_surface">#FFFBFF</color>
    <color name="terracotta_theme_onSurface">#201A17</color>
    <color name="terracotta_theme_surfaceVariant">#F5DED4</color>
    <color name="terracotta_theme_onSurfaceVariant">#53433C</color>
    <color name="terracotta_theme_outline">#85736B</color>
    <color name="terracotta_theme_inverseOnSurface">#FBEEE9</color>
    <color name="terracotta_theme_inverseSurface">#362F2C</color>
    <color name="terracotta_theme_inversePrimary">#FFB68A</color>
    <color name="terracotta_theme_surfaceTint">#B55100</color>
    <color name="terracotta_theme_outlineVariant">#D8C2B9</color>
    <color name="terracotta_theme_scrim">#000000</color>

    <!-- **** Theme: Forest Green (M3 Updated) **** -->
    <color name="forest_theme_primary">#006E10</color>
    <color name="forest_theme_onPrimary">#FFFFFF</color>
    <color name="forest_theme_primaryContainer">#96FA8B</color>
    <color name="forest_theme_onPrimaryContainer">#002202</color>
    <color name="forest_theme_secondary">#53634E</color>
    <color name="forest_theme_onSecondary">#FFFFFF</color>
    <color name="forest_theme_secondaryContainer">#D6E8CD</color>
    <color name="forest_theme_onSecondaryContainer">#111F0F</color>
    <color name="forest_theme_tertiary">#386569</color>
    <color name="forest_theme_onTertiary">#FFFFFF</color>
    <color name="forest_theme_tertiaryContainer">#BCEBED</color>
    <color name="forest_theme_onTertiaryContainer">#002022</color>
    <color name="forest_theme_error">#BA1A1A</color>
    <color name="forest_theme_onError">#FFFFFF</color>
    <color name="forest_theme_errorContainer">#FFDAD6</color>
    <color name="forest_theme_onErrorContainer">#410002</color>
    <color name="forest_theme_background">#FDFDF6</color>
    <color name="forest_theme_onBackground">#1A1C19</color>
    <color name="forest_theme_surface">#FDFDF6</color>
    <color name="forest_theme_onSurface">#1A1C19</color>
    <color name="forest_theme_surfaceVariant">#DFE4D7</color>
    <color name="forest_theme_onSurfaceVariant">#434840</color>
    <color name="forest_theme_outline">#73796F</color>
    <color name="forest_theme_inverseOnSurface">#F1F1EA</color>
    <color name="forest_theme_inverseSurface">#2F312D</color>
    <color name="forest_theme_inversePrimary">#7ADC71</color>
    <color name="forest_theme_surfaceTint">#006E10</color>
    <color name="forest_theme_outlineVariant">#C3C8BD</color>
    <color name="forest_theme_scrim">#000000</color>

    <!-- **** Theme: Indigo (M3 Updated) **** -->
    <color name="indigo_theme_primary">#3D55CC</color>
    <color name="indigo_theme_onPrimary">#FFFFFF</color>
    <color name="indigo_theme_primaryContainer">#DEE0FF</color>
    <color name="indigo_theme_onPrimaryContainer">#001062</color>
    <color name="indigo_theme_secondary">#5B5D72</color>
    <color name="indigo_theme_onSecondary">#FFFFFF</color>
    <color name="indigo_theme_secondaryContainer">#E0E0F9</color>
    <color name="indigo_theme_onSecondaryContainer">#181A2C</color>
    <color name="indigo_theme_tertiary">#77536C</color>
    <color name="indigo_theme_onTertiary">#FFFFFF</color>
    <color name="indigo_theme_tertiaryContainer">#FFD8EB</color>
    <color name="indigo_theme_onTertiaryContainer">#2D1127</color>
    <color name="indigo_theme_error">#BA1A1A</color>
    <color name="indigo_theme_onError">#FFFFFF</color>
    <color name="indigo_theme_errorContainer">#FFDAD6</color>
    <color name="indigo_theme_onErrorContainer">#410002</color>
    <color name="indigo_theme_background">#FFFBFF</color>
    <color name="indigo_theme_onBackground">#1B1B1F</color>
    <color name="indigo_theme_surface">#FFFBFF</color>
    <color name="indigo_theme_onSurface">#1B1B1F</color>
    <color name="indigo_theme_surfaceVariant">#E4E1EC</color>
    <color name="indigo_theme_onSurfaceVariant">#46464F</color>
    <color name="indigo_theme_outline">#777680</color>
    <color name="indigo_theme_inverseOnSurface">#F3EFF4</color>
    <color name="indigo_theme_inverseSurface">#303034</color>
    <color name="indigo_theme_inversePrimary">#BAC3FF</color>
    <color name="indigo_theme_surfaceTint">#3D55CC</color>
    <color name="indigo_theme_outlineVariant">#C7C5D0</color>
    <color name="indigo_theme_scrim">#000000</color>

    <!-- **** Theme: Slate (M3 Updated) **** -->
    <color name="slate_theme_primary">#4A6472</color>
    <color name="slate_theme_onPrimary">#FFFFFF</color>
    <color name="slate_theme_primaryContainer">#CFE6F3</color>
    <color name="slate_theme_onPrimaryContainer">#031F2A</color>
    <color name="slate_theme_secondary">#4E616D</color>
    <color name="slate_theme_onSecondary">#FFFFFF</color>
    <color name="slate_theme_secondaryContainer">#D1E5F4</color>
    <color name="slate_theme_onSecondaryContainer">#0A1E28</color>
    <color name="slate_theme_tertiary">#5F5B7D</color>
    <color name="slate_theme_onTertiary">#FFFFFF</color>
    <color name="slate_theme_tertiaryContainer">#E5DFFF</color>
    <color name="slate_theme_onTertiaryContainer">#1B1836</color>
    <color name="slate_theme_error">#BA1A1A</color>
    <color name="slate_theme_onError">#FFFFFF</color>
    <color name="slate_theme_errorContainer">#FFDAD6</color>
    <color name="slate_theme_onErrorContainer">#410002</color>
    <color name="slate_theme_background">#FBFCFE</color>
    <color name="slate_theme_onBackground">#191C1E</color>
    <color name="slate_theme_surface">#FBFCFE</color>
    <color name="slate_theme_onSurface">#191C1E</color>
    <color name="slate_theme_surfaceVariant">#DCE4E9</color>
    <color name="slate_theme_onSurfaceVariant">#40484C</color>
    <color name="slate_theme_outline">#70787D</color>
    <color name="slate_theme_inverseOnSurface">#EFF1F3</color>
    <color name="slate_theme_inverseSurface">#2E3133</color>
    <color name="slate_theme_inversePrimary">#B3CAD6</color>
    <color name="slate_theme_surfaceTint">#4A6472</color>
    <color name="slate_theme_outlineVariant">#C0C8CD</color>
    <color name="slate_theme_scrim">#000000</color>

    <!-- **** Theme: Ocean Blue (M3 Updated) **** -->
    <color name="ocean_theme_primary">#006978</color>
    <color name="ocean_theme_onPrimary">#FFFFFF</color>
    <color name="ocean_theme_primaryContainer">#99F0FF</color>
    <color name="ocean_theme_onPrimaryContainer">#002024</color>
    <color name="ocean_theme_secondary">#4A6267</color>
    <color name="ocean_theme_onSecondary">#FFFFFF</color>
    <color name="ocean_theme_secondaryContainer">#CCE7EC</color>
    <color name="ocean_theme_onSecondaryContainer">#051F23</color>
    <color name="ocean_theme_tertiary">#535E7D</color>
    <color name="ocean_theme_onTertiary">#FFFFFF</color>
    <color name="ocean_theme_tertiaryContainer">#DAE2FF</color>
    <color name="ocean_theme_onTertiaryContainer">#0F1A36</color>
    <color name="ocean_theme_error">#BA1A1A</color>
    <color name="ocean_theme_onError">#FFFFFF</color>
    <color name="ocean_theme_errorContainer">#FFDAD6</color>
    <color name="ocean_theme_onErrorContainer">#410002</color>
    <color name="ocean_theme_background">#FBFCFD</color>
    <color name="ocean_theme_onBackground">#191C1D</color>
    <color name="ocean_theme_surface">#FBFCFD</color>
    <color name="ocean_theme_onSurface">#191C1D</color>
    <color name="ocean_theme_surfaceVariant">#DBE4E6</color>
    <color name="ocean_theme_onSurfaceVariant">#3F484A</color>
    <color name="ocean_theme_outline">#6F797B</color>
    <color name="ocean_theme_inverseOnSurface">#EFF1F1</color>
    <color name="ocean_theme_inverseSurface">#2D3131</color>
    <color name="ocean_theme_inversePrimary">#7DD4E5</color>
    <color name="ocean_theme_surfaceTint">#006978</color>
    <color name="ocean_theme_outlineVariant">#BFC8CA</color>
    <color name="ocean_theme_scrim">#000000</color>

    <!-- **** Theme: Mint Green (M3 Updated) **** -->
    <color name="mint_theme_primary">#00897B</color>
    <color name="mint_theme_onPrimary">#FFFFFF</color>
    <color name="mint_theme_primaryContainer">#A0F4E8</color>
    <color name="mint_theme_onPrimaryContainer">#00201D</color>
    <color name="mint_theme_secondary">#4A635F</color>
    <color name="mint_theme_onSecondary">#FFFFFF</color>
    <color name="mint_theme_secondaryContainer">#CCE8E3</color>
    <color name="mint_theme_onSecondaryContainer">#05201D</color>
    <color name="mint_theme_tertiary">#46617A</color>
    <color name="mint_theme_onTertiary">#FFFFFF</color>
    <color name="mint_theme_tertiaryContainer">#CCE5FF</color>
    <color name="mint_theme_onTertiaryContainer">#001E32</color>
    <color name="mint_theme_error">#BA1A1A</color>
    <color name="mint_theme_onError">#FFFFFF</color>
    <color name="mint_theme_errorContainer">#FFDAD6</color>
    <color name="mint_theme_onErrorContainer">#410002</color>
    <color name="mint_theme_background">#FAFDFB</color>
    <color name="mint_theme_onBackground">#191C1B</color>
    <color name="mint_theme_surface">#FAFDFB</color>
    <color name="mint_theme_onSurface">#191C1B</color>
    <color name="mint_theme_surfaceVariant">#DBE5E2</color>
    <color name="mint_theme_onSurfaceVariant">#3F4947</color>
    <color name="mint_theme_outline">#6F7977</color>
    <color name="mint_theme_inverseOnSurface">#EFF1EF</color>
    <color name="mint_theme_inverseSurface">#2D3130</color>
    <color name="mint_theme_inversePrimary">#84D7CC</color>
    <color name="mint_theme_surfaceTint">#00897B</color>
    <color name="mint_theme_outlineVariant">#BFC9C6</color>
    <color name="mint_theme_scrim">#000000</color>

    <!-- **** EXISTING COLORS (Review and Migrate) **** -->
    <color name="background_color">#F8F9FA</color>
    <color name="surface_color">#FFFFFF</color>
    <color name="text_primary">#333333</color>
    <color name="text_secondary">#6c757d</color>
    <color name="accent_color">#007AFF</color>
    <color name="ripple_color">#E0E0E0</color>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="divider_color">?attr/colorOutlineVariant</color>
    <color name="correct_color">#4CAF50</color>
    <color name="missed_color">#FFAB40</color>
    <color name="start_background_dark">#212121</color>
    <color name="start_text_light">#E0E0E0</color>
    <color name="button_background">?attr/colorPrimary</color>
    <color name="button_text">?attr/colorOnPrimary</color>
    <color name="statistic_item_background">?attr/colorSurfaceContainer</color>
    <color name="activity_bar_active">#60A5FA</color>
    <color name="activity_bar_inactive">#3949AB</color>
    <color name="text_secondary_light">#A5B4FC</color>
    <color name="accent_color_light">#60A5FA</color>
    <color name="card_background_light">?attr/colorSurface</color>
    <color name="text_tertiary">?attr/colorOnSurfaceVariant</color>
    <color name="card_background_light_blue">#E3F2FD</color>
    <color name="text_highlight">#FFFFFF</color>

    <!-- ユニット別カラー -->
    <color name="unit_1_color">#4FC3F7</color>
    <color name="unit_2_color">#9575CD</color>
    <color name="unit_3_color">#FF7043</color>
    <color name="unit_4_color">#4CAF50</color>
    <color name="unit_5_color">#7E57C2</color>
    <color name="unit_6_color">#F44336</color>
    <color name="unit_default_color">#BBBBBB</color>

    <!-- **** Quiz Choice Colors **** -->
    <color name="quiz_choice_text_correct">@color/md_theme_primary</color>
    <color name="quiz_choice_text_incorrect">@color/md_theme_error</color>
    <color name="quiz_choice_text_default">?attr/colorOnSurface</color>
    <color name="quiz_choice_text_disabled">?attr/colorOnSurfaceVariant</color>

    <color name="quiz_choice_bg_correct">#1A4CAF50</color>
    <color name="quiz_choice_bg_incorrect">#1ABA1A1A</color>
    <color name="quiz_choice_bg_selected">?attr/colorSurfaceContainerHighest</color>
    <color name="quiz_choice_bg_default">?attr/colorSurfaceContainer</color>

    <color name="quiz_choice_stroke_selected">?attr/colorPrimary</color>
    <color name="quiz_choice_stroke_default">?attr/colorOutline</color>

    <color name="quiz_checkbox_tint_selected">?attr/colorPrimary</color>
    <color name="quiz_checkbox_tint_default">?attr/colorOnSurfaceVariant</color>

    <!-- **** Theme: Deep Purple (Placeholder) **** -->
    <color name="deep_purple_theme_primary">#673AB7</color>
    <color name="deep_purple_theme_onPrimary">#FFFFFF</color>
    <color name="deep_purple_theme_surface">#F3E5F5</color>
    <!-- 他の Deep Purple 色定義も必要に応じて追加 -->

    <!-- **** Theme: Orange (Placeholder) **** -->
    <color name="orange_theme_primary">#FF9800</color>
    <color name="orange_theme_onPrimary">#FFFFFF</color>
    <color name="orange_theme_surface">#FFF3E0</color>
    <!-- 他の Orange 色定義も必要に応じて追加 -->

    <!-- **** Theme: Pink (Placeholder) **** -->
    <color name="pink_theme_primary">#E91E63</color>
    <color name="pink_theme_onPrimary">#FFFFFF</color>
    <color name="pink_theme_surface">#FCE4EC</color>
    <!-- 他の Pink 色定義も必要に応じて追加 -->

    <!-- **** Theme: Teal (Placeholder) **** -->
    <color name="teal_theme_primary">#009688</color>
    <color name="teal_theme_onPrimary">#FFFFFF</color>
    <color name="teal_theme_surface">#E0F2F1</color>
    <!-- 他の Teal 色定義も必要に応じて追加 -->

    <color name="unit_color_1">#4FC3F7</color> <!-- 赤 -->
    <color name="unit_color_2">#9575CD</color> <!-- オレンジ -->
    <color name="unit_color_3">#FF7043</color> <!-- 黄色 -->
    <color name="unit_color_4">#4CAF50</color> <!-- 緑 -->
    <color name="unit_color_5">#7E57C2</color> <!-- 青 -->
    <color name="unit_color_6">#F44336</color> <!-- 紫 -->

    <!-- **** Missing Colors for Banner (Added) **** -->
    <color name="colorAccent">#FF6200EE</color> <!-- Purple 500 -->
    <color name="banner_background">#33304d</color> <!-- Dark Purple/Grey (Updated) -->
    <color name="premium_banner_text_color">#FFFFFF</color> <!-- White -->
    <color name="gem_icon_tint">#CDB5FF</color> <!-- Light Purple for Gem Icon -->
    <color name="go_premium_button_background">#673AB7</color> <!-- Deep Purple for Button -->

    <!-- 設定画面のサマリー用 不透明な白 -->
    <color name="preference_secondary_text_opaque">#FFFFFFFF</color>

    <!-- Simple Dark Theme Colors -->
    <color name="dark_surface_variant_for_black">#1F1F1F</color>
    <color name="dark_surface_variant_for_black_lighter">#333333</color>
    <color name="dark_surface_variant_for_black_lightest">#444444</color>
    <color name="dark_on_surface_variant_for_black">#CCCCCC</color>
    <color name="dark_outline_for_black">#888888</color>
</resources>

================
File: app/src/main/res/values/strings.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">JavaSilver</string>
    <string name="question_label">問題文</string>
    <string name="count_label">Q%d</string>
    <string name="btn_answer">選択肢</string>
    <string name="code_block">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;TextView\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Hello World!&quot; /&gt;\n\n&lt;/LinearLayout&gt;</string>
    <string name="logo_description">JCVロゴ</string>

    <!-- Loading Status -->
    <string name="loading_status_checking">データを確認中...</string>
    <string name="loading_status_downloading">最新データをダウンロード中...</string>
    <string name="loading_status_saving">データベースに保存中...</string>
    <string name="loading_status_loading">データを読み込み中...</string>
    <string name="loading_status_complete">完了！</string>
    <string name="loading_status_error_download">エラー: データのダウンロードに失敗しました</string>
    <string name="loading_status_error_saving">エラー: データベースへの保存に失敗しました</string>
    <string name="loading_status_error_no_data">エラー: 保存するデータがありません</string>

    <!-- Start Screen -->
    <string name="start_prompt">画面をタップして開始</string>
    <string name="login">ログイン / 新規登録</string>
    <string name="use_without_login">ログインせずに利用する</string>

    <!-- Bottom Navigation -->
    <string name="title_history">学習履歴</string>
    <string name="title_bookmark">ブックマーク</string> <!-- Add bookmark title -->

    <!-- Common Buttons -->
    <string name="back_button_description">戻る</string>

    <!-- Settings Screen (PreferenceFragmentCompat) -->
    <string name="title_settings">設定</string>
    <!-- Preference Categories -->
    <string name="pref_category_appearance">外観</string>
    <string name="pref_category_general">全般</string>
    <!-- Theme Preference -->
    <string name="pref_title_theme">テーマ</string>
    <string name="theme_entry_default">デフォルト (青)</string>
    <string name="theme_entry_green">グリーン</string>
    <string name="theme_entry_orange">オレンジ</string>
    <string name="theme_entry_purple">パープル</string>
    <string name="theme_entry_teal">ティール</string>
    <string name="theme_entry_pink">ピンク</string>
    <string name="theme_entry_indigo">インディゴ</string>
    <string name="theme_entry_cyan">シアン</string>
    <string name="theme_entry_red">レッド</string>
    <string name="theme_entry_yellow">イエロー</string>
    <string name="theme_ocean_blue">Ocean Blue</string>
    <string name="theme_mint_green">Mint Green</string>
    <string name="theme_terracotta">Terracotta</string>
    <string name="theme_forest_green">Forest Green</string>
    <string name="theme_indigo">Indigo</string>
    <string name="theme_slate">Slate</string>
    <string name="theme_default">Default (Deep Purple)</string>
    <!-- Notification Preference -->
    <string name="pref_title_notification">学習リマインダー通知</string>
    <string name="pref_summary_notification_on">オン</string>
    <string name="pref_summary_notification_off">オフ</string>
    <!-- Privacy Policy Preference -->
    <string name="pref_title_privacy_policy">プライバシーポリシー</string>
    <string name="pref_summary_privacy_policy">プライバシーポリシーを表示</string>
    <!-- Version Preference -->
    <string name="pref_title_version">アプリバージョン</string>
    <string name="version_format">%s</string> <!-- Keep only placeholder -->

    <!-- Old Settings Strings (Remove or keep for reference, but not used by PreferenceFragment) -->
    <!-- <string name="notification_settings">通知設定</string> -->
    <!-- <string name="learning_reminder">学習リマインダー</string> -->
    <!-- <string name="app_info">アプリ情報</string> -->
    <!-- <string name="privacy_policy">プライバシーポリシー</string> -->

    <!-- Privacy Policy Screen -->
    <string name="privacy_policy_title">プライバシーポリシー</string>
    <string name="privacy_policy_content">
        <![CDATA[
        制定日：YYYY年MM月DD日\n\n
        [アプリ名]（以下、「本アプリ」といいます。）は、ユーザーの個人情報保護の重要性について認識し、個人情報の保護に関する法律（以下、「個人情報保護法」といいます。）を遵守すると共に、以下のプライバシーポリシー（以下、「本プライバシーポリシー」といいます。）に従い、適切な取扱い及び保護に努めます。\n\n
        1. 個人情報の定義\n
        本プライバシーポリシーにおいて、個人情報とは、個人情報保護法第2条第1項により定義された個人情報、すなわち、生存する個人に関する情報であって、当該情報に含まれる氏名、生年月日その他の記述等により特定の個人を識別することができるもの（他の情報と容易に照合することができ、それにより特定の個人を識別することができることとなるものを含みます。）、もしくは個人識別符号が含まれる情報を意味するものとします。\n\n
        2. 個人情報の収集\n
        本アプリは、個人情報を収集しません。\n\n
        3. 個人情報の利用目的\n
        本アプリは個人情報を収集しないため、利用することもありません。\n\n
        4. 個人情報利用目的の変更\n
        本プライバシーポリシーは、法令の変更、事業運営上の必要性、その他の理由により、変更されることがあります。変更後のプライバシーポリシーは、本アプリ内での掲示その他の適切な方法により周知し、変更後のプライバシーポリシーが掲示された時点で効力を生じるものとします。\n\n
        5. お問い合わせ\n
        開示等のお申出、ご意見、ご質問、苦情のお申出その他個人情報の取扱いに関するお問い合わせは、下記の窓口までお願いいたします。\n
        [連絡先情報を記載 e.g., Email: support@example.com]\n\n
        以上
        ]]>
    </string>

    <string name="explanation_dialog_title">解説</string>
    <string name="ok">OK</string>
    <string name="question_qid_format">問題 %s</string>

    <!-- Preference Titles -->
    <string name="sync_header">Sync</string>

    <!-- For Settings Theme Preference -->
    <string name="pref_theme_title">App Theme</string>
    <string name="pref_theme_summary">Choose the visual theme for the app</string>

    <string name="character_image_desc">キャラクターイメージ</string>

    <string name="action_settings">Settings</string>
    <string name="title_activity_exam">ExamActivity</string>
    <!-- Strings used for fragments for navigation -->
    <string name="home_fragment_label">Home Fragment</string>
    <string name="gallery_fragment_label">Gallery Fragment</string>
    <string name="slideshow_fragment_label">Slideshow Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>
    <string name="exam_category">分野別</string>
    <string name="exam_list">一覧</string>
    <string name="exam_random">ランダム出題</string>
    <string name="home">Home</string>
    <string name="learn">Learn</string>
    <string name="problem_list_title">Problem List</string>
    <string name="confirm">確認</string>
    <string name="cancel">キャンセル</string>
    <string name="search_hint">問題を検索…</string>
    <string name="free_lessons_left">2 Free lessons left</string>
    <string name="go_premium">Go Premium</string>
    <string name="java_learning_path">Java Silver学習パス</string>
    <string name="nuvesco_learning_path">Java Silver学習プログラム</string>
    <string name="unit_format">Unit %d</string>
    <string name="lessons_progress_format">%1$d/%2$d Lessons</string>
    <string name="lesson_icon_description">レッスンアイコン</string>
    <string name="lesson_completed_description">完了済みマーク</string>
    <string name="lesson_number_format">Lesson %d</string>
    <string name="syntax">構文</string>
    <string name="concept">概念</string>
    <string name="practice">練習</string>
    <string name="lesson_1_title">Javaの概要と簡単なJavaプログラムの作成</string>
    <string name="lesson_2_title">Javaの基本データ型と文字列の操作</string>
    <string name="lesson_3_title">演算子と制御構造</string>
    <string name="lesson_4_title">クラスの定義とインスタンスの使用</string>
    <string name="lesson_5_title">継承とインタフェースの使用</string>
    <string name="lesson_6_title">例外処理</string>
    <string name="lesson_1_desc">Javaの基本的な概念とプログラム構造</string>
    <string name="lesson_2_desc">データ型、変数、文字列の扱い方</string>
    <string name="lesson_3_desc">制御フローと演算子</string>
    <string name="lesson_4_desc">オブジェクト指向プログラミングの基礎</string>
    <string name="lesson_5_desc">クラス設計の応用と多態性</string>
    <string name="lesson_6_desc">例外のスロー、キャッチと適切な処理</string>
    <string name="unit_number_format">Unit %d</string>

    <!-- Empty State Messages -->
    <string name="empty_state_learning_log">まだ学習ログはありません。\n学習を始めましょう！</string>
    <string name="empty_state_statistics">まだ統計データがありません。\n学習を進めてデータを集めましょう！</string>

    <string name="chapter_format">第%d章</string>
    <string name="categories_progress_format">%1$d/%2$d Lessons</string>
    <string name="java_chapters_title">Java 学習コース</string>
    <string name="java_chapters_description">基礎から応用まで、各章を順に進めましょう</string>
    <string name="chapter_icon_description">Chapter icon</string>
    <string name="questions_progress_format">%1$d/%2$d Questions</string>
    <string name="category_icon_description">Category icon</string>
    <string name="question_count_format">%d問</string>
    <string name="question_item_number_format">問題 %s</string>

    <string name="default_web_client_id" translatable="false">21822521233-rn9fikgni7bv5kr4k8vosoegkq4qp16e.apps.googleusercontent.com</string>

    <!-- Banner String -->
    <string name="free_lessons_left_template">残り%dレッスンの無料体験</string>

    <!-- Problem Status Badges -->
    <string name="status_new">新規</string>
    <string name="status_completed">完了</string>

    <string name="chapter_icon_desc">Chapter Icon</string>
    <string name="category_icon_desc">Category Icon</string>
    <string name="problem_icon_description">問題アイコン</string>

    <!-- Banner Strings -->
    <string name="today_learning_time_template">今日の学習時間: %s</string>

</resources>



================================================================
End of Codebase
================================================================
